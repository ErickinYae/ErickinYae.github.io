<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Erickin</title>
  
  
  <link href="https://erickinyae.github.io/atom.xml" rel="self"/>
  
  <link href="https://erickinyae.github.io/"/>
  <updated>2023-11-13T02:21:10.820Z</updated>
  <id>https://erickinyae.github.io/</id>
  
  <author>
    <name>Erickin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Penetration Test</title>
    <link href="https://erickinyae.github.io/2023/11/13/Penetration-Test/"/>
    <id>https://erickinyae.github.io/2023/11/13/Penetration-Test/</id>
    <published>2023-11-13T00:51:31.000Z</published>
    <updated>2023-11-13T02:21:10.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Penetration-Testing-Methodologies"><a href="#Penetration-Testing-Methodologies" class="headerlink" title="Penetration Testing Methodologies"></a>Penetration Testing Methodologies</h1><table><thead><tr><th>Stage</th><th>Description</th></tr></thead><tbody><tr><td>Information Gathering</td><td>情报收集，不涉及扫描任何系统</td></tr><tr><td>Enumeration&#x2F;Scanning</td><td>发现系统运行的应用程序和服务</td></tr><tr><td>Exploitation</td><td>利用在系统和应用程序上发现的漏洞</td></tr><tr><td>Privilege Escalation</td><td>提权</td></tr><tr><td>Post-exploitation</td><td>同网段水平扩展、获取信息、掩盖踪迹</td></tr></tbody></table><h1 id="Developer-Tools"><a href="#Developer-Tools" class="headerlink" title="Developer Tools"></a>Developer Tools</h1><h2 id="Inspector"><a href="#Inspector" class="headerlink" title="Inspector"></a>Inspector</h2><p>检查网页前端源代码，可以从其中获取一些开发环节忘记屏蔽或删除的信息；</p><h2 id="Debugger"><a href="#Debugger" class="headerlink" title="Debugger"></a>Debugger</h2><p>主要用于开发人员调试JavaScript，作为渗透测试人员，可以让我们以此为入口深入挖掘JavaScript代码；</p><h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><p>跟踪网页发出的每个外部请求，如果单机”Network“选项卡，然后刷新页面，即可看到该页面请求的所有文件；</p><h1 id="Content-Discovery"><a href="#Content-Discovery" class="headerlink" title="Content Discovery"></a>Content Discovery</h1><table><thead><tr><th>资源</th><th>描述</th></tr></thead><tbody><tr><td>HTTP Headers</td><td>可以通过Http请求头获取一些服务器信息，包括浏览器版本、机器版本、协议等；</td></tr><tr><td><a href="https://www.wappalyzer.com/">https://www.wappalyzer.com/</a></td><td>识别网站使用的技术、包括框架、CMS、支付处理器等，还可以查看版本号；</td></tr><tr><td><a href="https://archive.org/web/">https://archive.org/web/</a></td><td>网站历史档案，有助于查看某网站停止使用但暂未关闭的历史网站；</td></tr></tbody></table><h2 id="Atuomated-Discovery"><a href="#Atuomated-Discovery" class="headerlink" title="Atuomated Discovery"></a>Atuomated Discovery</h2><table><thead><tr><th>工具</th><th>指令</th></tr></thead><tbody><tr><td>ffuf</td><td><code>ffuf -w &lt;./wordlists&gt; -u &lt;url&gt;</code></td></tr><tr><td>dirb</td><td><code>dirb &lt;url&gt; &lt;./wordlists&gt;</code></td></tr><tr><td>Gobuster</td><td><code>gobuster dir --url &lt;url&gt; -w &lt;./wordlists&gt;</code></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Penetration-Testing-Methodologies&quot;&gt;&lt;a href=&quot;#Penetration-Testing-Methodologies&quot; class=&quot;headerlink&quot; title=&quot;Penetration Testing Method</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>安全基础</title>
    <link href="https://erickinyae.github.io/2023/11/09/%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    <id>https://erickinyae.github.io/2023/11/09/%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/</id>
    <published>2023-11-09T05:33:04.000Z</published>
    <updated>2023-11-13T00:43:37.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><table><thead><tr><th>地址</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://tryhackme.com/dashboard#">https://tryhackme.com/dashboard#</a></td><td>攻击与网络基础</td></tr><tr><td><a href="https://tryhackme.com/room/owasptop102021">https://tryhackme.com/room/owasptop102021</a></td><td>OWASP TOP10</td></tr><tr><td><a href="https://labs.play-with-docker.com/">https://labs.play-with-docker.com/</a></td><td>docker学习</td></tr><tr><td><a href="https://cyberdefenders.org/blueteam-ctf-challenges/">https://cyberdefenders.org/blueteam-ctf-challenges/</a></td><td>蓝队训练</td></tr></tbody></table><h1 id="资讯"><a href="#资讯" class="headerlink" title="资讯"></a>资讯</h1><table><thead><tr><th>地址</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://sec.today/pulses/">https://sec.today/pulses/</a></td><td>每日安全</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;资源&quot;&gt;&lt;a href=&quot;#资源&quot; class=&quot;headerlink&quot; title=&quot;资源&quot;&gt;&lt;/a&gt;资源&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;地址&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;</summary>
      
    
    
    
    <category term="安全" scheme="https://erickinyae.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="基础" scheme="https://erickinyae.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>代码审计学习流程</title>
    <link href="https://erickinyae.github.io/2023/11/09/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1LP/"/>
    <id>https://erickinyae.github.io/2023/11/09/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1LP/</id>
    <published>2023-11-09T02:44:56.000Z</published>
    <updated>2023-11-09T03:39:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p>审计入门：</p><p><a href="https://github.com/JoyChou93/java-sec-code">https://github.com/JoyChou93/java-sec-code</a></p><p>博客：</p><p><a href="https://skewwg.github.io/">https://skewwg.github.io/</a></p><p>进阶：</p><p>在github中搜java cms项目，拉下来进行代码审计。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;资源&quot;&gt;&lt;a href=&quot;#资源&quot; class=&quot;headerlink&quot; title=&quot;资源&quot;&gt;&lt;/a&gt;资源&lt;/h1&gt;&lt;p&gt;审计入门：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/JoyChou93/java-sec-code&quot;&gt;http</summary>
      
    
    
    
    <category term="安全" scheme="https://erickinyae.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="审计" scheme="https://erickinyae.github.io/tags/%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="https://erickinyae.github.io/2023/11/06/mysql/"/>
    <id>https://erickinyae.github.io/2023/11/06/mysql/</id>
    <published>2023-11-06T02:34:30.000Z</published>
    <updated>2023-11-13T00:41:56.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><h2 id="关系型数据库设计规则"><a href="#关系型数据库设计规则" class="headerlink" title="关系型数据库设计规则"></a>关系型数据库设计规则</h2><ul><li>关系型数据库的典型数据结构是数据表；</li><li>数据在表中，表在库中；</li><li>一个数据库可以有多个表，表名是唯一不重复的；</li><li>表具有一些属性，定义了数据在表中如何存储；</li></ul><h2 id="DB、DBMS、SQL的关系"><a href="#DB、DBMS、SQL的关系" class="headerlink" title="DB、DBMS、SQL的关系"></a>DB、DBMS、SQL的关系</h2><ol><li>DB：database是一个数据库文件，类似.doc，.txt等；</li><li>DBMS：数据库管理系统，类似(word、wps工具)；</li><li>MySQL数据库服务器中安装了MySQL DBMS，使用MySQL DBMS来管理和操作DB，使用的是SQL语言。</li></ol><h2 id="自带数据库"><a href="#自带数据库" class="headerlink" title="自带数据库"></a>自带数据库</h2><ul><li>information_schema：保存数据库中存在的库、表等信息；</li><li>mysql：保存相关的配置信息；</li><li>performance_schema：保存数据库的运行状态信息；</li><li>sys：系统相关信息；</li></ul><h2 id="SQL语句分类"><a href="#SQL语句分类" class="headerlink" title="SQL语句分类"></a>SQL语句分类</h2><ol><li>DDL：数据定义语言：<code>CREATE\ALTER\DROP\RENAME\TRUNCATE</code></li><li>DML：数据操作语言：<code>INSERT\DELETE\UPDATE\SELECT</code></li><li>DCL：数据控制语言：<code>COMMIT\ROLLBACK\SAVEPOINT\GRANT\REVOKE</code></li></ol><h2 id="语句规范"><a href="#语句规范" class="headerlink" title="语句规范"></a>语句规范</h2><ul><li>SQL可以写在一行或多行，为了提高可读性，各句子分开写，必要时使用缩进；</li><li>每一条命令以 <code>;或\g或\G</code> 结束；</li><li>关键字不能被缩写、也不能被分行；</li><li>标点符号方面：<ul><li>所有 <code>()</code>、单引号、双引号必须成对结束；</li><li>必须使用英文半角输入；</li><li>字符串类型和日期时间类型的数据可以使用单引号 <code>&#39;&#39;</code>表示；</li><li>列的别名，尽量使用双引号 <code>&quot;&quot;</code>，且不要省略as；</li></ul></li><li>大小写：<ul><li>MySQL在Windows环境下大小写不敏感，在Linux环境下大小写敏感；<ul><li>数据库名、表名、表别名、变量名严格区分大小写；</li><li>关键字、函数名、列名（字段名）、列别名（字段别名）忽略大小写；</li></ul></li></ul></li></ul><blockquote><p>推荐的书写规范：</p><ul><li>数据库名、表名、表别名、字段名、字段别名都小写；</li><li>SQL关键字、函数名、绑定变量都大写；</li></ul></blockquote><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>单行注释 <code>#注释文字</code></li><li>单行注释 <code>-- 注释文字</code></li><li>多行注释 <code>/* 注释文字 */</code></li></ul><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><ul><li>数据库、表名不超过30个字符，变量名限制为29个；</li><li>必须只能包含A-Z，a-z，0-9, _共63个字符；</li><li>数据库名、表名、字段名等对象名中间不能包含空格；</li><li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能同名；同一个表中，字段不能同名；</li><li>必须保证字段和保留字、数据库系统或常用方法名不发生冲突，如果必须使用，则必须使用 <code>&#39;&#39;</code>引起来；</li><li>保证字段名和类型的一致性，在命名字段并为其制定数据类型的时一定要保证一致性。假如数据类型在一个表中是整数，在另一个表中则不要为字符型；</li></ul><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><table><thead><tr><th>种类</th><th>类型</th></tr></thead><tbody><tr><td>整数类型</td><td>TINYINT、SMALLINT、MEDIUMINT、INT(或INTEGER)、BIGINT</td></tr><tr><td>浮点类型</td><td>FLOAT、DOUBLE</td></tr><tr><td>定点数类型</td><td>DECIMAL</td></tr><tr><td>位类型</td><td>BIT</td></tr><tr><td>日期时间类型</td><td>YEAR、TIME、DATE、DATETIME、TIMESTAMP</td></tr><tr><td>文本字符串类型</td><td>CHAR、VARCHAR、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT</td></tr><tr><td>枚举类型</td><td>ENUM</td></tr><tr><td>集合类型</td><td>SET</td></tr><tr><td>二进制字符串类型</td><td>BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB</td></tr><tr><td>JSON类型</td><td>JSON对象、JSON数组</td></tr><tr><td>空间数据类型</td><td>单值：GEOMETRY、POINT、LINESTRING、POLYGON；集合：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、GEOMETRYCOLLECTION</td></tr></tbody></table><h3 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h3><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>INT</td><td>从-2^31到2^31-1的整型数据。存储大小为</td></tr><tr><td>CHAR(size)</td><td>定长字符数据。若未指定，默认为1个字符，最大长度255</td></tr><tr><td>VARCHAR(size)</td><td>可变长字符数据，根据字符串实际长度保存，必须指定长度</td></tr><tr><td>FLOAT(M,D)</td><td>单精度，占用4个字节，M&#x3D;整数位+小数位，D&#x3D;小数位。</td></tr><tr><td>DOUBLE(M,D)</td><td>双精度，占用8个字节，D&lt;&#x3D;M&lt;&#x3D;255,0&lt;&#x3D;D&lt;&#x3D;30，默认M+D&lt;&#x3D;15</td></tr><tr><td>DECIMAL(M,D)</td><td>高精度小数，占用M+2个字节，D&lt;&#x3D;M&lt;&#x3D;65，0&lt;&#x3D;D&lt;&#x3D;30，最大取值范围与DOUBLE相同</td></tr><tr><td>DATE</td><td>日期型数据，格式’YYYY-MM-DD’</td></tr><tr><td>BLOB</td><td>二进制形式的长文本数据，最大可达4G</td></tr><tr><td>TEXT</td><td>长文本数据，最大可达4G</td></tr></tbody></table><h1 id="库表操作"><a href="#库表操作" class="headerlink" title="库表操作"></a>库表操作</h1><p><strong>DESC 表名：查看表所有的字段</strong></p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>Field</td><td>字段名称</td></tr><tr><td>Type</td><td>字段类型</td></tr><tr><td>Null</td><td>表示该属性是否可以存储null值</td></tr><tr><td>Key</td><td>表示该列是否有索引，如果是PRI则表示该列是表的主键，UNI表示是UNIQUE索引的一部分，MUL表示在列中某个指定值允许出现多次</td></tr><tr><td>Default</td><td>表示该列是否有默认值，如果有在这里将显示值</td></tr><tr><td>Extra</td><td>表示可以获取的与给定列有关的附加信息，例如AUTO_INCREMENT等（自增）</td></tr></tbody></table><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><table><thead><tr><th>代码</th><th>描述</th></tr></thead><tbody><tr><td><code>CREATE DATABASE 数据库名;</code></td><td>创建数据库</td></tr><tr><td><code>CREATE DATABASE 数据库名 CHARACTER SET 字符集;</code></td><td>创建数据库并指定字符集</td></tr><tr><td><code>CREATE DATABASE IF NOT EXISTS 数据库名;</code></td><td>判断数据库是否已经存在，不存在则创建数据库（ 推荐 ）</td></tr></tbody></table><h4 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h4><table><thead><tr><th>代码</th><th>描述</th></tr></thead><tbody><tr><td><code>SHOW DATABASES; #有一个S，代表多个数据库;</code></td><td>查看当前所有的数据库</td></tr><tr><td><code>SELECT DATABASE();</code></td><td>查看当前正在使用的数据库</td></tr><tr><td><code>SHOW TABLES FROM 数据库名;</code></td><td>查看指定库下所有的表</td></tr><tr><td><code>SHOW CREATE DATABASE 数据库名;</code><br /><code>SHOW CREATE DATABASE 数据库名\G;</code></td><td>查看数据库的创建信息</td></tr><tr><td><code>USE 数据库名;</code></td><td>使用&#x2F;切换数据库</td></tr></tbody></table><h4 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h4><table><thead><tr><th>代码</th><th>描述</th></tr></thead><tbody><tr><td><code>ALTER DATABASE 数据库名 CHARACTER SET 字符集; #比如：gbk、utf8等;</code></td><td>更改数据库字符集</td></tr><tr><td><code>DROP DATABASE 数据库名;</code></td><td>删除指定的数据库</td></tr><tr><td><code>DROP DATABASE IF EXISTS 数据库名;</code></td><td>删除指定的数据库</td></tr></tbody></table><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><h5 id="创建方法1"><a href="#创建方法1" class="headerlink" title="创建方法1"></a>创建方法1</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 表名(</span><br><span class="line">字段<span class="number">1</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">字段<span class="number">2</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">字段<span class="number">3</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">……</span><br><span class="line">[表约束条件]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#Eg1:</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line"><span class="comment">-- int类型</span></span><br><span class="line">emp_id <span class="type">INT</span>,</span><br><span class="line"><span class="comment">-- 最多保存20个中英文字符</span></span><br><span class="line">emp_name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line"><span class="comment">-- 总位数不超过15位</span></span><br><span class="line">salary <span class="keyword">DOUBLE</span>,</span><br><span class="line"><span class="comment">-- 日期类型</span></span><br><span class="line">birthday <span class="type">DATE</span></span><br><span class="line">);</span><br><span class="line">#Eg2:</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept(</span><br><span class="line"><span class="comment">-- int类型，自增</span></span><br><span class="line">deptno <span class="type">INT</span>(<span class="number">2</span>) AUTO_INCREMENT,</span><br><span class="line">dname <span class="type">VARCHAR</span>(<span class="number">14</span>),</span><br><span class="line">loc <span class="type">VARCHAR</span>(<span class="number">13</span>),</span><br><span class="line"><span class="comment">-- 主键</span></span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (deptno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="创建方法2"><a href="#创建方法2" class="headerlink" title="创建方法2"></a>创建方法2</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp1 <span class="keyword">AS</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp2 <span class="keyword">AS</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span>; <span class="comment">-- 创建的emp2是空表</span></span><br></pre></td></tr></table></figure><p>Eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept80</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, salary<span class="operator">*</span><span class="number">12</span> ANNSAL, hire_date</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">80</span>;</span><br></pre></td></tr></table></figure><h4 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h4><table><thead><tr><th>代码</th><th>描述</th></tr></thead><tbody><tr><td><code>DESC 表名</code></td><td>表结构</td></tr><tr><td><code>SHOW CREATE TABLE 表名</code></td><td>表结构查询</td></tr></tbody></table><h4 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h4><h5 id="追加列"><a href="#追加列" class="headerlink" title="追加列"></a>追加列</h5><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><code>ALTER TABLE 表名 ADD 【COLUMN】 字段名 字段类型 【FIRST/AFTER 字段名】;</code></td><td></td></tr></tbody></table><p>Eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dept80</span><br><span class="line"><span class="keyword">ADD</span> job_id <span class="type">varchar</span>(<span class="number">15</span>);</span><br></pre></td></tr></table></figure><h5 id="修改列"><a href="#修改列" class="headerlink" title="修改列"></a>修改列</h5><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><code>ALTER TABLE 表名 MODIFY 【COLUMN】 字段名1 字段类型 【DEFAULT 默认值】【FIRST/AFTER 字段名】;</code></td><td>可以修改列的数据类型，长度、默认值和位置</td></tr></tbody></table><p>Eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dept80</span><br><span class="line">MODIFY last_name <span class="type">VARCHAR</span>(<span class="number">30</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dept80</span><br><span class="line">MODIFY salary <span class="keyword">double</span>(<span class="number">9</span>,<span class="number">2</span>) <span class="keyword">default</span> <span class="number">1000</span>;</span><br></pre></td></tr></table></figure><h5 id="重命名列"><a href="#重命名列" class="headerlink" title="重命名列"></a>重命名列</h5><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><code>ALTER TABLE 表名 CHANGE 【column】 列名 新列名 新数据类型;</code></td><td></td></tr></tbody></table><p>Eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dept80</span><br><span class="line">CHANGE department_name dept_name <span class="type">varchar</span>(<span class="number">15</span>);</span><br></pre></td></tr></table></figure><h5 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h5><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><code>ALTER TABLE 表名 DROP 【COLUMN】字段名</code></td><td></td></tr></tbody></table><h4 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h4><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><code>RENAME TABLE emp TO myemp;</code></td><td>rename</td></tr><tr><td><code>ALTER table dept RENAME [TO] detail_dept;</code></td><td>alter</td></tr></tbody></table><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><code>DROP TABLE [IF EXISTS] 数据表1 [, 数据表2, …, 数据表n];</code></td><td>当一张数据表 没有与其他任何数据表形成关联关系 时，可以将当前数据表直接删除；</td></tr></tbody></table><h4 id="清空表"><a href="#清空表" class="headerlink" title="清空表"></a>清空表</h4><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><code>TRUNCATE TABLE detail_dept；</code></td><td>删除表中所有的数据表，释放表的存储空间；</td></tr></tbody></table><ul><li>TRUNCATE语句不能回滚，而使用 DELETE 语句删除数据，可以回滚；</li></ul><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>alter table 表名 modify 字段 字段类型</td><td>修改字段类型</td></tr><tr><td>alter table 表名 add 字段 字段类型</td><td>添加新的字段</td></tr><tr><td>alter table 表名 add 字段 字段类型   after 字段</td><td>添加字段并指定位置</td></tr><tr><td>alter table 表名 drop 字段名</td><td>删除表字段</td></tr><tr><td>alter table 表名 change 原字段名字  新的字段名字 字段类型</td><td>修改指定的字段</td></tr><tr><td>ALTER DATABASE 数据库名 CHARACTER SET 字符集</td><td>修改数据库字符集-&gt; gbk、utf-8</td></tr></tbody></table><h1 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h1><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><table><thead><tr><th>名称</th><th>语法</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>基本语法</td><td><code>SELECT ... FROM ...</code></td><td></td><td></td></tr><tr><td>属性别名</td><td><code>SELECT ... AS ... FROM ...</code></td><td></td><td><code>SELECT last_name &quot;Name&quot;, salary*12 &quot;Annual Salary&quot; FROM employees;</code></td></tr><tr><td>去除重复行</td><td><code>SELECT DISTINCT ... FROM ...</code></td><td>注意，如果DISTINCT后面跟了多个属性，则是根据多个属性的匹配情况进行去重，比如有两个属性id, salary，则id和salary的值都一样，才会去重处理。</td><td><code>SELECT DISTINCT department_id FROM employees;</code></td></tr><tr><td>空值运算</td><td>-</td><td>所有运算符或列值遇到null值，运算结果都为null（如1+null &#x3D; null）</td><td></td></tr><tr><td>常数查询</td><td>-</td><td>select可以使用常数查询，来对数据进行分割等行为</td><td><code>SELECT &#39;***&#39; AS corporation, last_name FROM employees;</code></td></tr></tbody></table><p><strong>WHERE后的语法</strong></p><table><thead><tr><th>类别</th><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>关系</td><td><code>&gt;, &lt;, &gt;=, &lt;=, !=, =</code></td><td></td></tr><tr><td>逻辑</td><td><code>OR, AND</code></td><td></td></tr><tr><td>区间</td><td><code>id BETWEEN 4 and 6</code></td><td>区间为闭区间，包含左右边界</td></tr></tbody></table><p><strong>排序</strong></p><table><thead><tr><th>语法</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>&#96;SELECT 字段 FROM 表 ORDER BY 字段 排序关键词(DESC</td><td>ASC)&#96;</td><td>DESC：降序；<br />ASC：升序；</td></tr><tr><td>&#96;SELECT 字段 FROM 表 ORDER BY 字段1 DESC</td><td>ASC, … 字段N DESC</td><td>ASC&#96;</td></tr></tbody></table><p><strong>聚合</strong></p><table><thead><tr><th>语法</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td><code>sum()</code></td><td>求和</td><td></td></tr><tr><td><code>avg()</code></td><td>求平均数</td><td></td></tr><tr><td><code>count()</code></td><td>统计数量</td><td><code>select count(sex) from star group by sex</code></td></tr><tr><td><code>max()</code></td><td>求最大值</td><td></td></tr><tr><td><code>min()</code></td><td>求最小值</td><td></td></tr><tr><td><code>group by 字段</code></td><td>按字段分组</td><td><code>select count(sex) as re,sex from star group by sex having re &gt; 3</code></td></tr><tr><td><code>select * from 表名  limit 偏移量,数量</code></td><td>偏移量，如果不写偏移量的话默认是0；<br />实现分页查询的时候必须写偏移量；</td><td></td></tr></tbody></table><p><strong>多表联合查询</strong></p><table><thead><tr><th>类型</th><th>说明</th><th>描述</th><th>语法</th></tr></thead><tbody><tr><td>内连接</td><td>隐式内连接</td><td></td><td><code>select username,name from user,goods where user.gid=gods.gid</code></td></tr><tr><td>内连接</td><td>显式内连接</td><td></td><td><code>select username,from user inner join goods on user.gid=goods.gid</code><br /><code>select * from user left join goods on user.gid=goods.gid</code></td></tr><tr><td>外连接</td><td>左连接</td><td>包含所有的左边表中的记录以及右边表中没有和他匹配的记录</td><td></td></tr><tr><td>外连接</td><td>右连接</td><td></td><td><code>select * from user right jOin goods on user.gid=goods.gid</code></td></tr><tr><td>子嵌套查询</td><td></td><td></td><td><code>select * from user where gid in(select gid from goods)</code></td></tr><tr><td>数据联合查询</td><td></td><td>将两次查询的结果联合到一起</td><td><code>select * from user left join goods on user.gid=goods.gid union select * from user right join goods on user.gid=goods.gid</code></td></tr><tr><td>两个表同时更新</td><td></td><td></td><td><code>update user u, goods g set u.gid=12,g.price=1 where u.id=2 and u.gid=g.gid</code></td></tr></tbody></table><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><table><thead><tr><th>运算符</th><th>名称</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>计算两个值或表达式的和</td><td>SELECT A+B</td></tr><tr><td>-</td><td>减法</td><td>计算两个值或表达式的差</td><td>SELECT A-B</td></tr><tr><td>*</td><td>乘法</td><td>计算两个值或表达式的乘积</td><td>SELECT A*B</td></tr><tr><td>&#x2F;或DIV</td><td>除法</td><td>计算两个值或者表达式的商</td><td>SELECT A&#x2F;B or SELECT A DIV B</td></tr><tr><td>%或MOD</td><td>求模（求余）</td><td>计算两个值的余数</td><td>SELECT A%B or SELECT A MOD B</td></tr></tbody></table><h4 id="加减"><a href="#加减" class="headerlink" title="加减"></a>加减</h4><ul><li>整数与浮点数进行加法和减法，结果是一个浮点数；</li><li>在MySQL中+只表示数值相加，如果遇到非数值类型，先尝试转成数值，如果转失败，则按0计算；</li><li>MySQL字符串拼接使用字符串函数CONCAT()实现。</li></ul><h4 id="乘除"><a href="#乘除" class="headerlink" title="乘除"></a>乘除</h4><ul><li>一个整数乘除一个浮点数1都变成浮点数，数值与原数相等；</li><li>一个数除以整数后，无论是否除尽，结果都为一个浮点数；</li><li>一个数除以另一个数，除不尽时，结果为一个浮点数，且保留到小数点后四位；</li><li>MySQL中一个数除以0为NULL；</li></ul><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><table><thead><tr><th>运算符</th><th>名称</th></tr></thead><tbody><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&#x3D;&gt;</td><td>安全等于</td></tr><tr><td>&lt;&gt;(!&#x3D;)</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr></tbody></table><ul><li>字符串和字符串比较，比较的是内容；</li><li>整数和整数比较，比较的是值；</li><li>整数和字符串比较，将会将字符串转换为数字进行比较；</li><li>等号两边如果有一个NULL，则比较结果为NULL；</li></ul><h4 id="非符号运算符"><a href="#非符号运算符" class="headerlink" title="非符号运算符"></a>非符号运算符</h4><table><thead><tr><th>运算符</th><th>名称</th><th>描述</th><th>举例</th></tr></thead><tbody><tr><td>IS NOT NULL</td><td>不为空运算符</td><td>判断值、字符串或表达式是否不为空</td><td>SELECT B FROM TABLE WHERE A IS NOT NULL</td></tr><tr><td>LEAST</td><td>最小值运算符</td><td>在多个值中返回最小值</td><td>SELECT D FROM TABLE WHERE C LEAST(A, B)</td></tr><tr><td>GREATEST</td><td>最大值运算符</td><td>在多个值中返回最大值</td><td>SELECT D FROM TABLE WHERE C GREATEST(A, B)</td></tr><tr><td>BETWEEN * AND *</td><td>两个值之间的运算符</td><td>判断一个值是否在两个值之间</td><td>SELECT D FROM TABLE WHERE C BETWEEN A AND B</td></tr><tr><td>IS NULL</td><td>为空运算符</td><td>判断一个值、字符串或表达式是否为空</td><td>SELECT B FROM TABLE WHERE A IS NULL</td></tr><tr><td>IN</td><td>属于运算符</td><td>判断一个值是否在列表中</td><td>SELECT D FROM TABLE WHERE C IN (A, B)</td></tr><tr><td>NOT IN</td><td>不属于运算符</td><td>判断一个值是否不在列表中</td><td>SELECT D FROM TABLE WHERE C NOT IN (A, B)</td></tr><tr><td>LIKE</td><td>模糊匹配运算符</td><td>判断一个值是否符合模糊匹配规则</td><td>SELECT C FROM TABLE WHERE A LIKE B</td></tr><tr><td>REGEXP</td><td>正则表达式运算符</td><td>判断一个值是否符合正则表达式规则</td><td>SELECT C FROM TABLE WHERE A REGEXP B</td></tr><tr><td>RLIKE</td><td>正则表达式运算符</td><td>判断一个值是否符合正则表达式规则</td><td>SELECT C FROM TABLE WHERE A RLIKE B</td></tr></tbody></table><blockquote><p>LIKE模糊匹配运算符：</p><ul><li><code>%</code>：匹配0个或多个字符；</li><li><code>_</code>：只能匹配一个字符；</li></ul></blockquote><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><p>数值越高，优先级越高。</p><table><thead><tr><th>优先级</th><th>运算符</th></tr></thead><tbody><tr><td>1</td><td>&#x3D;（赋值）</td></tr><tr><td>2</td><td>||、OR、XOR</td></tr><tr><td>3</td><td>&amp;&amp;，AND</td></tr><tr><td>4</td><td>NOT</td></tr><tr><td>5</td><td>BETWEEN、CASE、WHEN、THEN和ELSE</td></tr><tr><td>6</td><td>&#x3D;、&lt;&#x3D;&gt;、&gt;&#x3D;、&gt;、&lt;&#x3D;、&lt;、&lt;&gt;、!&#x3D;、 IS、LIKE、REGEXP和IN</td></tr><tr><td>7</td><td>|</td></tr><tr><td>8</td><td>&amp;</td></tr><tr><td>9</td><td>&lt;&lt;和&gt;&gt;</td></tr><tr><td>10</td><td>-和+</td></tr><tr><td>11</td><td>*、&#x2F;、DIV、%和MOD</td></tr><tr><td>12</td><td>^</td></tr><tr><td>13</td><td>-(负号)和~(按位取反)</td></tr><tr><td>14</td><td>!</td></tr><tr><td>15</td><td>()</td></tr></tbody></table><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Limit [位置偏移量, ] 行数</span><br></pre></td></tr></table></figure><p>Eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#前<span class="number">10</span>条记录:</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name LIMIT <span class="number">0</span>, <span class="number">10</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name LIMIT <span class="number">10</span>;</span><br><span class="line">#第<span class="number">11</span>至<span class="number">20</span>条记录:</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name LIMIT <span class="number">10</span>,<span class="number">10</span>;</span><br><span class="line">#第<span class="number">21</span>至<span class="number">30</span>条记录:</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name LIMIT <span class="number">20</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>分页显式公式：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name LIMIT(PageNo <span class="operator">-</span> <span class="number">1</span>)<span class="operator">*</span>PageSize, PageSize;</span><br></pre></td></tr></table></figure><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><p>将同一个表分别取两个别名赋予不同的含义（类比快捷方式），然后再将两个表进行内连接、外连接等查询；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(worker.last_name ,<span class="string">&#x27; works for &#x27;</span></span><br><span class="line">, manager.last_name)</span><br><span class="line"><span class="keyword">FROM</span> employees worker, employees manager</span><br><span class="line"><span class="keyword">WHERE</span> worker.manager_id <span class="operator">=</span> manager.employee_id </span><br></pre></td></tr></table></figure><h4 id="内连接与外连接"><a href="#内连接与外连接" class="headerlink" title="内连接与外连接"></a>内连接与外连接</h4><ul><li>内连接：合并具有同一列的两个以上的表行，结果集中不包含一个表和另一个表不匹配的行；</li><li>外连接：除了返回满足连接条件的行以外还返回左（或右）表中不满足条件的行，称为左连接或右连接，没有匹配的行时，表中相应的列为NULL；</li><li>如果左外连接，左表为主表，右表为从表；</li><li>如果右外连接，右表为主表，左表为从表；</li></ul><h4 id="JOIN…ON"><a href="#JOIN…ON" class="headerlink" title="JOIN…ON"></a>JOIN…ON</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table1.column, table2.column,table3.column</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1 和 table2 的连接条件</span><br><span class="line"><span class="keyword">JOIN</span> table3 <span class="keyword">ON</span> table2 和 table3 的连接条件</span><br></pre></td></tr></table></figure><h5 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h5><p>通常写的JOIN就是INNER JOIN，将INNER省略掉了而已，即INNER JOIN ≈ JOIN；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br></pre></td></tr></table></figure><h5 id="OUTER-JOIN"><a href="#OUTER-JOIN" class="headerlink" title="OUTER JOIN"></a>OUTER JOIN</h5><h6 id="LEFT-OUTER-JOIN"><a href="#LEFT-OUTER-JOIN" class="headerlink" title="LEFT OUTER JOIN"></a>LEFT OUTER JOIN</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br></pre></td></tr></table></figure><p>Eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.department_id, d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> (e.department_id <span class="operator">=</span> d.department_id) ;</span><br></pre></td></tr></table></figure><h6 id="RIGHT-OUTER-JOIN"><a href="#RIGHT-OUTER-JOIN" class="headerlink" title="RIGHT OUTER JOIN"></a>RIGHT OUTER JOIN</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br></pre></td></tr></table></figure><p>Eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.department_id, d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> (e.department_id <span class="operator">=</span> d.department_id) ;</span><br></pre></td></tr></table></figure><h4 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h4><ul><li>合并查询结果，利用UNION 关键词可以给出多条SELECT语句，并将它们的结果组合成单个结果集；</li><li>合并时两个查询结果的列数和数据类型必须相同，并以“串联”形式进行组合。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>,... <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">ALL</span>]</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>,... <span class="keyword">FROM</span> table2</span><br></pre></td></tr></table></figure><p>Eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#方式一：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span> <span class="keyword">OR</span> department_id<span class="operator">&gt;</span><span class="number">90</span>;</span><br><span class="line">#方式二：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id<span class="operator">&gt;</span><span class="number">90</span>;</span><br></pre></td></tr></table></figure><h5 id="UNION和UNION-ALL"><a href="#UNION和UNION-ALL" class="headerlink" title="UNION和UNION ALL"></a>UNION和UNION ALL</h5><ul><li><code>UNION</code>操作符会将两个查询的结果集并集时去除重复记录；</li><li><code>UNION ALL</code>操作符返回两个查询的结果集的并集但并不去除重复部分。</li></ul><h4 id="NATURAL-JOIN"><a href="#NATURAL-JOIN" class="headerlink" title="NATURAL JOIN"></a>NATURAL JOIN</h4><p>它会帮你自动查询两张连接表中所有相同的字段 ，然后进行等值连接 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#原语句</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`</span><br><span class="line"><span class="keyword">AND</span> e.`manager_id` <span class="operator">=</span> d.`manager_id`</span><br><span class="line">#利用NUTURAL <span class="keyword">JOIN</span>改写为</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> departments d;</span><br></pre></td></tr></table></figure><h4 id="USING"><a href="#USING" class="headerlink" title="USING"></a>USING</h4><p>当我们进行连接的时候，SQL99还支持使用 USING 指定数据表里的 同名字段 进行等值连接。但是只能配合JOIN一起使用。比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">USING</span> (department_id);</span><br></pre></td></tr></table></figure><p>你能看出与自然连接 NATURAL JOIN 不同的是，USING 指定了具体的相同的字段名称，你需要在 USING的括号 () 中填入要指定的同名字段。同时使用 JOIN…USING 可以简化 JOIN ON 的等值连接。它与下面的 SQL 查询结果是相同的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e ,departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id</span><br></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><ul><li><p>子查询（内查询）在主查询之前一次执行完成；</p></li><li><p>子查询的结果被主查询（外查询）使用 ；</p></li><li><p>子查询要包含在括号内；</p></li><li><p>将子查询放在比较条件的右侧；</p></li><li><p>单行操作符对应单行子查询，多行操作符对应多行子查询；</p></li></ul><h4 id="单行子查询比较操作符"><a href="#单行子查询比较操作符" class="headerlink" title="单行子查询比较操作符"></a>单行子查询比较操作符</h4><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>&#x3D;</td><td>equal to</td></tr><tr><td>&gt;</td><td>greater than</td></tr><tr><td>&gt;&#x3D;</td><td>greater than or equal to</td></tr><tr><td>&lt;</td><td>less than</td></tr><tr><td>&lt;&#x3D;</td><td>less than or equal to</td></tr><tr><td>&lt;&gt;</td><td>not equal to</td></tr></tbody></table><h4 id="多行子查询比较操作符"><a href="#多行子查询比较操作符" class="headerlink" title="多行子查询比较操作符"></a>多行子查询比较操作符</h4><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>IN</td><td>等于列表中的任意一个</td></tr><tr><td>ANY</td><td>需要和单行比较操作符一起使用，和子查询返回的某一个值比较</td></tr><tr><td>ALL</td><td>需要和单行比较操作符一起使用，和子查询返回的所有值比较</td></tr><tr><td>SOME</td><td>实际上是ANY的别名，作用相同，一般常使用ANY</td></tr></tbody></table><h3 id="计算列"><a href="#计算列" class="headerlink" title="计算列"></a>计算列</h3><ul><li>mysql8.0新特性</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb1(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">a <span class="type">INT</span>,</span><br><span class="line">b <span class="type">INT</span>,</span><br><span class="line">c <span class="type">INT</span> GENERATED ALWAYS <span class="keyword">AS</span> (a <span class="operator">+</span> b) VIRTUAL</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h2><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>insert into 表名 values(值1，值2，…)</td><td>很少用</td></tr><tr><td>insert into 表名(字段1，字段2…) values(值1，值2，….)</td><td>常用</td></tr><tr><td>insert into 表名(字段1，字段2…) values(值1，值2，….)，(值1，值2，….)，(值1，值2，….)</td><td></td></tr></tbody></table><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>delete from 表名 where 条件</td><td>where 条件必须加，否则数据会被全部删除</td></tr></tbody></table><h2 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h2><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>update 表名 set 字段1 &#x3D; 值1, 字段2 &#x3D; 值2 where 条件</td><td></td></tr></tbody></table><h1 id="DCL权限控制"><a href="#DCL权限控制" class="headerlink" title="DCL权限控制"></a>DCL权限控制</h1><table><thead><tr><th>描述</th><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>创建用户</td><td><code>CREATE USER &#39;用户名&#39;@&#39;客户端地址&#39; IDENTIFIED BY &#39;密码&#39;</code></td><td></td></tr><tr><td>授权用户</td><td><code>GRANT 权限 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;</code></td><td>上述命令中，权限可以是SELECT、INSERT、UPDATE、DELETE等操作，也可以是ALL表示所有操作。数据库名和表名可以使用通配符*表示所有，用户名和主机名也可以使用通配符%表示所有。IDENTIFIED BY后面紧跟的是密码。</td></tr><tr><td>刷新权限</td><td><code>flush privileges</code></td><td></td></tr><tr><td>取消授权</td><td><code>revoke all on test.* from &#39;xiaoming&#39;@&#39;localhost&#39;</code></td><td>上述命令中，权限可以是SELECT、INSERT、UPDATE、DELETE等操作，也可以是ALL表示所有操作。数据库名和表名可以使用通配符*表示所有，用户名和主机名也可以使用通配符%表示所有。IDENTIFIED BY后面紧跟的是密码。</td></tr><tr><td>删除用户</td><td><code>drop user&#39;xiaoming&#39;@&#39;localhost&#39;</code></td><td></td></tr><tr><td>查看用户权限</td><td><code>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;</code></td><td></td></tr></tbody></table><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><h3 id="基本聚合函数"><a href="#基本聚合函数" class="headerlink" title="基本聚合函数"></a>基本聚合函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>AVG()</td><td>平均</td></tr><tr><td>SUM()</td><td>总数</td></tr><tr><td>MIN()</td><td>最小</td></tr><tr><td>MAX()</td><td>最大</td></tr><tr><td>COUNT(*)</td><td>表的行数</td></tr><tr><td>COUNT(expr)</td><td>返回expr不为空的记录总数</td></tr></tbody></table><blockquote><p>MyISAM和InnoDB的在对行数统计上的区别：</p><ul><li>MyISAM有个整型计数器在记录行数，通过 <code>count(*)、count(1)、count(列名)</code>都是从该整型值位置获取值；</li><li>InnoDB不存在行数计数器，因此每次执行<code>count(*)、count(1)、count(列名)</code>都会完整计数一遍行数。</li></ul><p><code>count(列名)</code>和 <code>count(*)</code>可以互换吗：</p><p>count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。</p></blockquote><h3 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, group_function(<span class="keyword">column</span>)</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line">[<span class="keyword">WHERE</span> <span class="keyword">condition</span>]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> group_by_expression]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">column</span>];</span><br></pre></td></tr></table></figure><p>Eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#单列分组</span><br><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">AVG</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line">#多列分组</span><br><span class="line"><span class="keyword">SELECT</span> department_id dept_id, job_id, <span class="built_in">SUM</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id, job_id;</span><br></pre></td></tr></table></figure><p><strong>WITH ROLLUP</strong></p><p>该关键字可以让所有查询出的分组记录之后增加一个记录，该记录可计算查询出的所有记录总和。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id,<span class="built_in">AVG</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">&gt;</span> <span class="number">80</span>  #不能在<span class="keyword">WHERE</span>子句中使用集合函数。</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>;</span><br></pre></td></tr></table></figure><p>ROLLUP和ORDER BY不可以同时使用，相互排斥。</p><h3 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h3><blockquote><p>将使用GROUP BY聚合的结果再进行过滤筛选。</p></blockquote><ol><li>行已经被分组;</li><li>使用了聚合函数;</li><li>满足HAVING 子句中条件的分组将被显示;</li><li><strong>HAVING 不能单独使用，必须要跟 GROUP BY 一起使用；</strong></li><li><strong>不能在WHERE子句中使用聚合函数(GROUP BY)。</strong></li></ol><blockquote><p>WHERE和HAVING的对比：</p><p>WHERE 可以直接使用表中的字段作为筛选条件，但不能使用分组中的计算函数作为筛选条件；HAVING 必须要与 GROUP BY 配合使用，可以把分组计算的函数和分组字段作为筛选条件；</p><p>在查询语法结构中，WHERE 在 GROUP BY 之前，所以无法对分组结果进行筛选。HAVING 在 GROUP BY 之<br>后，可以使用分组字段和分组中的计算函数，对分组的结果集进行筛选；</p><p>如果需要通过连接从关联表中获取需要的数据，WHERE 是先筛选后连接，而 HAVING 是先连接后筛选；这一点，就决定了在关联查询中，WHERE 比 HAVING 更高效。因为 WHERE 可以先筛选，用一个筛选后的较小数据集和关联表进行连接，这样占用的资源比较少，执行效率也比较高。HAVING 则需要先把结果集准备好，也就是用未被筛选的数据集进行关联，然后对这个大的数据集进行筛选，这样占用的资源就比较多，执行效率也较低。</p><p>总结：</p><table><thead><tr><th>语法</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>WHERE</td><td>先筛选数据再关联，执行效率高</td><td>不能使用分组中的计算函数进行筛选</td></tr><tr><td>HAVING</td><td>可以使用分组中的计算函数</td><td>在最后的结果集中进行筛选，执行效率低</td></tr></tbody></table></blockquote><h2 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h2><h3 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h3><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>ABS(x)</td><td>返回x的绝对值</td></tr><tr><td>SIGN(X)</td><td>返回X的符号。正数返回1，负数返回-1，0返回0</td></tr><tr><td>PI()</td><td>返回圆周率的值</td></tr><tr><td>CEIL(x)，CEILING(x)</td><td>返回大于或等于某个值的最小整数</td></tr><tr><td>FLOOR(x)</td><td>返回小于或等于某个值的最大整数</td></tr><tr><td>LEAST(e1,e2,e3…)</td><td>返回列表中的最小值</td></tr><tr><td>GREATEST(e1,e2,e3…)</td><td>返回列表中的最大值</td></tr><tr><td>MOD(x,y)</td><td>返回X除以Y后的余数</td></tr><tr><td>RAND()</td><td>返回0~1的随机值</td></tr><tr><td>RAND(x)</td><td>返回0~1的随机值，其中x的值用作种子值，相同的X值会产生相同的随机数</td></tr><tr><td>ROUND(x)</td><td>返回一个对x的值进行四舍五入后，最接近于X的整数</td></tr><tr><td>ROUND(x,y)</td><td>返回一个对x的值进行四舍五入后最接近X的值，并保留到小数点后面Y位</td></tr><tr><td>TRUNCATE(x,y)</td><td>返回数字x截断为y位小数的结果</td></tr><tr><td>SQRT(x)</td><td>返回x的平方根。当X的值为负数时，返回NULL</td></tr></tbody></table><h3 id="角度函数"><a href="#角度函数" class="headerlink" title="角度函数"></a>角度函数</h3><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>RADIANS(x)</td><td>将角度转化为弧度，其中，参数x为角度值</td></tr><tr><td>DEGREES(x)</td><td>将弧度转化为角度，其中，参数x为弧度值</td></tr></tbody></table><h3 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h3><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>SIN(x)</td><td>返回x的正弦值，其中，参数x为弧度值</td></tr><tr><td>ASIN(x)</td><td>返回x的反正弦值，即获取正弦为x的值。如果x的值不在-1到1之间，则返回NULL</td></tr><tr><td>COS(x)</td><td>返回x的余弦值，其中，参数x为弧度值</td></tr><tr><td>ACOS(x)</td><td>返回x的反余弦值，即获取余弦为x的值。如果x的值不在-1到1之间，则返回NULL</td></tr><tr><td>TAN(x)</td><td>返回x的正切值，其中，参数x为弧度值</td></tr><tr><td>ATAN(x)</td><td>返回x的反正切值，即返回正切值为x的值</td></tr><tr><td>ATAN2(m,n)</td><td>返回两个参数的反正切值</td></tr><tr><td>COT(x)</td><td>返回x的余切值，其中，X为弧度值</td></tr></tbody></table><h3 id="次方与对数函数"><a href="#次方与对数函数" class="headerlink" title="次方与对数函数"></a>次方与对数函数</h3><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>POW(x,y)，POWER(X,Y)</td><td>返回x的y次方</td></tr><tr><td>EXP(X)</td><td>返回e的X次方，其中e是一个常数，2.718281828459045</td></tr><tr><td>LN(X)，LOG(X)</td><td>返回以e为底的X的对数，当X</td></tr><tr><td>LOG10(X)</td><td>返回以10为底的X的对数，当X</td></tr><tr><td>LOG2(X)</td><td>返回以2为底的X的对数，当X</td></tr></tbody></table><h3 id="进制转换函数"><a href="#进制转换函数" class="headerlink" title="进制转换函数"></a>进制转换函数</h3><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>BIN(x)</td><td>返回x的二进制编码</td></tr><tr><td>HEX(x)</td><td>返回x的十六进制编码</td></tr><tr><td>OCT(x)</td><td>返回x的八进制编码</td></tr><tr><td>CONV(x,f1,f2)</td><td>返回f1进制数变成f2进制数</td></tr></tbody></table><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><blockquote><p>MySQL中，字符串的位置从1开始。</p></blockquote><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>ASCII(S)</td><td>返回字符串S中的第一个字符的ASCII码值</td></tr><tr><td>CHAR_LENGTH(s)</td><td>返回字符串s的字符数。作用与CHARACTER_LENGTH(s)相同</td></tr><tr><td>LENGTH(s)</td><td>返回字符串s的字节数，和字符集有关</td></tr><tr><td>CONCAT(s1,s2,……,sn)</td><td>连接s1,s2,……,sn为一个字符串</td></tr><tr><td>CONCAT_WS(x,s1,s2,……,sn)</td><td>同CONCAT(s1,s2,…)函数，但是每个字符串之间要加上x</td></tr><tr><td>INSERT(str,idx,len,replacestr)</td><td>将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr</td></tr><tr><td>REPLACE(str,a,b)</td><td>用字符串b替换字符串str中所有出现的字符串a</td></tr><tr><td>UPPER(s)或UCASE(s)</td><td>将字符串s的所有字母转成大写字母</td></tr><tr><td>LOWER(s)或LCASE(s)</td><td>将字符串s的所有字母转成小写字母</td></tr><tr><td>LEFT(str,n)</td><td>返回字符串str最左边的n个字符</td></tr><tr><td>RIGHT(str,n)</td><td>返回字符串str最右边的n个字符</td></tr><tr><td>LPAD(str,len,pad)</td><td>用字符串pad对str最左边进行填充，直到str的长度为len个字符</td></tr><tr><td>RPAD(str,len,pad)</td><td>用字符串pad对str最右边进行填充，直到str的长度为len个字符</td></tr><tr><td>LTRIM(s)</td><td>去掉字符串s左侧的空格</td></tr><tr><td>RTRIM(s)</td><td>去掉字符串s右侧的空格</td></tr><tr><td>TRIM(s)</td><td>去掉字符串s开始与结尾的空格</td></tr><tr><td>TRIM(s1 FROM s)</td><td>去掉字符串s开始与结尾的s1</td></tr><tr><td>TRIM(LEADING s1 FROM s)</td><td>去掉字符串s开始处的s1</td></tr><tr><td>TRIM(TRAILING s1 FROM s)</td><td>去掉字符串s结尾处的s1</td></tr><tr><td>REPEAT(str, n)</td><td>返回str重复n次的结果</td></tr><tr><td>SPACE(n)</td><td>返回n个空格</td></tr><tr><td>STRCMP(s1,s2)</td><td>比较字符串s1,s2的ASCII码值的大小</td></tr><tr><td>SUBSTR(s,index,len)</td><td>返回从字符串s的index位置其len个字符，作用与SUBSTRING(s,n,len)、MID(s,n,len)相同</td></tr><tr><td>LOCATE(substr,str)</td><td>返回字符串substr在字符串str中首次出现的位置，作用于POSITION(substr</td></tr><tr><td>ELT(m,s1,s2,…,sn)</td><td>返回指定位置的字符串，如果m&#x3D;1，则返回s1，如果m&#x3D;2，则返回s2，如果m&#x3D;n，则返回sn</td></tr><tr><td>FIELD(s,s1,s2,…,sn)</td><td>返回字符串s在字符串列表中第一次出现的位置</td></tr><tr><td>FIND_IN_SET(s1,s2)</td><td>返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串</td></tr><tr><td>REVERSE(s)</td><td>返回s反转后的字符串</td></tr><tr><td>NULLIF(value1,value2)</td><td>比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1</td></tr></tbody></table><h3 id="日期时间函数"><a href="#日期时间函数" class="headerlink" title="日期时间函数"></a>日期时间函数</h3><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>CURDATE()，CURRENT_DATE()</td><td>返回当前日期，只包含年、月、日</td></tr><tr><td>CURTIME()，CURRENT_TIME()</td><td>返回当前时间，只包含时、分、秒</td></tr><tr><td>NOW()&#x2F;SYSDATE()&#x2F;CURRENT_TIMESTAMP()&#x2F;LOCALTIME()&#x2F;LOCALTIMESTAMP()</td><td>返回当前系统日期和时间</td></tr><tr><td>UTC_DATE()</td><td>返回UTC（世界标准时间）日期UTC_TIME()返回UTC（世界标准时间）时间</td></tr><tr><td>UNIX_TIMESTAMP()</td><td>以UNIX时间戳的形式返回当前时间。SELECT UNIX_TIMESTAMP()-&gt;1634348884</td></tr><tr><td>UNIX_TIMESTAMP(date)</td><td>将时间date以UNIX时间戳的形式返回</td></tr><tr><td>FROM_UNIXTIME(timestamp)</td><td>将UNIX时间戳的时间转换为普通格式的时间</td></tr><tr><td>YEAR(date)&#x2F;MONTH(date)&#x2F;DAY(date)</td><td>返回具体的日期值</td></tr><tr><td>HOUR(time)&#x2F;MINUTE(time)&#x2F;SECOND(time)</td><td>返回具体的时间值</td></tr><tr><td>MONTHNAME(date)</td><td>返回月份：January，…</td></tr><tr><td>DAYNAME(date)</td><td>返回星期几：MONDAY，TUESDAY…..SUNDAY</td></tr><tr><td>WEEKDAY(date)</td><td>返回周几，注意，周1是0，周2是1，。。。周日是6</td></tr><tr><td>QUARTER(date)</td><td>返回日期对应的季度，范围为1～4</td></tr><tr><td>WEEK(date)，WEEKOFYEAR(date)</td><td>返回一年中的第几周</td></tr><tr><td>DAYOFYEAR(date)</td><td>返回日期是一年中的第几天</td></tr><tr><td>DAYOFMONTH(date)</td><td>返回日期位于所在月份的第几天</td></tr><tr><td>DAYOFWEEK(date)</td><td>返回周几，注意：周日是1，周一是2，。。。周六是7</td></tr><tr><td>TIME_TO_SEC(time)</td><td>将time转化为秒并返回结果值。转化的公式为：小时<em>3600+分钟</em>60+秒</td></tr><tr><td>SEC_TO_TIME(seconds)</td><td>将seconds描述转化为包含小时、分钟和秒的时间</td></tr><tr><td>DATE_ADD(datetime,INTERVAL_exprtype)，ADDDATE(date,INTERVALexprtype)</td><td>返回与给定日期时间相差INTERVAL时间段的日期时间</td></tr><tr><td>DATE_SUB(date,INTERVALexprtype)，SUBDATE(date,INTERVALexprtype)</td><td>返回与date相差INTERVAL时间间隔的日期</td></tr><tr><td>ADDTIME(time1,time2)</td><td>返回time1加上time2的时间。当time2为一个数字时，代表的是秒，可以为负数</td></tr><tr><td>SUBTIME(time1,time2)</td><td>返回time1减去time2后的时间。当time2为一个数字时，代表的是秒，可以为负数</td></tr><tr><td>DATEDIFF(date1,date2)</td><td>返回date1-date2的日期间隔天数</td></tr><tr><td>TIMEDIFF(time1,time2)</td><td>返回time1-time2的时间间隔</td></tr><tr><td>FROM_DAYS(N)</td><td>返回从0000年1月1日起，N天以后的日期</td></tr><tr><td>TO_DAYS(date)</td><td>返回日期date距离0000年1月1日的天数</td></tr><tr><td>LAST_DAY(date)</td><td>返回date所在月份的最后一天的日期</td></tr><tr><td>MAKEDATE(year,n)</td><td>针对给定年份与所在年份中的天数返回一个日期</td></tr><tr><td>MAKETIME(hour,minute,second)</td><td>将给定的小时、分钟和秒组合成时间并返回</td></tr><tr><td>PERIOD_ADD(time,n)</td><td>返回time加上n后的时间</td></tr><tr><td>DATE_FORMAT(date,fmt)</td><td>按照字符串fmt格式化日期date值</td></tr><tr><td>TIME_FORMAT(time,fmt)</td><td>按照字符串fmt格式化时间time值</td></tr><tr><td>GET_FORMAT(date_type,format_type)</td><td>返回日期字符串的显示格式</td></tr><tr><td>STR_TO_DATE(str,fmt)</td><td>按照字符串fmt对str进行解析，解析为一个日期</td></tr></tbody></table><h2 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h2><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>IF(value,value1,value2)</td><td>如果value的值为TRUE，返回value1，否则返回value2</td></tr><tr><td>IFNULL(value1,value2)</td><td>如果value1不为NULL，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 ….[ELSE 值n] END</td><td>相当于Java的if…elseif…else…</td></tr><tr><td>CASE expr WHEN 常量值1 THEN值1 WHEN 常量值1 THEN值1 …. [ELSE 值n] END</td><td>相当于Java的switch…case…</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,salary, <span class="keyword">CASE</span> <span class="keyword">WHEN</span> salary<span class="operator">&gt;=</span><span class="number">15000</span> <span class="keyword">THEN</span> <span class="string">&#x27;高薪&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> salary<span class="operator">&gt;=</span><span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;潜力股&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> salary<span class="operator">&gt;=</span><span class="number">8000</span> <span class="keyword">THEN</span> <span class="string">&#x27;屌丝&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;草根&#x27;</span> <span class="keyword">END</span> &quot;描述&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,<span class="number">12</span> <span class="operator">*</span> salary <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> IFNULL(commission_pct,<span class="number">0</span>))</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, job_id, salary,</span><br><span class="line"><span class="keyword">CASE</span> job_id <span class="keyword">WHEN</span> <span class="string">&#x27;IT_PROG&#x27;</span> <span class="keyword">THEN</span> <span class="number">1.10</span><span class="operator">*</span>salary</span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">&#x27;ST_CLERK&#x27;</span> <span class="keyword">THEN</span> <span class="number">1.15</span><span class="operator">*</span>salary</span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">&#x27;SA_REP&#x27;</span> <span class="keyword">THEN</span> <span class="number">1.20</span><span class="operator">*</span>salary</span><br><span class="line"><span class="keyword">ELSE</span> salary <span class="keyword">END</span> &quot;REVISED_SALARY&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br></pre></td></tr></table></figure><h2 id="加密解密函数"><a href="#加密解密函数" class="headerlink" title="加密解密函数"></a>加密解密函数</h2><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>PASSWORD(str)</td><td>返回字符串str的加密版本，41位长的字符串。加密结果不可逆，常用于用户的密码加密</td></tr><tr><td>MD5(str)</td><td>返回字符串str的md5加密后的值，也是一种加密方式。若参数为NULL，则会返回NULL</td></tr><tr><td>SHA(str)</td><td>从原明文密码str计算并返回加密后的密码字符串，当参数为NULL时，返回NULL。SHA加密算法比MD5更加安全。</td></tr><tr><td>ENCODE(value,password_seed)</td><td>返回使用password_seed作为加密密码加密value</td></tr><tr><td>DECODE(value,password_seed)</td><td>返回使用password_seed作为加密密码解密value</td></tr></tbody></table><h2 id="MySQL信息函数"><a href="#MySQL信息函数" class="headerlink" title="MySQL信息函数"></a>MySQL信息函数</h2><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>VERSION()</td><td>返回当前MySQL的版本号</td></tr><tr><td>CONNECTION_ID()</td><td>返回当前MySQL服务器的连接数</td></tr><tr><td>DATABASE()，SCHEMA()</td><td>返回MySQL命令行当前所在的数据库</td></tr><tr><td>USER()，CURRENT_USER()、SYSTEM_USER()，SESSION_USER()</td><td>返回当前连接MySQL的用户名，返回结果格式为“主机名@用户名”</td></tr><tr><td>CHARSET(value)</td><td>返回字符串value自变量的字符集</td></tr><tr><td>COLLATION(value)</td><td>返回字符串value的比较规则</td></tr></tbody></table><h2 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h2><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>FORMAT(value,n)</td><td>返回对数字value进行格式化后的结果数据。n表示四舍五入后保留到小数点后n位</td></tr><tr><td>CONV(value,from,to)</td><td>将value的值进行不同进制之间的转换</td></tr><tr><td>INET_ATON(ipvalue)</td><td>将以点分隔的IP地址转化为一个数字</td></tr><tr><td>INET_NTOA(value)</td><td>将数字形式的IP地址转化为以点分隔的IP地址</td></tr><tr><td>BENCHMARK(n,expr)</td><td>将表达式expr重复执行n次。用于测试MySQL处理expr表达式所耗费的时间</td></tr><tr><td>CONVERT(value USING char_code)</td><td>将value所使用的字符编码修改为char_code</td></tr></tbody></table><h2 id="SELECT执行过程"><a href="#SELECT执行过程" class="headerlink" title="SELECT执行过程"></a>SELECT执行过程</h2><h3 id="查询结构"><a href="#查询结构" class="headerlink" title="查询结构"></a>查询结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#方式<span class="number">1</span>：</span><br><span class="line"><span class="keyword">SELECT</span> ...,....,...</span><br><span class="line"><span class="keyword">FROM</span> ...,...,....</span><br><span class="line"><span class="keyword">WHERE</span> 多表的连接条件</span><br><span class="line"><span class="keyword">AND</span> 不包含组函数的过滤条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ...,...</span><br><span class="line"><span class="keyword">HAVING</span> 包含组函数的过滤条件</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ... <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span></span><br><span class="line">LIMIT ...,...</span><br><span class="line">#方式<span class="number">2</span>：</span><br><span class="line"><span class="keyword">SELECT</span> ...,....,...</span><br><span class="line"><span class="keyword">FROM</span> ... <span class="keyword">JOIN</span> ...</span><br><span class="line"><span class="keyword">ON</span> 多表的连接条件</span><br><span class="line"><span class="keyword">JOIN</span> ...</span><br><span class="line"><span class="keyword">ON</span> ...</span><br><span class="line"><span class="keyword">WHERE</span> 不包含组函数的过滤条件</span><br><span class="line"><span class="keyword">AND</span><span class="operator">/</span><span class="keyword">OR</span> 不包含组函数的过滤条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ...,...</span><br><span class="line"><span class="keyword">HAVING</span> 包含组函数的过滤条件</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ... <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span></span><br><span class="line">LIMIT ...,...</span><br><span class="line">#其中：</span><br><span class="line">#（<span class="number">1</span>）<span class="keyword">from</span>：从哪些表中筛选</span><br><span class="line">#（<span class="number">2</span>）<span class="keyword">on</span>：关联多表查询时，去除笛卡尔积</span><br><span class="line">#（<span class="number">3</span>）<span class="keyword">where</span>：从表中筛选的条件</span><br><span class="line">#（<span class="number">4</span>）<span class="keyword">group</span> <span class="keyword">by</span>：分组依据</span><br><span class="line">#（<span class="number">5</span>）<span class="keyword">having</span>：在统计结果中再次筛选</span><br><span class="line">#（<span class="number">6</span>）<span class="keyword">order</span> <span class="keyword">by</span>：排序</span><br><span class="line">#（<span class="number">7</span>）limit：分页</span><br></pre></td></tr></table></figure><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>关键词顺序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> ... <span class="keyword">WHERE</span> ... <span class="keyword">GROUP</span> <span class="keyword">BY</span> ... <span class="keyword">HAVING</span> ... <span class="keyword">ORDER</span> <span class="keyword">BY</span> ... LIMIT...</span><br></pre></td></tr></table></figure><p>语句实际执行顺序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; SELECT 的字段 -&gt; DISTINCT -&gt; ORDER BY -&gt; LIMIT</span><br></pre></td></tr></table></figure><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><table><thead><tr><th>约束</th><th>描述</th></tr></thead><tbody><tr><td>NOT NULL</td><td>非空约束，规定某个字段不能为空</td></tr><tr><td>UNIQUE</td><td>唯一约束，规定某个字段在整个表中是唯一的</td></tr><tr><td>PRIMARY KEY</td><td>主键(非空且唯一)约束</td></tr><tr><td>FOREIGN KEY</td><td>外键约束</td></tr><tr><td>CHECK</td><td>检查约束</td></tr><tr><td>DEFAULT</td><td>默认值约束</td></tr></tbody></table><p><strong>查看某个表已有的约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#information_schema数据库名（系统库）</span><br><span class="line">#table_constraints表名称（专门存储各个表的约束）</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.table_constraints</span><br><span class="line"><span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名称&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="非空约束-NOT-NULL"><a href="#非空约束-NOT-NULL" class="headerlink" title="非空约束 NOT NULL"></a>非空约束 NOT NULL</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NOT NULL</span><br></pre></td></tr></table></figure><ul><li>默认，所有的类型的值都可以是NULL，包括INT、FLOAT等数据类型；</li><li>非空约束只能出现在表对象的列上，只能某个列单独限定非空，不能组合非空；</li><li>一个表可以有很多列都分别限定了非空；</li><li>空字符串’’不等于NULL，0也不等于NULL；</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#创建时</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">字段名 数据类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line">#建表后</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 modify 字段名 数据类型 <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line">#删除非空约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 modify 字段名 数据类型 <span class="keyword">NULL</span>;#去掉<span class="keyword">not</span> <span class="keyword">null</span>，相当于修改某个非注解字段，该字段允许为空</span><br><span class="line">或</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 modify 字段名 数据类型;#去掉<span class="keyword">not</span> <span class="keyword">null</span>，相当于修改某个非注解字段，该字段允许为空</span><br></pre></td></tr></table></figure><h2 id="唯一约束-UNIQUE"><a href="#唯一约束-UNIQUE" class="headerlink" title="唯一约束 UNIQUE"></a>唯一约束 UNIQUE</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UNIQUE</span><br></pre></td></tr></table></figure><ul><li>同一个表可以有多个唯一约束。</li><li>唯一约束可以是某一个列的值唯一，也可以多个列组合的值唯一。</li><li>唯一性约束允许列值为空。</li><li>在创建唯一约束的时候，如果不给唯一约束命名，就默认和列名相同。</li><li>MySQL会给唯一约束的列上默认创建一个唯一索引。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 <span class="keyword">add</span> <span class="keyword">unique</span> key(字段列表);</span><br><span class="line">或</span><br><span class="line">#创建时</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名称(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型 <span class="keyword">unique</span>,</span><br><span class="line">字段名 数据类型 <span class="keyword">unique</span> key,</span><br><span class="line">字段名 数据类型</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名称(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型,</span><br><span class="line">[<span class="keyword">constraint</span> 约束名] <span class="keyword">unique</span> key(字段名)</span><br><span class="line">);</span><br><span class="line">#建表后</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 <span class="keyword">add</span> <span class="keyword">unique</span> key(字段列表);</span><br><span class="line">或</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 modify 字段名 字段类型 <span class="keyword">unique</span>;</span><br><span class="line">#删除约束</span><br></pre></td></tr></table></figure><h3 id="复合唯一约束"><a href="#复合唯一约束" class="headerlink" title="复合唯一约束"></a>复合唯一约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名称(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型,</span><br><span class="line"><span class="keyword">unique</span> key(字段列表) #字段列表中写的是多个字段名，多个字段名用逗号分隔，表示那么是复合唯一，即多</span><br><span class="line">个字段的组合是唯一的</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="删除唯一约束"><a href="#删除唯一约束" class="headerlink" title="删除唯一约束"></a>删除唯一约束</h3><ul><li>添加唯一性约束的列上也会自动创建唯一索引。</li><li>删除唯一约束只能通过删除唯一索引的方式删除。</li><li>删除时需要指定唯一索引名，唯一索引名就和唯一约束名一样。</li><li>如果创建唯一约束时未指定名称，如果是单列，就默认和列名相同；如果是组合列，那么默认和()中排在第一个的列名相同。也可以自定义唯一性约束名。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX uk_name_pwd；</span><br></pre></td></tr></table></figure><p><strong>查看约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.table_constraints <span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名&#x27;</span>; #查看都有哪些约束</span><br></pre></td></tr></table></figure><p><strong>查看索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> 表名称;</span><br></pre></td></tr></table></figure><h2 id="主键约束-PRIMARY-KEY"><a href="#主键约束-PRIMARY-KEY" class="headerlink" title="主键约束 PRIMARY KEY"></a>主键约束 PRIMARY KEY</h2><p><code>primary key</code>，用来唯一标识表中的一行记录。</p><ul><li>主键约束相当于唯一约束+非空约束的组合，主键约束列不允许重复，也不允许出现空值；</li><li>一个表中最多只能有一个主键约束，建立主键约束可以在列级别创建，也可以在表级别创建；</li><li>主键约束对应表中的一列或多列（复合主键）；</li><li>如果是多列组合的复合主键约束，那么这些列都不允许为空值，并且组合的值不允许重复；</li><li>MySQL的主键名总是PRIMARY，就算自己命名了主键约束名也没用；</li><li>当创建主键约束时，系统默认会在所在的列或列组合上建立对应的主键索引（能够根据主键查询的，就根据主键查询，效率更高）。如果删除主键约束了，主键约束对应的索引就自动删除了；</li><li>需要注意的一点是，不要修改主键字段的值。因为主键是数据记录的唯一标识，如果修改了主键的值，就有可能会破坏数据的完整性。</li></ul><h3 id="添加主键约束"><a href="#添加主键约束" class="headerlink" title="添加主键约束"></a>添加主键约束</h3><p><strong>建表时</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">字段名 数据类型 <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型，</span><br><span class="line">[<span class="keyword">constraint</span> 约束名] <span class="keyword">primary</span> key(字段名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>建表后</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(字段列表); #字段列表可以是一个字段，也可以是多个字段，如果是多个字段的话，是复合主键</span><br></pre></td></tr></table></figure><h3 id="复合主键约束"><a href="#复合主键约束" class="headerlink" title="复合主键约束"></a>复合主键约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名称(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型,</span><br><span class="line"><span class="keyword">primary</span> key(字段名<span class="number">1</span>,字段名<span class="number">2</span>) #表示字段<span class="number">1</span>和字段<span class="number">2</span>的组合是唯一的，也可以有更多个字段</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="删除主键约束"><a href="#删除主键约束" class="headerlink" title="删除主键约束"></a>删除主键约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 <span class="keyword">drop</span> <span class="keyword">primary</span> key;</span><br></pre></td></tr></table></figure><ul><li>说明：删除主键约束，不需要指定主键名，因为一个表只有一个主键，删除主键约束后，非空还存在。</li></ul><h2 id="自增约束-AUTO-INCREMENT"><a href="#自增约束-AUTO-INCREMENT" class="headerlink" title="自增约束 AUTO_INCREMENT"></a>自增约束 AUTO_INCREMENT</h2><ul><li>一个表最多只能有一个自增长列;</li><li>当需要产生唯一标识符或顺序值时，可设置自增长;</li><li>自增长列约束的列必须是键列（主键列，唯一键列）;</li><li>自增约束的列的数据类型必须是整数类型;</li><li>如果自增列指定了 0 和 null，会在当前最大值的基础上自增；如果自增列手动指定了具体值，直接赋值为具体值。</li></ul><p><strong>建表时</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名称(</span><br><span class="line">字段名 数据类型 <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">字段名 数据类型 <span class="keyword">unique</span> key <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">字段名 数据类型 <span class="keyword">unique</span> key,</span><br><span class="line">字段名 数据类型 <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> 默认值,</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名称(</span><br><span class="line">字段名 数据类型 <span class="keyword">default</span> 默认值 ,</span><br><span class="line">字段名 数据类型 <span class="keyword">unique</span> key auto_increment,</span><br><span class="line">字段名 数据类型 <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> 默认值,,</span><br><span class="line"><span class="keyword">primary</span> key(字段名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>建表后</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 modify 字段名 数据类型 auto_increment;</span><br></pre></td></tr></table></figure><h3 id="删除自增约束"><a href="#删除自增约束" class="headerlink" title="删除自增约束"></a>删除自增约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">alter</span> <span class="keyword">table</span> 表名称 modify 字段名 数据类型 auto_increment;#给这个字段增加自增约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 modify 字段名 数据类型; #去掉auto_increment相当于删除</span><br></pre></td></tr></table></figure><h3 id="MySQL-8-0新特性—自增变量的持久化"><a href="#MySQL-8-0新特性—自增变量的持久化" class="headerlink" title="MySQL 8.0新特性—自增变量的持久化"></a>MySQL 8.0新特性—自增变量的持久化</h3><p>在MySQL 8.0之前，自增主键AUTO_INCREMENT的值如果大于max(primary key)+1，在MySQL重启后，会重置AUTO_INCREMENT&#x3D;max(primary key)+1，这种现象在某些情况下会导致业务主键冲突或者其他难以发现的问题。 下面通过案例来对比不同的版本中自增变量是否持久化。 在MySQL 5.7版本中，测试步骤如下： 创建的数据表中包含自增主键的id字段，语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#针对一个自增列，插入四个值。</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test1</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">0</span>),(<span class="number">0</span>),(<span class="number">0</span>),(<span class="number">0</span>);</span><br><span class="line">#查询结果</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test1;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">#删除id为<span class="number">4</span>的记录</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> test1 <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">#再插入一个空值</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test1 <span class="keyword">VALUES</span>(<span class="number">0</span>);</span><br><span class="line">#查询结果</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test1;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">#删除id为<span class="number">5</span>的数据</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> test1 <span class="keyword">where</span> id<span class="operator">=</span><span class="number">5</span>;</span><br><span class="line">#重启数据库，重新插入一个空值</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test1 <span class="keyword">values</span>(<span class="number">0</span>);</span><br><span class="line">#再次查询结果</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test1;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>从结果可以看出，新插入的0值分配的是4，按照重启前的操作逻辑，此处应该分配6。出现上述结果的主要原因是自增主键没有持久化。 在MySQL 5.7系统中，对于自增主键的分配规则，<strong>是由InnoDB数据字典内部一个 计数器来决定的，而该计数器只在内存中维护 ，并不会持久化到磁盘中。</strong>当数据库重启时，该计数器会被初始化。</p><p>在MySQL 8.0版本中，上述测试步骤最后一步的结果如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test1;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>从结果可以看出，自增变量已经持久化了。<br>MySQL 8.0将自增主键的计数器持久化到 <strong>重做日志</strong> 中。每次计数器发生改变，都会将其写入重做日志中。如果数据库重启，InnoDB会根据重做日志中的信息来初始化计数器的内存值。</p><h2 id="外键约束-FOREIGN-KEY"><a href="#外键约束-FOREIGN-KEY" class="headerlink" title="外键约束 FOREIGN KEY"></a>外键约束 FOREIGN KEY</h2><ul><li>限定某个表的某个字段的引用完整性；</li><li>比如：员工表的员工所在部门的选择，必须在部门表能找到对应的部分</li></ul><h3 id="主从表关系"><a href="#主从表关系" class="headerlink" title="主从表关系"></a>主从表关系</h3><ul><li>主表（父表）：被引用的表，被参考的表</li><li>从表（子表）：引用别人的表，参考别人的表</li><li>例如：员工表的员工所在部门这个字段的值要参考部门表：部门表是主表，员工表是从表。</li><li>例如：学生表、课程表、选课表：选课表的学生和课程要分别参考学生表和课程表，学生表和课程表是主表，选课表是从表。</li></ul><h3 id="外键特征"><a href="#外键特征" class="headerlink" title="外键特征"></a>外键特征</h3><ul><li><p>从表的外键列，必须引用&#x2F;参考主表的主键或唯一约束的列；</p><blockquote><p>因为被依赖&#x2F;被参考的值必须是唯一的</p></blockquote></li><li><p>在创建外键约束时，如果不给外键约束命名，默认名不是列名，而是自动产生一个外键名（例如student_ibfk_1;），也可以指定外键约束名；</p></li><li><p>创建(CREATE)表时就指定外键约束的话，先创建主表，再创建从表；</p></li><li><p>删表时，先删从表（或先删除外键约束），再删除主表；</p></li><li><p>当主表的记录被从表参照时，主表的记录将不允许删除，如果要删除数据，需要先删除从表中依赖该记录的数据，然后才可以删除主表的数据；</p></li><li><p>在“从表”中指定外键约束，并且一个表可以建立多个外键约束；</p></li><li><p>从表的外键列与主表被参照的列名字可以不相同，但是数据类型必须一样，逻辑意义一致。如果类型不一样，创建子表时，就会出现错误“ERROR 1005 (HY000): Can’t createtable’database.tablename’(errno: 150)”；</p></li><li><p>删除外键约束后，必须 手动 删除对应的索引；</p></li></ul><h3 id="双方约束"><a href="#双方约束" class="headerlink" title="双方约束"></a>双方约束</h3><p>-<br>  添加了外键约束后，主表的修改和删除数据受约束；</p><ul><li>添加了外键约束后，从表的添加和修改数据受约束；</li><li>在从表上建立外键，要求主表必须存在；</li><li>删除主表时，要求从表先删除，或将从表中外键引用该主表的关系先删除；</li></ul><h3 id="添加外键约束"><a href="#添加外键约束" class="headerlink" title="添加外键约束"></a>添加外键约束</h3><p><strong>建表时</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 主表名称(</span><br><span class="line">字段<span class="number">1</span> 数据类型 <span class="keyword">primary</span> key,</span><br><span class="line">字段<span class="number">2</span> 数据类型</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 从表名称(</span><br><span class="line">字段<span class="number">1</span> 数据类型 <span class="keyword">primary</span> key,</span><br><span class="line">字段<span class="number">2</span> 数据类型,</span><br><span class="line">[<span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span>外键约束名称<span class="operator">&gt;</span>] <span class="keyword">FOREIGN</span> KEY（从表的某个字段) <span class="keyword">references</span> 主表名(被参考字段)</span><br><span class="line">);</span><br><span class="line">#(从表的某个字段)的数据类型必须与主表名(被参考字段)的数据类型一致，逻辑意义也一样</span><br><span class="line">#(从表的某个字段)的字段名可以与主表名(被参考字段)的字段名一样，也可以不一样</span><br><span class="line"><span class="comment">-- FOREIGN KEY: 在表级指定子表中的列</span></span><br><span class="line"><span class="comment">-- REFERENCES: 标示在父表中的列</span></span><br></pre></td></tr></table></figure><p><strong>建表后</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表名 <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> 约束名] <span class="keyword">FOREIGN</span> KEY (从表的字段) <span class="keyword">REFERENCES</span> 主表名(被引用字段) [<span class="keyword">on</span> <span class="keyword">update</span> xx][<span class="keyword">on</span> <span class="keyword">delete</span> xx];</span><br></pre></td></tr></table></figure><h3 id="删除外键约束"><a href="#删除外键约束" class="headerlink" title="删除外键约束"></a>删除外键约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#第一步先查看约束名和删除外键约束</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.table_constraints <span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名称&#x27;</span>;#查看某个表的约束名</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表名 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 外键约束名;</span><br><span class="line">#第二步查看索引名和删除索引。（注意，只能手动删除）</span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> 表名称; #查看某个表的索引名</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表名 <span class="keyword">DROP</span> INDEX 索引名;</span><br></pre></td></tr></table></figure><h2 id="默认约束-DEFAULT"><a href="#默认约束-DEFAULT" class="headerlink" title="默认约束 DEFAULT"></a>默认约束 DEFAULT</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名称(</span><br><span class="line">字段名 数据类型 <span class="keyword">primary</span> key,</span><br><span class="line">字段名 数据类型 <span class="keyword">unique</span> key <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">字段名 数据类型 <span class="keyword">unique</span> key,</span><br><span class="line">字段名 数据类型 <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> 默认值,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 modify 字段名 数据类型 <span class="keyword">default</span> 默认值;</span><br><span class="line">#如果这个字段原来有非空约束，你还保留非空约束，那么在加默认值约束时，还得保留非空约束，否则非空约束就被</span><br><span class="line">删除了</span><br><span class="line">#同理，在给某个字段加非空约束也一样，如果这个字段原来有默认值约束，你想保留，也要在modify语句中保留默</span><br><span class="line">认值约束，否则就删除了</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 modify 字段名 数据类型 <span class="keyword">default</span> 默认值 <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名称 modify 字段名 数据类型 ;#删除默认值约束，也不保留非空约束</span><br><span class="line">alter table 表名称 modify 字段名 数据类型 not null; #删除默认值约束，保留非空</span><br></pre></td></tr></table></figure><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><ul><li>MySQL支持使用INSERT、UPDATE和DELETE语句对视图中的数据进行插入、更新和删除操作。当视图中的数据发生变化时，数据表中的数据也会发生变化，反之亦然。</li></ul><p><strong>格式：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE]</span><br><span class="line">[ALGORITHM <span class="operator">=</span> &#123;UNDEFINED <span class="operator">|</span> <span class="keyword">MERGE</span> <span class="operator">|</span> TEMPTABLE&#125;]</span><br><span class="line"><span class="keyword">VIEW</span> 视图名称 [(字段列表)]</span><br><span class="line"><span class="keyword">AS</span> 查询语句</span><br><span class="line">[<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span><span class="operator">|</span><span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> OPTION]</span><br></pre></td></tr></table></figure><p><strong>精简版：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名称</span><br><span class="line"><span class="keyword">AS</span> 查询语句</span><br></pre></td></tr></table></figure><p>Eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#创建</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> empvu80</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">80</span>;</span><br><span class="line">#查询</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> salvu80;</span><br></pre></td></tr></table></figure><ul><li>在定义视图的时候指定了“ALGORITHM &#x3D; TEMPTABLE”，视图将不支持INSERT和DELETE操作；</li><li>视图中不包含基表中所有被定义为非空又未指定默认值的列，视图将不支持INSERT操作；</li><li>在定义视图的SELECT语句中使用了 JOIN联合查询 ，视图将不支持INSERT和DELETE操作；</li><li>在定义视图的SELECT语句后的字段列表中使用了 数学表达式 或 子查询 ，视图将不支持INSERT，也</li><li>不支持UPDATE使用了数学表达式、子查询的字段值；</li><li>在定义视图的SELECT语句后的字段列表中使用 DISTINCT 、 聚合函数 、 GROUP BY 、 HAVING 、UNION 等，视图将不支持INSERT、UPDATE、DELETE；</li><li>在定义视图的SELECT语句中包含了子查询，而子查询中引用了FROM后面的表，视图将不支持INSERT、UPDATE、DELETE；</li><li>视图定义基于一个 不可更新视图 ；</li><li>常量视图。</li></ul><h2 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h2><blockquote><p>CREATE VIEW 子句中各列的别名应和子查询中各列相对应。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> empvu80</span><br><span class="line">(id_number, name, sal, department_id)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, first_name <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span> last_name, salary, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">80</span>;</span><br></pre></td></tr></table></figure><h2 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> IF <span class="keyword">EXISTS</span> 视图名称;</span><br></pre></td></tr></table></figure><h1 id="存储过程与函数"><a href="#存储过程与函数" class="headerlink" title="存储过程与函数"></a>存储过程与函数</h1><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><p>存储过程的英文是 Stored Procedure 。它的思想很简单，就是一组经过 预先编译 的 SQL 语句的封装。</p><p>执行过程：存储过程预先存储在 MySQL 服务器上，需要执行的时候，客户端只需要向服务器端发出调用存储过程的命令，服务器端就可以把预先存储好的这一系列 SQL 语句全部执行。</p><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ul><li>简化操作，提高了sql语句的重用性，减少了开发程序员的压力 ；</li><li>减少操作过程中的失误，提高效率；</li><li>减少网络传输量（客户端不需要把所有的 SQL 语句通过网络发给服务器） 4、减少了 SQL 语句暴露在网上的风险，也提高了数据查询的安全性；</li></ul><h3 id="视图、函数的对比"><a href="#视图、函数的对比" class="headerlink" title="视图、函数的对比"></a>视图、函数的对比</h3><p>它和视图有着同样的优点，清晰、安全，还可以减少网络传输量。不过它和视图不同，视图是<strong>虚拟表</strong> ，通常不对底层数据表直接操作，而存储过程是程序化的 SQL，可以直接操作<strong>底层数据表</strong> ，相比于面向集合的操作方式，能够实现一些更复杂的数据处理。</p><p>一旦存储过程被创建出来，使用它就像使用函数一样简单，我们直接通过调用存储过程名即可。相较于函数，存储过程<strong>没有返回值</strong>的。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名(<span class="keyword">IN</span><span class="operator">|</span><span class="keyword">OUT</span><span class="operator">|</span><span class="keyword">INOUT</span> 参数名 参数类型,...)</span><br><span class="line">[characteristics ...]</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">存储过程体</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>IN</td><td>当前参数为输入参数，也就是表示入参；存储过程只是读取这个参数的值。如果没有定义参数种类， 默认就是 IN ，表示输入参数。</td></tr><tr><td>OUT</td><td>当前参数为输出参数，也就是表示出参；执行完成之后，调用这个存储过程的客户端或者应用程序就可以读取这个参数返回的值了。</td></tr><tr><td>INOUT</td><td>当前参数既可以为输入参数，也可以为输出参数。</td></tr></tbody></table><ul><li><p>形参类型可以是 MySQL数据库中的任意类型。</p></li><li><p>characteristics 表示创建存储过程时指定的对存储过程的约束条件，其取值信息如下：</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LANGUAGE</span> <span class="keyword">SQL</span></span><br><span class="line"># 说明存储过程执行体是由<span class="keyword">SQL</span>语句组成的，当前系统支持的语言为<span class="keyword">SQL</span></span><br><span class="line">[<span class="keyword">NOT</span>] <span class="keyword">DETERMINISTIC</span></span><br><span class="line"># 指明存储过程执行的结果是否确定。<span class="keyword">DETERMINISTIC</span>表示结果是确定的。每次执行存储过程时，相同的输入会得到相同的输出。<span class="keyword">NOT</span> <span class="keyword">DETERMINISTIC</span>表示结果是不确定的，相同的输入可能得到不同的输出。如果没有指定任意一个值，默认为<span class="keyword">NOT</span> <span class="keyword">DETERMINISTIC</span>。</span><br><span class="line">&#123; <span class="keyword">CONTAINS</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">NO</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA <span class="operator">|</span> <span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA &#125;</span><br><span class="line"># 指明子程序使用<span class="keyword">SQL</span>语句的限制。</span><br><span class="line">#  <span class="keyword">CONTAINS</span> <span class="keyword">SQL</span>表示当前存储过程的子程序包含<span class="keyword">SQL</span>语句，但是并不包含读写数据的<span class="keyword">SQL</span>语句；</span><br><span class="line">#  <span class="keyword">NO</span> <span class="keyword">SQL</span>表示当前存储过程的子程序中不包含任何<span class="keyword">SQL</span>语句；</span><br><span class="line">#  <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA表示当前存储过程的子程序中包含读数据的<span class="keyword">SQL</span>语句；</span><br><span class="line">#  <span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA表示当前存储过程的子程序中包含写数据的<span class="keyword">SQL</span>语句。</span><br><span class="line">#  默认情况下，系统会指定为<span class="keyword">CONTAINS</span> <span class="keyword">SQL</span>。</span><br><span class="line"><span class="keyword">SQL</span> SECURITY &#123; DEFINER <span class="operator">|</span> INVOKER &#125;</span><br><span class="line">#执行当前存储过程的权限，即指明哪些用户能够执行当前存储过程。</span><br><span class="line">#  DEFINER 表示只有当前存储过程的创建者或者定义者才能执行当前存储过程；</span><br><span class="line">#  INVOKER 表示拥有当前存储过程的访问权限的用户能够执行当前存储过程。</span><br><span class="line">COMMENT <span class="string">&#x27;string&#x27;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>BEGIN…END</td><td>BEGIN…END中间包含了多个语句，每个语句都以（;）号为结束符。</td></tr><tr><td>DECLARE</td><td>DECLARE用来声明变量，使用的位置在于BEGIN…END语句中间，而且需要在其他语句使用之前进行变量的声明。</td></tr><tr><td>SET</td><td>赋值语句，用于对变量进行赋值。</td></tr><tr><td>SELECT…INTO</td><td>把从数据表中查询的结果存放到变量中，也就是为变量赋值。</td></tr><tr><td>DELIMITER</td><td>新的结束标记。</td></tr></tbody></table><p>Eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> select_all_data()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emps;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h3 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> 存储过程名(实参列表);</span><br></pre></td></tr></table></figure><h4 id="调用in"><a href="#调用in" class="headerlink" title="调用in"></a>调用in</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> sp1(<span class="string">&#x27;值&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="调用OUT"><a href="#调用OUT" class="headerlink" title="调用OUT"></a>调用OUT</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@name</span>;</span><br><span class="line"><span class="keyword">CALL</span> sp1(<span class="variable">@name</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@name</span>;</span><br></pre></td></tr></table></figure><h4 id="调用INOUT"><a href="#调用INOUT" class="headerlink" title="调用INOUT"></a>调用INOUT</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@name</span><span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">CALL</span> sp1(<span class="variable">@name</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@name</span>;</span><br></pre></td></tr></table></figure><h2 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> 函数名(参数名 参数类型,...)</span><br><span class="line"><span class="keyword">RETURNS</span> 返回值类型</span><br><span class="line">[characteristics ...]</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">函数体 #函数体中肯定有 <span class="keyword">RETURN</span> 语句</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><ul><li>参数列表：指定参数为IN、OUT或INOUT只对PROCEDURE是合法的，FUNCTION中总是默认为IN参数。</li><li>RETURNS type 语句表示函数返回数据的类型；RETURNS子句只能对FUNCTION做指定，对函数而言这是 强制 的。它用来指定函数的返回类型，而且函数体必须包含一个 RETURN value 语句。</li><li>characteristic 创建函数时指定的对函数的约束。取值与创建存储过程时相同，这里不再赘述。</li><li>函数体也可以用2我 N…END来表示SQL代码的开始和结束。如果函数体只有一条语句，也可以省略BEGIN…END。</li></ul><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>在MySQL中，存储函数的使用方法与MySQL内部函数的使用方法是一样的。换言之，用户自己定义的存储函数与MySQL内部函数是一个性质的。区别在于，存储函数是 用户自己定义 的，而内部函数是MySQL的开发者定义的。</p><p><strong>语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 函数名(实参列表)</span><br></pre></td></tr></table></figure><h2 id="存储函数与存储过程的区别"><a href="#存储函数与存储过程的区别" class="headerlink" title="存储函数与存储过程的区别"></a>存储函数与存储过程的区别</h2><table><thead><tr><th></th><th>关键字</th><th>调用语法</th><th>返回值</th><th>应用场景</th></tr></thead><tbody><tr><td>存储过程</td><td>PROCEDURE</td><td>CALL 存储过程()</td><td>理解为有0有或多个</td><td>一般用于更新</td></tr><tr><td>存储函数</td><td>FUNCTION</td><td>SELECT 函数()</td><td>只能是一个</td><td>一半用于查询结果为一个值并返回时</td></tr></tbody></table><ul><li>此外，存储函数可以放在查询语句中使用，存储过程不行。反之，存储过程的功能更加强大，包括能够执行对表的操作（创建、删除表）和事务操作，这些功能是存储函数不具备的。</li></ul><h2 id="存储过程查看、修改和删除"><a href="#存储过程查看、修改和删除" class="headerlink" title="存储过程查看、修改和删除"></a>存储过程查看、修改和删除</h2><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> &#123;<span class="keyword">PROCEDURE</span> <span class="operator">|</span> <span class="keyword">FUNCTION</span>&#125; 存储过程名或函数名</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> &#123;<span class="keyword">PROCEDURE</span> <span class="operator">|</span> <span class="keyword">FUNCTION</span>&#125; STATUS [<span class="keyword">LIKE</span> <span class="string">&#x27;pattern&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.Routines <span class="keyword">WHERE</span> ROUTINE_NAME<span class="operator">=</span><span class="string">&#x27;存储过程或函数的名&#x27;</span> [<span class="keyword">AND</span> ROUTINE_TYPE <span class="operator">=</span> &#123;<span class="string">&#x27;PROCEDURE|FUNCTION&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ul><li>修改存储过程或函数，不影响存储过程或函数功能，只是修改相关特性。使用ALTER语句实现。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> &#123;<span class="keyword">PROCEDURE</span> <span class="operator">|</span> <span class="keyword">FUNCTION</span>&#125; 存储过程或函数的名 [characteristic ...]</span><br></pre></td></tr></table></figure><p>其中，characteristic指定存储过程或函数的特性，其取值信息与创建存储过程、函数时的取值信息略有不同。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="keyword">CONTAINS</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">NO</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA <span class="operator">|</span> <span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA &#125;</span><br><span class="line"># <span class="keyword">CONTAINS</span> <span class="keyword">SQL</span> ，表示子程序包含<span class="keyword">SQL</span>语句，但不包含读或写数据的语句；<span class="keyword">NO</span> <span class="keyword">SQL</span> ，表示子程序中不包含<span class="keyword">SQL</span>语句；<span class="keyword">READS</span> <span class="keyword">SQL</span> DATA ，表示子程序中包含读数据的语句；<span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA ，表示子程序中包含写数据的语句；</span><br><span class="line"><span class="keyword">SQL</span> SECURITY &#123; DEFINER <span class="operator">|</span> INVOKER &#125;</span><br><span class="line"># DEFINER ，表示只有定义者自己才能够执行。INVOKER ，表示调用者可以执行。</span><br><span class="line">COMMENT <span class="string">&#x27;string’</span></span><br><span class="line"><span class="string"># 表示注释信息</span></span><br></pre></td></tr></table></figure><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> &#123;<span class="keyword">PROCEDURE</span> <span class="operator">|</span> <span class="keyword">FUNCTION</span>&#125; [IF <span class="keyword">EXISTS</span>] 存储过程或函数的名</span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>系统变量分为全局系统变量（需要添加 global 关键字）以及会话系统变量（需要添加 session 关键字），有时也把全局系统变量简称为全局变量，有时也把会话系统变量称为local变量。如果不写，默认会话级别。静态变量（在 MySQL 服务实例运行期间它们的值不能使用 set 动态修改）属于特殊的全局系统变量。</p><h2 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h2><h3 id="查看变量"><a href="#查看变量" class="headerlink" title="查看变量"></a>查看变量</h3><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>SHOW GLOBAL VARIABLES</td><td>查看所有全局变量</td></tr><tr><td>SHOW SESSION VARIABLES 或 SHOW VARIABLES</td><td>查看所有会话变量</td></tr><tr><td>SHOW GLOBAL VARIABLES LIKE ‘%标识符%’</td><td>查看满足条件部分全局变量</td></tr><tr><td>SHOW SESSION VARIABLES LIKE ‘%标识符%’</td><td>查看满足条件部分会话变量</td></tr></tbody></table><ul><li>作为 MySQL 编码规范，MySQL 中的系统变量以 两个“@” 开头，其中“@@global”仅用于标记全局系统变量，“@@session”仅用于标记会话系统变量。“@@”首先标记会话系统变量，如果会话系统变量不存在，则标记全局系统变量。</li></ul><p><strong>查看指定系统变量</strong></p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>SELECT @@global.变量名；</td><td>查看指定的系统变量值</td></tr><tr><td>SELECT @@session.变量名；或 SELECT @@变量名;</td><td>查看指定的会话变量值</td></tr></tbody></table><h3 id="修改变量"><a href="#修改变量" class="headerlink" title="修改变量"></a>修改变量</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#为全局变量赋值</span><br><span class="line">#方式<span class="number">1</span>:</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@global</span>.变量名<span class="operator">=</span>变量值;</span><br><span class="line">#方式<span class="number">2</span>：</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> 变量名<span class="operator">=</span>变量值;</span><br><span class="line">#为某个会话变量赋值</span><br><span class="line">#方式<span class="number">1</span>：</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.变量名<span class="operator">=</span>变量值;</span><br><span class="line">#方式<span class="number">2</span>：</span><br><span class="line"><span class="keyword">SET</span> SESSION 变量名<span class="operator">=</span>变量值</span><br></pre></td></tr></table></figure><h2 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h2><p>用户变量是用户自己定义的，作为 MySQL 编码规范，MySQL 中的用户变量以 一个“@” 开头。根据作用范围不同，又分为 会话用户变量 和 局部变量 。</p><ul><li>会话用户变量：作用域和会话变量一样，只对 <strong>当前连接</strong> 会话有效。</li><li>局部变量：只在 BEGIN 和 END 语句块中有效。局部变量只能在 <strong>存储过程和函数</strong> 中使用。</li></ul><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#方式<span class="number">1</span>：“<span class="operator">=</span>”或“:<span class="operator">=</span>”</span><br><span class="line"><span class="keyword">SET</span> @用户变量 <span class="operator">=</span> 值;</span><br><span class="line"><span class="keyword">SET</span> @用户变量 :<span class="operator">=</span> 值;</span><br><span class="line">#方式<span class="number">2</span>：“:<span class="operator">=</span>” 或 <span class="keyword">INTO</span>关键字</span><br><span class="line"><span class="keyword">SELECT</span> @用户变量 :<span class="operator">=</span> 表达式 [<span class="keyword">FROM</span> 等子句];</span><br><span class="line"><span class="keyword">SELECT</span> 表达式 <span class="keyword">INTO</span> @用户变量 [<span class="keyword">FROM</span> 等子句];</span><br></pre></td></tr></table></figure><p>Eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">INTO</span> <span class="variable">@avgsalary</span> <span class="keyword">FROM</span> employees</span><br></pre></td></tr></table></figure><h3 id="查看变量-1"><a href="#查看变量-1" class="headerlink" title="查看变量"></a>查看变量</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @用户变量</span><br></pre></td></tr></table></figure><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><ul><li>定义：可以使用 DECLARE 语句定义一个局部变量；</li><li>作用域：仅仅在定义它的 BEGIN … END 中有效；</li><li>位置：只能放在 BEGIN … END 中，<strong>而且只能放在第一句</strong>；</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">#声明局部变量</span><br><span class="line"><span class="keyword">DECLARE</span> 变量名<span class="number">1</span> 变量数据类型 [<span class="keyword">DEFAULT</span> 变量默认值];</span><br><span class="line"><span class="keyword">DECLARE</span> 变量名<span class="number">2</span>,变量名<span class="number">3</span>,... 变量数据类型 [<span class="keyword">DEFAULT</span> 变量默认值];</span><br><span class="line">#为局部变量赋值</span><br><span class="line"><span class="keyword">SET</span> 变量名<span class="number">1</span> <span class="operator">=</span> 值;</span><br><span class="line"><span class="keyword">SELECT</span> 值 <span class="keyword">INTO</span> 变量名<span class="number">2</span> [<span class="keyword">FROM</span> 子句];</span><br><span class="line">#查看局部变量的值</span><br><span class="line"><span class="keyword">SELECT</span> 变量<span class="number">1</span>,变量<span class="number">2</span>,变量<span class="number">3</span>;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h4 id="定义变量-1"><a href="#定义变量-1" class="headerlink" title="定义变量"></a>定义变量</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> 变量名 类型 [<span class="keyword">default</span> 值]; # 如果没有<span class="keyword">DEFAULT</span>子句，初始值为<span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><h4 id="赋值变量"><a href="#赋值变量" class="headerlink" title="赋值变量"></a>赋值变量</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> 变量名<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SET</span> 变量名:<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SELECT</span> 字段名或表达式 <span class="keyword">INTO</span> 变量名 <span class="keyword">FROM</span> 表;</span><br></pre></td></tr></table></figure><h1 id="定义条件与处理程序"><a href="#定义条件与处理程序" class="headerlink" title="定义条件与处理程序"></a>定义条件与处理程序</h1><p>定义条件就是给MySQL中的错误码命名，这有助于存储的程序代码更清晰。它将一个 错误名字 和 指定的错误条件 关联起来。这个名字可以随后被用在定义处理程序的 DECLARE HANDLER 语句中。定义条件使用DECLARE语句，语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> 错误名称 <span class="keyword">CONDITION</span> <span class="keyword">FOR</span> 错误码（或错误条件）</span><br></pre></td></tr></table></figure><ul><li>MySQL_error_code 和 sqlstate_value 都可以表示MySQL的错误。<ul><li>MySQL_error_code是数值类型错误代码。</li><li>sqlstate_value是长度为5的字符串类型错误代码。</li></ul></li><li>例如，在ERROR 1418 (HY000)中，1418是MySQL_error_code，’HY000’是sqlstate_value。</li><li>例如，在ERROR 1142（42000）中，1142是MySQL_error_code，’42000’是sqlstate_value</li></ul><p>可以为SQL执行过程中发生的某种类型的错误定义特殊的处理程序。定义处理程序时，使用DECLARE语句的语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> 处理方式 HANDLER <span class="keyword">FOR</span> 错误类型 处理语句</span><br></pre></td></tr></table></figure><ul><li>处理方式：处理方式有3个取值：CONTINUE、EXIT、UNDO。<ul><li>CONTINUE ：表示遇到错误不处理，继续执行。</li><li>EXIT ：表示遇到错误马上退出。</li><li>UNDO ：表示遇到错误后撤回之前的操作。MySQL中暂时不支持这样的操作。</li></ul></li><li>错误类型（即条件）可以有如下取值：<ul><li>SQLSTATE ‘字符串错误码’ ：表示长度为5的sqlstate_value类型的错误代码；</li><li>MySQL_error_code ：匹配数值类型错误代码；</li><li>错误名称 ：表示DECLARE … CONDITION定义的错误条件名称。</li><li>SQLWARNING ：匹配所有以01开头的SQLSTATE错误代码；</li><li>NOT FOUND ：匹配所有以02开头的SQLSTATE错误代码；</li><li>SQLEXCEPTION ：匹配所有没有被SQLWARNING或NOT FOUND捕获的SQLSTATE错误代码；</li></ul></li><li>处理语句：如果出现上述条件之一，则采用对应的处理方式，并执行指定的处理语句。语句可以是像“ SET 变量 &#x3D; 值 ”这样的简单语句，也可以是使用 BEGIN … END 编写的复合语句。</li></ul><p>Eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#方法<span class="number">1</span>：捕获sqlstate_value</span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;42S02&#x27;</span> <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;NO_SUCH_TABLE&#x27;</span>;</span><br><span class="line">#方法<span class="number">2</span>：捕获mysql_error_value</span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="number">1146</span> <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;NO_SUCH_TABLE&#x27;</span>;</span><br><span class="line">#方法<span class="number">3</span>：先定义条件，再调用</span><br><span class="line"><span class="keyword">DECLARE</span> no_such_table <span class="keyword">CONDITION</span> <span class="keyword">FOR</span> <span class="number">1146</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> NO_SUCH_TABLE <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;NO_SUCH_TABLE&#x27;</span>;</span><br><span class="line">#方法<span class="number">4</span>：使用<span class="keyword">SQLWARNING</span></span><br><span class="line"><span class="keyword">DECLARE</span> EXIT HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLWARNING</span> <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;ERROR&#x27;</span>;</span><br><span class="line">#方法<span class="number">5</span>：使用<span class="keyword">NOT</span> FOUND</span><br><span class="line"><span class="keyword">DECLARE</span> EXIT HANDLER <span class="keyword">FOR</span> <span class="keyword">NOT</span> FOUND <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;NO_SUCH_TABLE&#x27;</span>;</span><br><span class="line">#方法<span class="number">6</span>：使用<span class="keyword">SQLEXCEPTION</span></span><br><span class="line"><span class="keyword">DECLARE</span> EXIT HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLEXCEPTION</span> <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;ERROR&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h2><p><strong>语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IF 表达式<span class="number">1</span> <span class="keyword">THEN</span> 操作<span class="number">1</span></span><br><span class="line">[ELSEIF 表达式<span class="number">2</span> <span class="keyword">THEN</span> 操作<span class="number">2</span>]……</span><br><span class="line">[<span class="keyword">ELSE</span> 操作N]</span><br><span class="line"><span class="keyword">END</span> IF</span><br></pre></td></tr></table></figure><p>Eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> update_salary_by_eid2(<span class="keyword">IN</span> emp_id <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> emp_salary <span class="keyword">DOUBLE</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> hire_year <span class="keyword">DOUBLE</span>;</span><br><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> emp_salary <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(CURDATE(),hire_date)<span class="operator">/</span><span class="number">365</span> <span class="keyword">INTO</span> hire_year</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">IF emp_salary <span class="operator">&lt;</span> <span class="number">8000</span> <span class="keyword">AND</span> hire_year <span class="operator">&gt;</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">THEN</span> <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">500</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span></span><br><span class="line">emp_id;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h2 id="CASE"><a href="#CASE" class="headerlink" title="CASE"></a>CASE</h2><p><strong>语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#情况一：类似于switch</span><br><span class="line"><span class="keyword">CASE</span> 表达式</span><br><span class="line"><span class="keyword">WHEN</span> 值<span class="number">1</span> <span class="keyword">THEN</span> 结果<span class="number">1</span>或语句<span class="number">1</span>(如果是语句，需要加分号)</span><br><span class="line"><span class="keyword">WHEN</span> 值<span class="number">2</span> <span class="keyword">THEN</span> 结果<span class="number">2</span>或语句<span class="number">2</span>(如果是语句，需要加分号)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> 结果n或语句n(如果是语句，需要加分号)</span><br><span class="line"><span class="keyword">END</span> [<span class="keyword">case</span>]（如果是放在<span class="keyword">begin</span> <span class="keyword">end</span>中需要加上<span class="keyword">case</span>，如果放在<span class="keyword">select</span>后面不需要）</span><br><span class="line"></span><br><span class="line">#情况二：类似于多重if</span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> 条件<span class="number">1</span> <span class="keyword">THEN</span> 结果<span class="number">1</span>或语句<span class="number">1</span>(如果是语句，需要加分号)</span><br><span class="line"><span class="keyword">WHEN</span> 条件<span class="number">2</span> <span class="keyword">THEN</span> 结果<span class="number">2</span>或语句<span class="number">2</span>(如果是语句，需要加分号)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> 结果n或语句n(如果是语句，需要加分号)</span><br><span class="line"><span class="keyword">END</span> [<span class="keyword">case</span>]（如果是放在<span class="keyword">begin</span> <span class="keyword">end</span>中需要加上<span class="keyword">case</span>，如果放在<span class="keyword">select</span>后面不需要）</span><br></pre></td></tr></table></figure><p>Eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CASE</span> val</span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="string">&#x27;val is 1&#x27;</span>;</span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="string">&#x27;val is 2&#x27;</span>;</span><br><span class="line"><span class="keyword">ELSE</span> <span class="keyword">SELECT</span> <span class="string">&#x27;val is not 1 or 2&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> val <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="string">&#x27;val is null&#x27;</span>;</span><br><span class="line"><span class="keyword">WHEN</span> val <span class="operator">&lt;</span> <span class="number">0</span> <span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="string">&#x27;val is less than 0&#x27;</span>;</span><br><span class="line"><span class="keyword">WHEN</span> val <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="string">&#x27;val is greater than 0&#x27;</span>;</span><br><span class="line"><span class="keyword">ELSE</span> <span class="keyword">SELECT</span> <span class="string">&#x27;val is 0&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br></pre></td></tr></table></figure><h2 id="LOOP"><a href="#LOOP" class="headerlink" title="LOOP"></a>LOOP</h2><p>LOOP循环语句用来重复执行某些语句。LOOP内的语句一直重复执行直到循环被退出（使用LEAVE子句），跳出循环过程。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#add_loop是循环名称，可以省略</span><br><span class="line">[loop_label:] LOOP</span><br><span class="line">循环体</span><br><span class="line">IF 跳出条件 <span class="keyword">THEN</span> LEAVE [loop_label];</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span> LOOP [loop_label];</span><br></pre></td></tr></table></figure><p>Eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> update_salary_loop(<span class="keyword">OUT</span> num <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> avg_salary <span class="keyword">DOUBLE</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> loop_count <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">INTO</span> avg_salary <span class="keyword">FROM</span> employees;</span><br><span class="line">label_loop:LOOP</span><br><span class="line">IF avg_salary <span class="operator">&gt;=</span> <span class="number">12000</span> <span class="keyword">THEN</span> LEAVE label_loop;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">*</span> <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">SET</span> loop_count <span class="operator">=</span> loop_count <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">INTO</span> avg_salary <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">END</span> LOOP label_loop;</span><br><span class="line"><span class="keyword">SET</span> num <span class="operator">=</span> loop_count;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h2 id="WHILE"><a href="#WHILE" class="headerlink" title="WHILE"></a>WHILE</h2><p>WHILE语句创建一个带条件判断的循环过程。WHILE在执行语句执行时，先对指定的表达式进行判断，如果为真，就执行循环内的语句，否则退出循环。WHILE语句的基本格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[while_label:] WHILE 循环条件 DO</span><br><span class="line">循环体</span><br><span class="line"><span class="keyword">END</span> WHILE [while_label];</span><br></pre></td></tr></table></figure><p>while_label为WHILE语句的标注名称；如果循环条件结果为真，WHILE语句内的语句或语句群被执行，直至循环条件为假，退出循环。</p><h2 id="REPEAT"><a href="#REPEAT" class="headerlink" title="REPEAT"></a>REPEAT</h2><blockquote><p>循环先执行一次，再判断</p></blockquote><p>REPEAT语句创建一个带条件判断的循环过程。与WHILE循环不同的是，REPEAT 循环首先会执行一次循环，然后在 UNTIL 中进行表达式的判断，如果满足条件就退出，即 END REPEAT；如果条件不满足，则会就继续执行循环，直到满足退出条件为止</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[repeat_label:]REPEAT</span><br><span class="line">循环体</span><br><span class="line">UNTIL 结束条件表达式</span><br><span class="line"><span class="keyword">END</span> REPEAT [repeat_label];</span><br></pre></td></tr></table></figure><h2 id="LEAVE"><a href="#LEAVE" class="headerlink" title="LEAVE"></a>LEAVE</h2><p>LEAVE语句：可以用在循环语句内，或者以 BEGIN 和 END 包裹起来的程序体内，表示跳出循环或者跳出程序体的操作。如果你有面向过程的编程语言的使用经验，你可以把 LEAVE 理解为 break。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LEAVE 标记名</span><br></pre></td></tr></table></figure><p>其中，label参数表示循环的标志。LEAVE和BEGIN … END或循环一起被使用。</p><h2 id="ITERATE"><a href="#ITERATE" class="headerlink" title="ITERATE"></a>ITERATE</h2><blockquote><p>等同于continue</p></blockquote><p>ITERATE语句：只能用在循环语句（LOOP、REPEAT和WHILE语句）内，表示重新开始循环，将执行顺序转到语句段开头处。如果你有面向过程的编程语言的使用经验，你可以把 ITERATE 理解为 continue，意思为“再次循环”。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ITERATE label</span><br></pre></td></tr></table></figure><h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><h1 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h1><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td><code>set autocommit=0</code></td><td>开启事务</td></tr><tr><td><code>rollback</code></td><td>回滚</td></tr><tr><td><code>commit</code></td><td>事务提交</td></tr></tbody></table><h1 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><h2 id="root用户密码忘记该如何重置"><a href="#root用户密码忘记该如何重置" class="headerlink" title="root用户密码忘记该如何重置"></a>root用户密码忘记该如何重置</h2><ol><li>通过任务管理或服务管理，关掉mysqld(服务进程)；</li><li>通过命令行+特殊参数开启mysqld；<ol><li><code>&lt;mysqld --defaults-file=&quot;D:\ProgramFiles\mysql\MySQLServer5.7Data\my.ini&quot; --skip-grant-tables</code></li></ol></li><li>此时，mysqld服务进程已打开，并且不需要权限检查；</li><li>mysql -uroot 无密码登录服务器，另启动一个客户端进行；</li><li>修改权限表：<ol><li><code>use mysql</code></li><li><code>update user set authentication_string=password(&#39;新密码&#39;) where user=&#39;root&#39; and Host=&#39;localhost&#39;;</code></li><li><code>flush privileges;</code></li></ol></li><li>通过任务管理器，关掉mysqld服务进程；</li><li>再次通过服务管理，打开mysql服务；</li><li>即可用修改后的新代码登录。</li></ol><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerlink&quot; title=&quot;基础概念&quot;&gt;&lt;/a&gt;基础概念&lt;/h1&gt;&lt;h2 id=&quot;关系型数据库设计规则&quot;&gt;&lt;a href=&quot;#关系型数据库设计规则&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="后端" scheme="https://erickinyae.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="数据库" scheme="https://erickinyae.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>hexo</title>
    <link href="https://erickinyae.github.io/2023/11/04/hexo/"/>
    <id>https://erickinyae.github.io/2023/11/04/hexo/</id>
    <published>2023-11-04T15:41:40.000Z</published>
    <updated>2023-11-07T00:56:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>hexo基础指令</p><table><thead><tr><th>指令</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>发布与上线</td><td>hexo  g -d</td><td></td></tr><tr><td>创建新文章</td><td>hexo new “title”</td><td></td></tr><tr><td>本地启动</td><td>hexo s</td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hexo基础指令&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;发布与上线&lt;/td&gt;
&lt;td&gt;hexo  g -d&lt;/td&gt;
&lt;td&gt;&lt;</summary>
      
    
    
    
    <category term="其他" scheme="https://erickinyae.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="https://erickinyae.github.io/2023/10/21/git/"/>
    <id>https://erickinyae.github.io/2023/10/21/git/</id>
    <published>2023-10-21T15:57:30.000Z</published>
    <updated>2023-11-09T05:53:51.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="添加与提交"><a href="#添加与提交" class="headerlink" title="添加与提交"></a>添加与提交</h1><p>代码的提交分为两个部分，分别是提交到缓存区，和提交到仓库。</p><p>提交到缓存区的方法为: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>将代码从缓存区提交到仓库的方法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &lt;提交说明&gt; &lt;filename&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eg: git commit -m &quot;first commit&quot; ./agent.jar</span><br></pre></td></tr></table></figure><h2 id="当代码拉取到本地"><a href="#当代码拉取到本地" class="headerlink" title="当代码拉取到本地"></a>当代码拉取到本地</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;remote name&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull git-demo master</span><br></pre></td></tr></table></figure><h2 id="克隆仓库代码到本地"><a href="#克隆仓库代码到本地" class="headerlink" title="克隆仓库代码到本地"></a>克隆仓库代码到本地</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;仓库链接&gt;</span><br></pre></td></tr></table></figure><p>克隆操作会做以下三件事情：</p><ol><li>拉取代码；</li><li>初始化本地仓库；</li><li>创建别名；</li></ol><h2 id="当前版本更改"><a href="#当前版本更改" class="headerlink" title="当前版本更改"></a>当前版本更改</h2><p>更改当前的版本代码，以实现代码版本回退的功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;代码版本号&gt;</span><br></pre></td></tr></table></figure><blockquote><p>代码版本号可以用git reflog 查到；</p><p>代码版本更改的底层原理是修改head指针指向的版本代码位置；</p></blockquote><h2 id="git日志查看"><a href="#git日志查看" class="headerlink" title="git日志查看"></a>git日志查看</h2><p>查看简单日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p>查看详细日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><h2 id="git分支操作"><a href="#git分支操作" class="headerlink" title="git分支操作"></a>git分支操作</h2><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr></tbody></table><blockquote><p>一般情况下，每次写代码都需要将别人的代码先merge下来</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge hot-fix</span><br><span class="line">#将hot-fix分支上的代码merge到当前分支上进行合并；</span><br></pre></td></tr></table></figure><h2 id="代码冲突时"><a href="#代码冲突时" class="headerlink" title="代码冲突时"></a>代码冲突时</h2><p>当代码冲突时，需要人为的到代码中去选择要删除和保留哪些内容，然后！</p><ol><li>第一步，手动的将修改完成的代码加入到缓存区（<code>git add &lt;filename&gt;</code>)；</li><li>第二步，执行提交，此时使用<code>git commit -m &lt;描述信息&gt;</code> 时，不能带文件名。</li></ol><h2 id="不同分支时代码提交-pull-request"><a href="#不同分支时代码提交-pull-request" class="headerlink" title="不同分支时代码提交(pull request)"></a>不同分支时代码提交(pull request)</h2><ol><li>让master主分支将我拉到该项目的团队中，然后fork一份代码库给到我的分支中；</li><li>自己首先需要将代码clone下来，然后进行开发、修改等操作；</li><li>开发、修改完成后，需要将代码push到属于我的分支的代码库中；</li><li>pull request：需要给其他分支发起推送请求，并等待其审核，如果代码没问题则合并到目标分支的代码中；</li></ol><h2 id="git本地给远程库创建一个别名"><a href="#git本地给远程库创建一个别名" class="headerlink" title="git本地给远程库创建一个别名"></a>git本地给远程库创建一个别名</h2><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td>git remote -v</td><td>查看当前远程库-别名列表；</td></tr><tr><td>git remote add &lt;别名&gt; &lt;远程地址&gt;</td><td>给远程库取一个名字</td></tr></tbody></table><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;添加与提交&quot;&gt;&lt;a href=&quot;#添加与提交&quot; class=&quot;headerlink&quot; title=&quot;添加与提交&quot;&gt;&lt;/a&gt;添加与提交&lt;/h1&gt;&lt;p&gt;代码的提交分为两个部分，分别是提交到缓存区，和提交到仓库。&lt;/p&gt;
&lt;p&gt;提交到缓存区的方法为: &lt;/p&gt;
&lt;fig</summary>
      
    
    
    
    <category term="后端" scheme="https://erickinyae.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="CI&#92;CD" scheme="https://erickinyae.github.io/tags/CI-CD/"/>
    
  </entry>
  
</feed>
